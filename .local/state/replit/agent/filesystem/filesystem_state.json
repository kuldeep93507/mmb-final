{"file_contents":{"DEPLOYMENT_CHECKLIST.md":{"content":"# 🚀 MMB Portfolio - Deployment Checklist\n\n## Pre-Deployment Checklist\n\n### 1. Environment Setup\n- [ ] Domain name purchased and configured\n- [ ] VPS/Server provisioned (min 1GB RAM, 10GB storage)\n- [ ] SSH access to server configured\n- [ ] Firewall rules planned\n\n### 2. DNS Configuration\n- [ ] A record: `@` → `your-server-ip`\n- [ ] A record: `www` → `your-server-ip`\n- [ ] TTL set to 3600 seconds\n- [ ] DNS propagation completed (check with `nslookup yourdomain.com`)\n\n### 3. File Preparation\n- [ ] All project files uploaded to server\n- [ ] File permissions set correctly\n- [ ] Environment variables configured\n- [ ] Admin credentials noted securely\n\n## Deployment Steps\n\n### Step 1: Server Login\n```bash\nssh root@your-server-ip\n```\n\n### Step 2: Upload Project Files\n```bash\n# Option A: Using SCP\nscp -r /local/path/mmb-portfolio root@your-server-ip:/var/www/\n\n# Option B: Using Git\ncd /var/www\ngit clone https://github.com/yourusername/mmb-portfolio.git\n\n# Option C: Using rsync\nrsync -avz /local/path/mmb-portfolio/ root@your-server-ip:/var/www/mmb-portfolio/\n```\n\n### Step 3: Run Installation Script\n```bash\ncd /var/www/mmb-portfolio\nchmod +x install.sh\nsudo ./install.sh\n```\n\n### Step 4: Configure Domain\n```bash\n# Edit Nginx configuration\nsudo nano /etc/nginx/sites-available/mmb-portfolio\n\n# Replace 'yourdomain.com' with your actual domain\n# Update CORS origins in backend/.env\n```\n\n### Step 5: Update Environment Variables\n```bash\n# Backend configuration\nnano /var/www/mmb-portfolio/backend/.env\n```\n\nUpdate with your domain:\n```env\nCORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com\n```\n\n```bash\n# Frontend configuration  \nnano /var/www/mmb-portfolio/frontend/.env\n```\n\nUpdate with your domain:\n```env\nREACT_APP_BACKEND_URL=https://yourdomain.com\n```\n\n### Step 6: Rebuild Frontend\n```bash\ncd /var/www/mmb-portfolio/frontend\nnpm run build\n```\n\n### Step 7: Restart Services\n```bash\nsudo systemctl reload nginx\npm2 restart all\n```\n\n### Step 8: Get SSL Certificate\n```bash\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n```\n\n## Post-Deployment Verification\n\n### 1. Service Status Check\n```bash\n# Check Nginx\nsudo systemctl status nginx\n\n# Check MongoDB\nsudo systemctl status mongod\n\n# Check Backend\npm2 status\n\n# Check processes\nsudo netstat -tlnp | grep :80\nsudo netstat -tlnp | grep :443\nsudo netstat -tlnp | grep :8001\n```\n\n### 2. Website Testing\n- [ ] Visit `http://yourdomain.com` - should redirect to HTTPS\n- [ ] Visit `https://yourdomain.com` - should load homepage\n- [ ] Test all pages: About, Services, Portfolio, Testimonials, Blog, Contact\n- [ ] Test contact form submission\n- [ ] Test WhatsApp button functionality\n\n### 3. Admin Panel Testing\n- [ ] Visit `https://yourdomain.com/admin/login`\n- [ ] Login with default credentials\n- [ ] Change admin password immediately\n- [ ] Update profile information\n- [ ] Test all admin functions:\n  - [ ] Dashboard loads correctly\n  - [ ] Services management\n  - [ ] Projects management\n  - [ ] Testimonials management\n  - [ ] Blog management\n  - [ ] Media management\n  - [ ] Contact inquiries\n  - [ ] Profile settings\n\n### 4. Performance Testing\n```bash\n# Test response times\ncurl -w \"@curl-format.txt\" -o /dev/null -s \"https://yourdomain.com\"\n\n# Test API endpoints\ncurl https://yourdomain.com/api/profile\ncurl https://yourdomain.com/api/services\ncurl https://yourdomain.com/api/projects\n```\n\n### 5. Security Check\n- [ ] HTTPS working correctly\n- [ ] SSL certificate valid\n- [ ] Security headers present\n- [ ] Admin panel accessible only with authentication\n- [ ] Firewall rules active\n- [ ] Unnecessary ports closed\n\n## Backup Setup\n\n### 1. Database Backup Script\n```bash\n# Create backup directory\nmkdir -p /backup/mongodb\n\n# Create backup script\ncat > /backup/mongodb-backup.sh << 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backup/mongodb\"\nmongodump --db mmb_portfolio --out $BACKUP_DIR/$DATE\nfind $BACKUP_DIR -type d -mtime +7 -exec rm -rf {} +\nEOF\n\nchmod +x /backup/mongodb-backup.sh\n```\n\n### 2. Setup Cron Job for Daily Backups\n```bash\n# Edit crontab\ncrontab -e\n\n# Add this line for daily backup at 2 AM\n0 2 * * * /backup/mongodb-backup.sh\n```\n\n### 3. File Backup\n```bash\n# Create file backup script\ncat > /backup/file-backup.sh << 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\ntar -czf /backup/mmb-portfolio-$DATE.tar.gz /var/www/mmb-portfolio\nfind /backup -name \"mmb-portfolio-*.tar.gz\" -mtime +7 -delete\nEOF\n\nchmod +x /backup/file-backup.sh\n```\n\n## Monitoring Setup\n\n### 1. Log Monitoring\n```bash\n# View real-time logs\npm2 logs\nsudo tail -f /var/log/nginx/access.log\nsudo tail -f /var/log/nginx/error.log\n```\n\n### 2. System Monitoring\n```bash\n# Check system resources\nhtop\ndf -h\nfree -h\n```\n\n### 3. Uptime Monitoring\nConsider setting up:\n- UptimeRobot\n- Pingdom  \n- StatusCake\n\n## Maintenance Tasks\n\n### Daily\n- [ ] Check service status\n- [ ] Monitor disk space\n- [ ] Review error logs\n\n### Weekly  \n- [ ] Check backup integrity\n- [ ] Update system packages\n- [ ] Review security alerts\n\n### Monthly\n- [ ] Update SSL certificates (auto-renewal check)\n- [ ] Performance analysis\n- [ ] Security audit\n\n## Troubleshooting\n\n### Common Issues\n\n1. **502 Bad Gateway**\n   ```bash\n   pm2 restart all\n   sudo systemctl restart nginx\n   ```\n\n2. **SSL Certificate Issues**\n   ```bash\n   sudo certbot renew --dry-run\n   sudo certbot renew\n   ```\n\n3. **Database Connection Issues**\n   ```bash\n   sudo systemctl restart mongod\n   ```\n\n4. **High Memory Usage**\n   ```bash\n   pm2 restart all\n   pm2 monit\n   ```\n\n### Emergency Contacts\n- **Developer**: kuldeep@mmb.dev\n- **Phone**: +91 9817034573\n- **Support**: Available 9 AM - 6 PM IST\n\n## Success Criteria\n\nDeployment is successful when:\n- [x] Website loads at your domain with HTTPS\n- [x] All pages function correctly\n- [x] Admin panel is accessible and functional\n- [x] Contact form works and sends emails\n- [x] SSL certificate is valid\n- [x] All services are running stable\n- [x] Backups are configured\n- [x] Monitoring is in place\n\n## Final Notes\n\n- Save all credentials securely\n- Document any customizations made\n- Set up regular maintenance schedule\n- Consider CDN setup for better performance\n- Plan for scaling if needed\n\n**🎉 Congratulations! Your MMB Portfolio website is now live!**","size_bytes":6248},"INSTALLATION_GUIDE.md":{"content":"# 🚀 MMB Portfolio Website - Complete Installation Guide\n\n## 📋 System Requirements\n\n- **VPS/Server**: Ubuntu 20.04+ or CentOS 7+\n- **RAM**: Minimum 1GB (Recommended 2GB+)\n- **Storage**: Minimum 10GB free space\n- **Domain**: Optional but recommended\n\n## 🎯 Quick Installation (Recommended)\n\n### Option 1: Automated Installation Script\n\n```bash\n# Download and run installation script\ncurl -fsSL https://raw.githubusercontent.com/yourusername/mmb-portfolio/main/install.sh | bash\n```\n\n### Option 2: Manual Installation\n\n1. **Upload Project Files**\n```bash\n# Upload your project files to server\nscp -r /path/to/mmb-portfolio root@your-server-ip:/var/www/\n```\n\n2. **Run Installation Script**\n```bash\ncd /var/www/mmb-portfolio\nchmod +x install.sh\nsudo ./install.sh\n```\n\n## 🔧 Manual Step-by-Step Installation\n\n### Step 1: System Update & Dependencies\n\n```bash\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install required packages\nsudo apt install -y curl wget git nginx mongodb certbot python3-certbot-nginx\n```\n\n### Step 2: Install Node.js\n\n```bash\n# Install Node.js 18\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n### Step 3: Install Python & Dependencies\n\n```bash\n# Install Python\nsudo apt install -y python3 python3-pip python3-venv\n\n# Install PM2 globally\nsudo npm install -g pm2\n```\n\n### Step 4: Setup Project\n\n```bash\n# Navigate to project directory\ncd /var/www/mmb-portfolio\n\n# Setup Backend\ncd backend\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\ncd ..\n\n# Setup Frontend\ncd frontend\nnpm install\nnpm run build\ncd ..\n```\n\n### Step 5: Configure Environment Variables\n\n```bash\n# Copy environment files\ncp backend/.env.example backend/.env\ncp frontend/.env.example frontend/.env\n\n# Edit backend environment\nnano backend/.env\n```\n\n**Backend .env configuration:**\n```env\nMONGO_URL=mongodb://localhost:27017/mmb_portfolio\nDB_NAME=mmb_portfolio\nCORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com\nJWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long\n```\n\n**Frontend .env configuration:**\n```env\nREACT_APP_BACKEND_URL=https://yourdomain.com\n```\n\n### Step 6: Setup Database\n\n```bash\n# Start MongoDB\nsudo systemctl start mongod\nsudo systemctl enable mongod\n\n# Seed database with initial data\ncd backend\nsource venv/bin/activate\npython seed_data.py\ncd ..\n```\n\n### Step 7: Setup PM2 for Backend\n\n```bash\n# Create PM2 ecosystem file\ncp ecosystem.config.example.js ecosystem.config.js\n\n# Edit with your settings\nnano ecosystem.config.js\n\n# Start backend with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n```\n\n### Step 8: Configure Nginx\n\n```bash\n# Copy nginx configuration\nsudo cp nginx.conf /etc/nginx/sites-available/mmb-portfolio\n\n# Edit configuration with your domain\nsudo nano /etc/nginx/sites-available/mmb-portfolio\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/mmb-portfolio /etc/nginx/sites-enabled/\nsudo rm /etc/nginx/sites-enabled/default\n\n# Test and restart nginx\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n### Step 9: Setup SSL Certificate\n\n```bash\n# Get SSL certificate\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n```\n\n### Step 10: Configure Firewall\n\n```bash\n# Setup UFW firewall\nsudo ufw allow OpenSSH\nsudo ufw allow 'Nginx Full'\nsudo ufw enable\n```\n\n## 🎛️ Admin Panel Access\n\nAfter installation, access your admin panel:\n\n**URL**: `https://yourdomain.com/admin/login`\n\n**Default Credentials:**\n- **Email**: `kuldeep@mmb.dev`\n- **Password**: `MMB@2024!Secure`\n\n**⚠️ IMPORTANT**: Change these credentials immediately after first login!\n\n## 🔐 Security Setup\n\n1. **Change Admin Credentials**\n   - Login to admin panel\n   - Go to Profile Settings\n   - Change password using \"Change Password\" section\n\n2. **Update Contact Information**\n   - Update your name, email, phone in Profile Settings\n   - This will automatically update across all pages\n\n3. **Configure Media**\n   - Upload your logo, favicon, images in Media Manager\n   - All images will be automatically optimized\n\n## 📱 Features Available\n\n### User Panel\n- Modern responsive design\n- Dynamic contact information\n- Project showcase\n- Blog system\n- Testimonials\n- Contact form with WhatsApp integration\n\n### Admin Panel\n- Dashboard with analytics\n- Content management (Services, Projects, Blog, Testimonials)\n- Media management (Logo, Images)\n- Contact inquiries management\n- Profile settings\n- Password management\n\n## 🔄 Maintenance Commands\n\n### Update Application\n```bash\ncd /var/www/mmb-portfolio\ngit pull origin main\ncd frontend && npm run build\npm2 restart all\n```\n\n### Database Backup\n```bash\nmongodump --db mmb_portfolio --out /backup/$(date +%Y%m%d)\n```\n\n### View Logs\n```bash\n# PM2 logs\npm2 logs\n\n# Nginx logs\nsudo tail -f /var/log/nginx/error.log\nsudo tail -f /var/log/nginx/access.log\n\n# MongoDB logs\nsudo tail -f /var/log/mongodb/mongod.log\n```\n\n### Restart Services\n```bash\n# Restart all services\nsudo systemctl restart nginx\nsudo systemctl restart mongod\npm2 restart all\n```\n\n## 🆘 Troubleshooting\n\n### Common Issues\n\n1. **502 Bad Gateway**\n   - Check if backend is running: `pm2 status`\n   - Check backend logs: `pm2 logs`\n   - Restart backend: `pm2 restart all`\n\n2. **Database Connection Error**\n   - Check MongoDB status: `sudo systemctl status mongod`\n   - Restart MongoDB: `sudo systemctl restart mongod`\n\n3. **SSL Certificate Issues**\n   - Renew certificate: `sudo certbot renew`\n   - Check certificate status: `sudo certbot certificates`\n\n4. **Permission Issues**\n   - Fix file permissions: `sudo chown -R www-data:www-data /var/www/mmb-portfolio`\n\n### Contact Support\n\nIf you face any issues during installation:\n- Email: kuldeep@mmb.dev\n- Phone: +91 9817034573\n\n## 🎉 Success!\n\nYour MMB Portfolio website is now live! \n\n- **Website**: https://yourdomain.com\n- **Admin Panel**: https://yourdomain.com/admin/login\n\nRemember to:\n1. Change admin credentials\n2. Update profile information\n3. Upload your media files\n4. Test all functionality\n\n## 📊 Performance Optimization\n\n### Optional Optimizations\n\n1. **Enable Gzip Compression**\n2. **Setup CDN (Cloudflare)**\n3. **Database Indexing**\n4. **Image Optimization**\n5. **Caching Configuration**\n\nFor advanced optimization, contact: kuldeep@mmb.dev","size_bytes":6267},"LOCALHOST_SETUP.md":{"content":"# 🏠 MMB Portfolio - Localhost Setup Guide\n\n## 🚀 Local Development Setup (5 minutes)\n\n### Prerequisites\n\nआपके system में ये installed होना चाहिए:\n- **Node.js** (18+) - [Download](https://nodejs.org/)\n- **Python** (3.8+) - [Download](https://python.org/)\n- **MongoDB** - [Download](https://mongodb.com/try/download/community)\n\n## Step 1: MongoDB Setup\n\n### Option A: Install MongoDB Locally\n```bash\n# Windows (using Chocolatey)\nchoco install mongodb\n\n# macOS (using Homebrew)\nbrew tap mongodb/brew\nbrew install mongodb-community\n\n# Ubuntu/Linux\nsudo apt update\nsudo apt install -y mongodb\n\n# Start MongoDB service\nsudo systemctl start mongod\nsudo systemctl enable mongod\n```\n\n### Option B: Use MongoDB Atlas (Cloud - Recommended)\n1. Go to [MongoDB Atlas](https://cloud.mongodb.com/)\n2. Create free account\n3. Create cluster\n4. Get connection string\n5. Update in backend/.env\n\n## Step 2: Clone/Download Project\n\n```bash\n# If using Git\ngit clone <your-project-url>\ncd mmb-portfolio\n\n# Or extract if downloaded as ZIP\n```\n\n## Step 3: Backend Setup (Terminal 1)\n\n```bash\n# Navigate to backend directory\ncd backend\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# Windows:\nvenv\\Scripts\\activate\n# macOS/Linux:\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Create .env file\ncp .env.example .env\n\n# Edit .env file with your settings\n# Windows: notepad .env\n# macOS: open .env\n# Linux: nano .env\n```\n\n**Update backend/.env file:**\n```env\nMONGO_URL=mongodb://localhost:27017/mmb_portfolio\nDB_NAME=mmb_portfolio\nCORS_ORIGINS=http://localhost:3000\nJWT_SECRET=your-local-secret-key-for-development\n```\n\n```bash\n# Seed database with initial data\npython seed_data.py\n\n# Start backend server\npython server.py\n# या\nuvicorn server:app --host 0.0.0.0 --port 8001 --reload\n```\n\n**Backend will run on:** http://localhost:8001\n\n## Step 4: Frontend Setup (Terminal 2)\n\n```bash\n# Navigate to frontend directory (new terminal)\ncd frontend\n\n# Install Node.js dependencies\nnpm install\n\n# Create .env file\ncp .env.example .env\n\n# Edit .env file\n# Windows: notepad .env\n# macOS: open .env  \n# Linux: nano .env\n```\n\n**Update frontend/.env file:**\n```env\nREACT_APP_BACKEND_URL=http://localhost:8001\n```\n\n```bash\n# Start frontend development server\nnpm start\n```\n\n**Frontend will run on:** http://localhost:3000\n\n## 🎉 Access Your Website\n\n### User Website\n- **URL**: http://localhost:3000\n- **Pages**: Home, About, Services, Portfolio, Testimonials, Blog, Contact\n\n### Admin Panel\n- **URL**: http://localhost:3000/admin/login\n- **Email**: kuldeep@mmb.dev\n- **Password**: MMB@2024!Secure\n\n## 🔧 Development Commands\n\n### Backend Commands\n```bash\ncd backend\nsource venv/bin/activate  # Activate virtual environment\n\n# Start server\npython server.py\n\n# Start with auto-reload\nuvicorn server:app --reload\n\n# Seed database\npython seed_data.py\n\n# Check requirements\npip list\n```\n\n### Frontend Commands\n```bash\ncd frontend\n\n# Start development server\nnpm start\n\n# Build for production\nnpm run build\n\n# Install new package\nnpm install package-name\n\n# Check dependencies\nnpm list\n```\n\n## 📁 File Structure\n\n```\nmmb-portfolio/\n├── backend/\n│   ├── venv/                # Virtual environment\n│   ├── uploads/             # Uploaded media files\n│   ├── .env                 # Environment variables\n│   ├── server.py            # Main FastAPI app\n│   ├── models.py            # Database models\n│   ├── auth.py              # Authentication\n│   ├── admin_routes.py      # Admin API routes\n│   ├── public_routes.py     # Public API routes\n│   ├── seed_data.py         # Database seeding\n│   └── requirements.txt     # Python dependencies\n├── frontend/\n│   ├── node_modules/        # Node.js dependencies\n│   ├── src/\n│   │   ├── components/      # React components\n│   │   ├── pages/           # Page components\n│   │   ├── context/         # React contexts\n│   │   └── hooks/           # Custom hooks\n│   ├── public/              # Static files\n│   ├── .env                 # Frontend environment\n│   └── package.json         # Node.js dependencies\n└── README.md\n```\n\n## 🛠️ Development Workflow\n\n1. **Start Backend** (Terminal 1):\n   ```bash\n   cd backend\n   source venv/bin/activate\n   python server.py\n   ```\n\n2. **Start Frontend** (Terminal 2):\n   ```bash\n   cd frontend\n   npm start\n   ```\n\n3. **Make Changes**:\n   - Backend changes: Server auto-reloads with `--reload` flag\n   - Frontend changes: Browser auto-refreshes\n\n4. **Test Changes**:\n   - Frontend: http://localhost:3000\n   - Backend API: http://localhost:8001/docs\n   - Admin Panel: http://localhost:3000/admin/login\n\n## 🔍 Testing APIs\n\n### Using Browser\n- **API Documentation**: http://localhost:8001/docs\n- **Profile API**: http://localhost:8001/api/profile\n- **Services API**: http://localhost:8001/api/services\n\n### Using curl\n```bash\n# Test profile API\ncurl http://localhost:8001/api/profile\n\n# Test services API\ncurl http://localhost:8001/api/services\n\n# Test admin login\ncurl -X POST http://localhost:8001/api/admin/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"kuldeep@mmb.dev\",\"password\":\"MMB@2024!Secure\"}'\n```\n\n## 📊 Database Management\n\n### View Database\n```bash\n# Connect to MongoDB\nmongo\n# or\nmongosh\n\n# Use database\nuse mmb_portfolio\n\n# View collections\nshow collections\n\n# View admin users\ndb.admins.find()\n\n# View services\ndb.services.find()\n```\n\n### Reset Database\n```bash\ncd backend\nsource venv/bin/activate\npython seed_data.py\n```\n\n## 🆘 Troubleshooting\n\n### Backend Issues\n\n**MongoDB Connection Error:**\n```bash\n# Check if MongoDB is running\nsudo systemctl status mongod\n\n# Start MongoDB\nsudo systemctl start mongod\n\n# Or use MongoDB Atlas connection string\n```\n\n**Port Already in Use:**\n```bash\n# Kill process on port 8001\nlsof -ti:8001 | xargs kill -9\n\n# Or use different port\nuvicorn server:app --port 8002\n```\n\n**Python Dependencies Error:**\n```bash\n# Upgrade pip\npip install --upgrade pip\n\n# Reinstall requirements\npip install -r requirements.txt --force-reinstall\n```\n\n### Frontend Issues\n\n**Node.js Dependencies Error:**\n```bash\n# Clear cache\nnpm cache clean --force\n\n# Delete node_modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n**Port 3000 in Use:**\n```bash\n# Kill process on port 3000\nlsof -ti:3000 | xargs kill -9\n\n# Or React will ask to use different port\n```\n\n**Environment Variables Not Loading:**\n```bash\n# Make sure .env file exists\nls -la .env\n\n# Restart development server\nnpm start\n```\n\n## 🔧 Development Tips\n\n### VS Code Extensions (Recommended)\n- Python\n- ES7+ React/Redux/React-Native snippets\n- Prettier - Code formatter\n- Thunder Client (API testing)\n- MongoDB for VS Code\n\n### Hot Reload Setup\n- **Backend**: Use `uvicorn server:app --reload`\n- **Frontend**: `npm start` automatically includes hot reload\n\n### API Testing\n- **Swagger UI**: http://localhost:8001/docs\n- **Thunder Client**: VS Code extension\n- **Postman**: Desktop application\n- **curl**: Command line tool\n\n## 📝 Making Changes\n\n### Add New Page\n1. Create component in `frontend/src/pages/`\n2. Add route in `frontend/src/App.js`\n3. Add navigation link if needed\n\n### Add New API Endpoint\n1. Add route in `backend/admin_routes.py` or `backend/public_routes.py`\n2. Add model in `backend/models.py` if needed\n3. Test in http://localhost:8001/docs\n\n### Update Database Schema\n1. Update models in `backend/models.py`\n2. Update seed data in `backend/seed_data.py`\n3. Run `python seed_data.py` to refresh\n\n## 🎯 Next Steps\n\n1. **Customize Content**: Update profile, services, projects in admin panel\n2. **Add Your Data**: Replace mock data with your information\n3. **Test Everything**: Forms, admin panel, all pages\n4. **Build for Production**: `npm run build` when ready\n5. **Deploy**: Use installation package for production\n\n## 📞 Development Support\n\n- **Email**: kuldeep@mmb.dev\n- **Phone**: +91 9817034573\n\n**Happy Coding! 🚀**","size_bytes":8128},"QUICK_START.md":{"content":"# 🚀 MMB Portfolio - Quick Start Guide\n\n## 30-Second Setup\n\n### Option 1: Automated Installation (Recommended)\n\n```bash\n# 1. Upload project files to your server\nscp -r mmb-portfolio root@your-server-ip:/var/www/\n\n# 2. SSH into your server  \nssh root@your-server-ip\n\n# 3. Run installation script\ncd /var/www/mmb-portfolio\nchmod +x install.sh\nsudo ./install.sh\n\n# 4. Update domain name\nsudo nano /etc/nginx/sites-available/mmb-portfolio\n# Replace 'yourdomain.com' with your domain\n\n# 5. Get SSL certificate\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n\n# 6. Done! Visit https://yourdomain.com\n```\n\n### Option 2: One-Line Installation\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/kuldeepparjapati/mmb-portfolio/main/install.sh | sudo bash\n```\n\n## Default Admin Access\n\n**URL**: `https://yourdomain.com/admin/login`\n\n**Credentials**:\n- Email: `kuldeep@mmb.dev`\n- Password: `MMB@2024!Secure`\n\n⚠️ **Change these immediately after first login!**\n\n## What You Get\n\n### User Website\n- ✅ Modern responsive portfolio\n- ✅ Dynamic contact information  \n- ✅ Project showcase\n- ✅ Blog system\n- ✅ Testimonials\n- ✅ Contact form with WhatsApp\n- ✅ Privacy Policy & Terms\n\n### Admin Panel\n- ✅ Content management\n- ✅ Media management (logo, images)\n- ✅ Contact inquiries\n- ✅ Analytics dashboard\n- ✅ Profile settings\n- ✅ Password management\n\n## Tech Stack\n\n- **Frontend**: React + Tailwind CSS\n- **Backend**: FastAPI + Python\n- **Database**: MongoDB\n- **Server**: Nginx + PM2\n- **SSL**: Let's Encrypt\n\n## System Requirements\n\n- **VPS**: 1GB RAM, 10GB storage\n- **OS**: Ubuntu 20.04+ or CentOS 7+\n- **Domain**: Optional but recommended\n\n## Support\n\n- **Email**: kuldeep@mmb.dev\n- **Phone**: +91 9817034573\n- **Hours**: 9 AM - 6 PM IST\n\n## Next Steps\n\n1. **Customize Content**: Update your profile, services, projects\n2. **Upload Media**: Add your logo, images in Media Manager  \n3. **Test Everything**: Contact form, admin panel, all pages\n4. **Go Live**: Share your portfolio with the world!\n\n**🎉 Your professional portfolio is ready in minutes!**","size_bytes":2085},"README.md":{"content":"# 🌟 MMB Portfolio Website\n\n> Professional portfolio website with powerful admin panel for content management\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python](https://img.shields.io/badge/Python-3.8+-blue.svg)](https://python.org)\n[![React](https://img.shields.io/badge/React-18+-blue.svg)](https://reactjs.org)\n[![MongoDB](https://img.shields.io/badge/MongoDB-6.0+-green.svg)](https://mongodb.com)\n\n## ✨ Features\n\n### 🎨 User Website\n- **Modern Design**: Clean, responsive, professional layout\n- **Dynamic Content**: All content managed through admin panel\n- **Contact Integration**: WhatsApp button, contact form, dynamic contact info\n- **SEO Optimized**: Meta tags, structured data, fast loading\n- **Legal Pages**: Privacy Policy, Terms of Service\n- **Blog System**: Full blog with categories and tags\n- **Portfolio Showcase**: Project gallery with filters\n- **Testimonials**: Client reviews and ratings\n\n### 🔧 Admin Panel\n- **Dashboard**: Analytics and overview\n- **Content Management**: Services, projects, blog posts, testimonials\n- **Media Manager**: Upload and manage logos, images, favicon\n- **Contact Management**: View and manage inquiries\n- **Profile Settings**: Update personal information\n- **Security**: Password management, secure authentication\n- **Real-time Updates**: Changes reflect immediately on website\n\n### 🛡️ Technical Features\n- **Full-Stack**: React frontend + FastAPI backend\n- **Database**: MongoDB with proper indexing\n- **Authentication**: JWT-based secure admin access\n- **File Upload**: Secure media upload with validation\n- **API-First**: RESTful API design\n- **Production Ready**: PM2, Nginx, SSL configuration\n- **Backup System**: Automated database backups\n\n## 🚀 Quick Installation\n\n### Option 1: One-Line Install\n```bash\ncurl -fsSL https://raw.githubusercontent.com/kuldeepparjapati/mmb-portfolio/main/install.sh | sudo bash\n```\n\n### Option 2: Manual Install\n```bash\n# Clone repository\ngit clone https://github.com/kuldeepparjapati/mmb-portfolio.git\ncd mmb-portfolio\n\n# Run installation script\nchmod +x install.sh\nsudo ./install.sh\n\n# Update domain and get SSL\nsudo nano /etc/nginx/sites-available/mmb-portfolio\nsudo certbot --nginx -d yourdomain.com\n```\n\n## 📁 Project Structure\n\n```\nmmb-portfolio/\n├── backend/                 # FastAPI backend\n│   ├── models.py           # Database models\n│   ├── auth.py             # Authentication\n│   ├── admin_routes.py     # Admin API endpoints\n│   ├── public_routes.py    # Public API endpoints\n│   ├── server.py           # Main application\n│   ├── seed_data.py        # Database seeding\n│   └── requirements.txt    # Python dependencies\n├── frontend/               # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable components\n│   │   ├── pages/          # Page components\n│   │   ├── context/        # React contexts\n│   │   └── hooks/          # Custom hooks\n│   ├── public/             # Static assets\n│   └── package.json        # Node dependencies\n├── install.sh              # Automated installation script\n├── nginx.conf              # Nginx configuration\n├── ecosystem.config.js     # PM2 configuration\n└── INSTALLATION_GUIDE.md   # Detailed installation guide\n```\n\n## 🔐 Default Admin Access\n\n**URL**: `https://yourdomain.com/admin/login`\n\n**Credentials**:\n- Email: `kuldeep@mmb.dev`\n- Password: `MMB@2024!Secure`\n\n⚠️ **IMPORTANT**: Change these credentials immediately after installation!\n\n## 📋 System Requirements\n\n### Minimum Requirements\n- **OS**: Ubuntu 20.04+ / CentOS 7+\n- **RAM**: 1GB (2GB recommended)\n- **Storage**: 10GB free space\n- **Network**: Public IP address\n- **Domain**: Optional but recommended\n\n### Dependencies (Auto-installed)\n- Node.js 18+\n- Python 3.8+\n- MongoDB 6.0+\n- Nginx\n- PM2\n- Certbot (for SSL)\n\n## 🌐 Hosting Options\n\n### VPS Providers (Recommended)\n- **DigitalOcean**: Starting $6/month\n- **Linode**: Starting $5/month  \n- **Vultr**: Starting $5/month\n- **Hostinger VPS**: Starting ₹329/month\n\n### Cloud Platforms\n- **AWS EC2**: Variable pricing\n- **Google Cloud**: Variable pricing\n- **Azure**: Variable pricing\n\n### Managed Hosting\n- **Hostinger**: Shared hosting option\n- **SiteGround**: WordPress hosting\n- **Cloudways**: Managed cloud hosting\n\n## 🔧 Configuration\n\n### Environment Variables\n\n**Backend** (`backend/.env`):\n```env\nMONGO_URL=mongodb://localhost:27017/mmb_portfolio\nDB_NAME=mmb_portfolio\nCORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com\nJWT_SECRET=your-super-secret-key\n```\n\n**Frontend** (`frontend/.env`):\n```env\nREACT_APP_BACKEND_URL=https://yourdomain.com\n```\n\n### Custom Domain Setup\n1. Point A records to your server IP\n2. Update Nginx configuration\n3. Get SSL certificate with Certbot\n4. Update CORS origins\n\n## 📊 API Endpoints\n\n### Public APIs\n- `GET /api/profile` - Get profile information\n- `GET /api/services` - Get services list\n- `GET /api/projects` - Get projects list\n- `GET /api/testimonials` - Get testimonials\n- `GET /api/blogs` - Get blog posts\n- `POST /api/contact` - Submit contact form\n- `GET /api/media` - Get media assets\n\n### Admin APIs\n- `POST /api/admin/login` - Admin authentication\n- `GET /api/admin/verify` - Verify admin token\n- `PUT /api/admin/change-password` - Change password\n- `CRUD /api/admin/{services,projects,testimonials,blogs}` - Content management\n- `POST /api/admin/upload-media` - Upload media files\n\n## 🛠️ Development\n\n### Local Development Setup\n```bash\n# Backend\ncd backend\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\npython server.py\n\n# Frontend  \ncd frontend\nnpm install\nnpm start\n```\n\n### Production Build\n```bash\n# Frontend production build\ncd frontend\nnpm run build\n\n# Backend with PM2\npm2 start ecosystem.config.js\n```\n\n## 🔍 Monitoring & Maintenance\n\n### Service Status\n```bash\n# Check all services\nsudo systemctl status nginx mongod\npm2 status\n\n# View logs\npm2 logs\nsudo tail -f /var/log/nginx/error.log\n```\n\n### Database Backup\n```bash\n# Manual backup\nmongodump --db mmb_portfolio --out /backup/$(date +%Y%m%d)\n\n# Automated backup (runs daily at 2 AM)\n0 2 * * * /backup/mongodb-backup.sh\n```\n\n### Updates\n```bash\n# Update application\ncd /var/www/mmb-portfolio\ngit pull origin main\ncd frontend && npm run build\npm2 restart all\n```\n\n## 🎨 Customization\n\n### Branding\n- Upload logo in Admin → Media Manager\n- Update colors in `frontend/src/index.css`\n- Modify layout in component files\n\n### Content\n- Update profile information in Admin Panel\n- Add your projects, services, testimonials\n- Write blog posts\n- Customize About page content\n\n### Features\n- Add new pages by creating components\n- Extend API endpoints in backend\n- Integrate third-party services\n- Add payment gateway for services\n\n## 🆘 Troubleshooting\n\n### Common Issues\n\n**502 Bad Gateway**\n```bash\npm2 restart all\nsudo systemctl restart nginx\n```\n\n**Database Connection Error**\n```bash\nsudo systemctl restart mongod\n```\n\n**SSL Certificate Issues**\n```bash\nsudo certbot renew\n```\n\n**File Upload Issues**\n```bash\n# Check permissions\nsudo chown -R www-data:www-data /var/www/mmb-portfolio\n```\n\n## 📞 Support\n\n- **Email**: kuldeep@mmb.dev\n- **Phone**: +91 9817034573\n- **Hours**: 9 AM - 6 PM IST\n- **Response Time**: Within 24 hours\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- **Design Inspiration**: Modern portfolio websites\n- **UI Components**: Tailwind CSS, shadcn/ui\n- **Icons**: Lucide React\n- **Hosting**: Compatible with major VPS providers\n\n## 🚀 Deployment Status\n\n- ✅ Development Complete\n- ✅ Testing Complete  \n- ✅ Production Ready\n- ✅ Installation Scripts Ready\n- ✅ Documentation Complete\n- ✅ Support Available\n\n---\n\n**Made with ❤️ by [Kuldeep Parjapati](mailto:kuldeep@mmb.dev)**\n\n*Professional portfolio website solution for developers, designers, and agencies*","size_bytes":8129},"VERCEL_RENDER_DEPLOYMENT.md":{"content":"# 🚀 Vercel & Render Deployment Guide\n\n## 📋 Pre-Deployment Checklist\n\n### ✅ पहले Localhost पर Test करें\n\n**बहुत जरूरी:** Production पर deploy करने से पहले localhost पर project को run करके test करना जरूरी है!\n\n```bash\n# Quick localhost setup\n./START_LOCALHOST.bat\n\n# या manually:\ncd backend\npython -m venv venv\nvenv\\Scripts\\activate\npip install -r requirements.txt\npython seed_data.py\npython server.py\n\n# दूसरे terminal में:\ncd frontend\nnpm install\nnpm start\n```\n\n**Test करें:**\n- Frontend: http://localhost:3000\n- Backend API: http://localhost:8001/docs\n- Admin Panel: http://localhost:3000/admin/login\n\n---\n\n## 🌐 Vercel Deployment\n\n### Step 1: Database Setup (MongoDB Atlas)\n\n1. **MongoDB Atlas Account बनाएं:**\n   - https://cloud.mongodb.com/ पर जाएं\n   - Free account बनाएं\n   - New cluster create करें\n\n2. **Database User बनाएं:**\n   - Database Access → Add New Database User\n   - Username/Password set करें\n   - Built-in Role: \"Read and write to any database\"\n\n3. **Network Access Setup:**\n   - Network Access → Add IP Address\n   - \"Allow access from anywhere\" (0.0.0.0/0)\n\n4. **Connection String लें:**\n   - Clusters → Connect → Connect your application\n   - Copy connection string\n   - Format: `mongodb+srv://username:password@cluster.mongodb.net/mmb_portfolio`\n\n### Step 2: Vercel Account Setup\n\n1. **Vercel Account:**\n   - https://vercel.com पर जाएं\n   - GitHub से sign up करें\n\n2. **GitHub Repository:**\n   - अपना project GitHub पर upload करें\n   - Public या Private repository बनाएं\n\n### Step 3: Vercel Deployment\n\n1. **Import Project:**\n   - Vercel Dashboard → \"Add New\" → \"Project\"\n   - GitHub repository select करें\n   - Import करें\n\n2. **Environment Variables Set करें:**\n   ```\n   MONGO_URL=mongodb+srv://username:password@cluster.mongodb.net/mmb_portfolio\n   DB_NAME=mmb_portfolio\n   JWT_SECRET=your-super-secret-jwt-key-production\n   CORS_ORIGINS=https://your-vercel-app.vercel.app\n   ```\n\n3. **Deploy करें:**\n   - \"Deploy\" button click करें\n   - Build process complete होने का wait करें\n\n### Step 4: Custom Domain (Optional)\n\n1. **Domain Add करें:**\n   - Project Settings → Domains\n   - अपना domain add करें\n   - DNS records update करें\n\n---\n\n## 🎨 Render Deployment\n\n### Step 1: Database Setup\n\n**Option A: MongoDB Atlas (Recommended)**\n- ऊपर दिए गए MongoDB Atlas steps follow करें\n\n**Option B: Render MongoDB**\n- Render Dashboard → \"New\" → \"MongoDB\"\n- Free plan select करें\n\n### Step 2: Backend Deployment\n\n1. **Render Account:**\n   - https://render.com पर जाएं\n   - GitHub से sign up करें\n\n2. **Web Service Create करें:**\n   - Dashboard → \"New\" → \"Web Service\"\n   - GitHub repository connect करें\n   - Settings:\n     ```\n     Name: mmb-portfolio-backend\n     Environment: Python 3\n     Build Command: cd backend && pip install -r requirements.txt\n     Start Command: cd backend && python server.py\n     ```\n\n3. **Environment Variables:**\n   ```\n   MONGO_URL=your-mongodb-connection-string\n   DB_NAME=mmb_portfolio\n   JWT_SECRET=your-super-secret-jwt-key\n   CORS_ORIGINS=https://your-frontend-url.onrender.com\n   PORT=8001\n   ```\n\n### Step 3: Frontend Deployment\n\n1. **Static Site Create करें:**\n   - Dashboard → \"New\" → \"Static Site\"\n   - Same GitHub repository select करें\n   - Settings:\n     ```\n     Name: mmb-portfolio-frontend\n     Build Command: cd frontend && npm install && npm run build\n     Publish Directory: frontend/build\n     ```\n\n2. **Environment Variables:**\n   ```\n   REACT_APP_BACKEND_URL=https://your-backend-url.onrender.com\n   ```\n\n---\n\n## 🔧 Production Configuration\n\n### Backend Production Settings\n\n**backend/.env (Production):**\n```env\nMONGO_URL=mongodb+srv://username:password@cluster.mongodb.net/mmb_portfolio\nDB_NAME=mmb_portfolio\nJWT_SECRET=super-secure-production-key-min-32-chars\nCORS_ORIGINS=https://yourdomain.com,https://your-vercel-app.vercel.app\nENVIRONMENT=production\nDEBUG=false\nHOST=0.0.0.0\nPORT=8001\n```\n\n### Frontend Production Settings\n\n**frontend/.env (Production):**\n```env\nREACT_APP_BACKEND_URL=https://your-backend-url.vercel.app\nREACT_APP_NAME=MMB Portfolio\nREACT_APP_SITE_URL=https://yourdomain.com\n```\n\n---\n\n## 🛠️ Deployment Commands\n\n### Manual Deployment\n\n**Vercel CLI:**\n```bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Login\nvercel login\n\n# Deploy\nvercel\n\n# Production deployment\nvercel --prod\n```\n\n**Render:**\n- Git push करने पर automatic deploy होता है\n- Manual deploy: Dashboard से \"Manual Deploy\" button\n\n---\n\n## 🔍 Post-Deployment Testing\n\n### 1. API Testing\n```bash\n# Profile API test\ncurl https://your-backend-url.vercel.app/api/profile\n\n# Services API test\ncurl https://your-backend-url.vercel.app/api/services\n\n# Admin login test\ncurl -X POST https://your-backend-url.vercel.app/api/admin/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"kuldeep@mmb.dev\",\"password\":\"MMB@2024!Secure\"}'\n```\n\n### 2. Frontend Testing\n- Homepage load हो रहा है?\n- All pages accessible हैं?\n- Admin panel login हो रहा है?\n- Forms submit हो रहे हैं?\n- Images load हो रहे हैं?\n\n### 3. Database Testing\n- Admin panel से data add/edit कर सकते हैं?\n- Contact form submissions save हो रहे हैं?\n- Blog posts create हो रहे हैं?\n\n---\n\n## 🆘 Common Issues & Solutions\n\n### Vercel Issues\n\n**Build Errors:**\n```bash\n# Check build logs in Vercel dashboard\n# Common fixes:\n- Update Node.js version in package.json\n- Check environment variables\n- Verify file paths\n```\n\n**API Routes Not Working:**\n- Check vercel.json configuration\n- Verify API routes in backend\n- Check CORS settings\n\n### Render Issues\n\n**Build Timeouts:**\n- Upgrade to paid plan for faster builds\n- Optimize build process\n- Use build cache\n\n**Database Connection:**\n```bash\n# Check MongoDB connection string\n# Verify network access in MongoDB Atlas\n# Check environment variables\n```\n\n### General Issues\n\n**CORS Errors:**\n```python\n# backend/server.py में check करें:\nCORS_ORIGINS = os.getenv(\"CORS_ORIGINS\", \"http://localhost:3000\").split(\",\")\n```\n\n**Environment Variables:**\n- Production में सभी required variables set हैं?\n- Sensitive data को .env में store करें\n- Never commit .env files to git\n\n---\n\n## 📊 Performance Optimization\n\n### Frontend Optimization\n```bash\n# Build optimization\nnpm run build\n\n# Bundle analysis\nnpm install --save-dev webpack-bundle-analyzer\nnpm run analyze\n```\n\n### Backend Optimization\n```python\n# Database indexing\n# Caching implementation\n# API response optimization\n```\n\n---\n\n## 🔐 Security Checklist\n\n- [ ] Strong JWT secret (32+ characters)\n- [ ] HTTPS enabled\n- [ ] CORS properly configured\n- [ ] Database access restricted\n- [ ] Admin password changed\n- [ ] Environment variables secured\n- [ ] File upload restrictions\n- [ ] Rate limiting implemented\n\n---\n\n## 📞 Support\n\n**Issues होने पर:**\n1. Localhost पर test करें\n2. Build logs check करें\n3. Environment variables verify करें\n4. Database connection test करें\n\n**Contact:**\n- Email: kuldeep@mmb.dev\n- Phone: +91 9817034573\n\n---\n\n## 🎯 Quick Deployment Summary\n\n### Vercel (Recommended for beginners)\n1. MongoDB Atlas setup\n2. GitHub repository upload\n3. Vercel import project\n4. Environment variables set\n5. Deploy!\n\n### Render (Good for full-stack)\n1. Database setup\n2. Backend web service\n3. Frontend static site\n4. Environment variables\n5. Deploy!\n\n**🎉 Happy Deploying!**","size_bytes":7932},"contracts.md":{"content":"# MMB Portfolio Website - API Contracts\n\n## Admin Panel Backend Implementation\n\n### Authentication Endpoints\n- `POST /api/admin/login` - Admin login\n- `POST /api/admin/logout` - Admin logout\n- `GET /api/admin/verify` - Verify admin token\n\n### Services Management\n- `GET /api/admin/services` - Get all services\n- `POST /api/admin/services` - Create new service\n- `PUT /api/admin/services/:id` - Update service\n- `DELETE /api/admin/services/:id` - Delete service\n\n### Projects Management\n- `GET /api/admin/projects` - Get all projects\n- `POST /api/admin/projects` - Create new project\n- `PUT /api/admin/projects/:id` - Update project\n- `DELETE /api/admin/projects/:id` - Delete project\n\n### Testimonials Management\n- `GET /api/admin/testimonials` - Get all testimonials\n- `POST /api/admin/testimonials` - Create new testimonial\n- `PUT /api/admin/testimonials/:id` - Update testimonial\n- `DELETE /api/admin/testimonials/:id` - Delete testimonial\n\n### Blog Management\n- `GET /api/admin/blogs` - Get all blog posts\n- `POST /api/admin/blogs` - Create new blog post\n- `PUT /api/admin/blogs/:id` - Update blog post\n- `DELETE /api/admin/blogs/:id` - Delete blog post\n\n### Contact Management\n- `GET /api/admin/contacts` - Get all contact inquiries\n- `DELETE /api/admin/contacts/:id` - Delete contact inquiry\n- `PUT /api/admin/contacts/:id/read` - Mark as read\n\n### Dashboard Stats\n- `GET /api/admin/stats` - Get dashboard statistics\n\n## Database Models\n\n### Admin Model\n- email: String (unique)\n- password: String (hashed)\n- name: String\n- role: String (default: 'admin')\n\n### Service Model\n- title: String\n- description: String\n- price: String\n- duration: String\n- features: Array of Strings\n- icon: String\n- active: Boolean\n\n### Project Model\n- title: String\n- description: String\n- image: String (URL)\n- category: String\n- tags: Array of Strings\n- technologies: Array of Strings\n- liveUrl: String\n- githubUrl: String\n- featured: Boolean\n\n### Testimonial Model\n- name: String\n- position: String\n- company: String\n- text: String\n- rating: Number\n- image: String (URL)\n- approved: Boolean\n\n### Blog Post Model\n- title: String\n- excerpt: String\n- content: String\n- image: String (URL)\n- category: String\n- tags: Array of Strings\n- author: String\n- publishDate: Date\n- published: Boolean\n\n### Contact Inquiry Model\n- name: String\n- email: String\n- phone: String\n- projectType: String\n- budget: String\n- message: String\n- timeline: String\n- read: Boolean\n- createdAt: Date\n\n## Frontend Admin Panel Structure\n\n### Pages\n1. `/admin/login` - Admin login page\n2. `/admin/dashboard` - Main dashboard with stats\n3. `/admin/services` - Services management\n4. `/admin/projects` - Projects management\n5. `/admin/testimonials` - Testimonials management\n6. `/admin/blog` - Blog management\n7. `/admin/contacts` - Contact inquiries\n\n### Components\n- AdminLayout - Main admin layout with sidebar\n- AdminSidebar - Navigation sidebar\n- DataTable - Reusable data table component\n- AdminForm - Reusable form component\n- StatsCard - Dashboard stats cards\n\n## Authentication Flow\n1. Admin enters credentials on login page\n2. Backend validates and returns JWT token\n3. Token stored in localStorage\n4. Protected routes check for valid token\n5. Auto logout on token expiry\n\n## Mock Data Integration\n- Replace mock data in frontend with real API calls\n- Maintain same data structure for seamless integration\n- Add loading states and error handling","size_bytes":3410},"ecosystem.config.js":{"content":"module.exports = {\n  apps: [{\n    name: 'mmb-backend',\n    script: 'uvicorn',\n    args: 'server:app --host 0.0.0.0 --port 8001',\n    cwd: '/var/www/mmb-portfolio/backend',\n    interpreter: '/var/www/mmb-portfolio/backend/venv/bin/python',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production'\n    },\n    error_file: '/var/log/pm2/mmb-backend.err.log',\n    out_file: '/var/log/pm2/mmb-backend.out.log',\n    log_file: '/var/log/pm2/mmb-backend.log'\n  }]\n};","size_bytes":529},"install.sh":{"content":"#!/bin/bash\n\n# MMB Portfolio Website - Automated Installation Script\n# Author: Kuldeep Parjapati\n# Version: 1.0\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Logging function\nlog() {\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"\n}\n\nerror() {\n    echo -e \"${RED}[ERROR] $1${NC}\"\n    exit 1\n}\n\nwarning() {\n    echo -e \"${YELLOW}[WARNING] $1${NC}\"\n}\n\ninfo() {\n    echo -e \"${BLUE}[INFO] $1${NC}\"\n}\n\n# Check if running as root\ncheck_root() {\n    if [[ $EUID -ne 0 ]]; then\n        error \"This script must be run as root. Use: sudo ./install.sh\"\n    fi\n}\n\n# Get system information\nget_system_info() {\n    log \"Detecting system information...\"\n    \n    if [[ -f /etc/os-release ]]; then\n        . /etc/os-release\n        OS=$NAME\n        VER=$VERSION_ID\n    else\n        error \"Cannot detect OS version\"\n    fi\n    \n    info \"Operating System: $OS\"\n    info \"Version: $VER\"\n}\n\n# Check system requirements\ncheck_requirements() {\n    log \"Checking system requirements...\"\n    \n    # Check RAM\n    RAM=$(free -m | grep '^Mem:' | awk '{print $2}')\n    if [[ $RAM -lt 512 ]]; then\n        warning \"Low RAM detected ($RAM MB). Minimum 1GB recommended.\"\n    else\n        info \"RAM: ${RAM}MB ✓\"\n    fi\n    \n    # Check disk space\n    DISK=$(df -h / | awk 'NR==2 {print $4}' | sed 's/G//')\n    if [[ ${DISK%.*} -lt 5 ]]; then\n        error \"Insufficient disk space. Minimum 5GB required.\"\n    else\n        info \"Disk Space: ${DISK}GB available ✓\"\n    fi\n}\n\n# Update system\nupdate_system() {\n    log \"Updating system packages...\"\n    \n    if [[ \"$OS\" == *\"Ubuntu\"* ]] || [[ \"$OS\" == *\"Debian\"* ]]; then\n        apt update && apt upgrade -y\n        apt install -y curl wget git software-properties-common\n    elif [[ \"$OS\" == *\"CentOS\"* ]] || [[ \"$OS\" == *\"Red Hat\"* ]]; then\n        yum update -y\n        yum install -y curl wget git\n    else\n        error \"Unsupported operating system: $OS\"\n    fi\n}\n\n# Install Node.js\ninstall_nodejs() {\n    log \"Installing Node.js 18...\"\n    \n    if command -v node &> /dev/null; then\n        NODE_VERSION=$(node --version)\n        info \"Node.js already installed: $NODE_VERSION\"\n    else\n        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -\n        apt-get install -y nodejs\n        \n        # Verify installation\n        if command -v node &> /dev/null; then\n            NODE_VERSION=$(node --version)\n            info \"Node.js installed successfully: $NODE_VERSION\"\n        else\n            error \"Node.js installation failed\"\n        fi\n    fi\n    \n    # Install PM2\n    npm install -g pm2\n    info \"PM2 installed successfully\"\n}\n\n# Install Python\ninstall_python() {\n    log \"Installing Python and dependencies...\"\n    \n    if [[ \"$OS\" == *\"Ubuntu\"* ]] || [[ \"$OS\" == *\"Debian\"* ]]; then\n        apt install -y python3 python3-pip python3-venv python3-dev\n    elif [[ \"$OS\" == *\"CentOS\"* ]] || [[ \"$OS\" == *\"Red Hat\"* ]]; then\n        yum install -y python3 python3-pip python3-devel\n    fi\n    \n    # Verify installation\n    if command -v python3 &> /dev/null; then\n        PYTHON_VERSION=$(python3 --version)\n        info \"Python installed successfully: $PYTHON_VERSION\"\n    else\n        error \"Python installation failed\"\n    fi\n}\n\n# Install MongoDB\ninstall_mongodb() {\n    log \"Installing MongoDB...\"\n    \n    if command -v mongod &> /dev/null; then\n        info \"MongoDB already installed\"\n    else\n        if [[ \"$OS\" == *\"Ubuntu\"* ]]; then\n            wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | apt-key add -\n            echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n            apt-get update\n            apt-get install -y mongodb-org\n        elif [[ \"$OS\" == *\"CentOS\"* ]]; then\n            cat > /etc/yum.repos.d/mongodb-org-7.0.repo << EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n            yum install -y mongodb-org\n        fi\n        \n        # Start and enable MongoDB\n        systemctl start mongod\n        systemctl enable mongod\n        \n        info \"MongoDB installed and started successfully\"\n    fi\n}\n\n# Install Nginx\ninstall_nginx() {\n    log \"Installing Nginx...\"\n    \n    if command -v nginx &> /dev/null; then\n        info \"Nginx already installed\"\n    else\n        if [[ \"$OS\" == *\"Ubuntu\"* ]] || [[ \"$OS\" == *\"Debian\"* ]]; then\n            apt install -y nginx\n        elif [[ \"$OS\" == *\"CentOS\"* ]] || [[ \"$OS\" == *\"Red Hat\"* ]]; then\n            yum install -y nginx\n        fi\n        \n        # Start and enable Nginx\n        systemctl start nginx\n        systemctl enable nginx\n        \n        info \"Nginx installed and started successfully\"\n    fi\n}\n\n# Install SSL Certificate tools\ninstall_certbot() {\n    log \"Installing Certbot for SSL certificates...\"\n    \n    if command -v certbot &> /dev/null; then\n        info \"Certbot already installed\"\n    else\n        if [[ \"$OS\" == *\"Ubuntu\"* ]] || [[ \"$OS\" == *\"Debian\"* ]]; then\n            apt install -y certbot python3-certbot-nginx\n        elif [[ \"$OS\" == *\"CentOS\"* ]] || [[ \"$OS\" == *\"Red Hat\"* ]]; then\n            yum install -y certbot python3-certbot-nginx\n        fi\n        \n        info \"Certbot installed successfully\"\n    fi\n}\n\n# Setup project directory\nsetup_project() {\n    log \"Setting up project directory...\"\n    \n    PROJECT_DIR=\"/var/www/mmb-portfolio\"\n    \n    # Create project directory if it doesn't exist\n    if [[ ! -d \"$PROJECT_DIR\" ]]; then\n        mkdir -p \"$PROJECT_DIR\"\n        info \"Project directory created: $PROJECT_DIR\"\n    fi\n    \n    # Set proper permissions\n    chown -R www-data:www-data \"$PROJECT_DIR\"\n    chmod -R 755 \"$PROJECT_DIR\"\n    \n    info \"Project directory setup completed\"\n}\n\n# Setup backend\nsetup_backend() {\n    log \"Setting up backend...\"\n    \n    cd /var/www/mmb-portfolio/backend\n    \n    # Create virtual environment\n    python3 -m venv venv\n    source venv/bin/activate\n    \n    # Install Python dependencies\n    if [[ -f \"requirements.txt\" ]]; then\n        pip install --upgrade pip\n        pip install -r requirements.txt\n        info \"Backend dependencies installed\"\n    else\n        error \"requirements.txt not found in backend directory\"\n    fi\n    \n    # Create uploads directory\n    mkdir -p uploads\n    chown -R www-data:www-data uploads\n    chmod -R 755 uploads\n    \n    # Setup environment file\n    if [[ ! -f \".env\" ]]; then\n        cat > .env << EOF\nMONGO_URL=mongodb://localhost:27017/mmb_portfolio\nDB_NAME=mmb_portfolio\nCORS_ORIGINS=http://localhost:3000,https://yourdomain.com\nJWT_SECRET=$(openssl rand -hex 32)\nEOF\n        info \"Backend .env file created\"\n    fi\n}\n\n# Setup frontend\nsetup_frontend() {\n    log \"Setting up frontend...\"\n    \n    cd /var/www/mmb-portfolio/frontend\n    \n    # Install Node.js dependencies\n    if [[ -f \"package.json\" ]]; then\n        npm install\n        info \"Frontend dependencies installed\"\n    else\n        error \"package.json not found in frontend directory\"\n    fi\n    \n    # Setup environment file\n    if [[ ! -f \".env\" ]]; then\n        cat > .env << EOF\nREACT_APP_BACKEND_URL=https://yourdomain.com\nEOF\n        info \"Frontend .env file created\"\n    fi\n    \n    # Build frontend for production\n    npm run build\n    info \"Frontend built successfully\"\n}\n\n# Seed database\nseed_database() {\n    log \"Seeding database with initial data...\"\n    \n    cd /var/www/mmb-portfolio/backend\n    source venv/bin/activate\n    \n    if [[ -f \"seed_data.py\" ]]; then\n        python seed_data.py\n        info \"Database seeded successfully\"\n    else\n        warning \"seed_data.py not found. You'll need to create admin user manually.\"\n    fi\n}\n\n# Setup PM2 ecosystem\nsetup_pm2() {\n    log \"Setting up PM2 for backend...\"\n    \n    cd /var/www/mmb-portfolio\n    \n    # Create PM2 ecosystem file\n    cat > ecosystem.config.js << 'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'mmb-backend',\n    script: 'uvicorn',\n    args: 'server:app --host 0.0.0.0 --port 8001',\n    cwd: '/var/www/mmb-portfolio/backend',\n    interpreter: '/var/www/mmb-portfolio/backend/venv/bin/python',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production'\n    },\n    error_file: '/var/log/pm2/mmb-backend.err.log',\n    out_file: '/var/log/pm2/mmb-backend.out.log',\n    log_file: '/var/log/pm2/mmb-backend.log'\n  }]\n};\nEOF\n    \n    # Create PM2 log directory\n    mkdir -p /var/log/pm2\n    chown -R www-data:www-data /var/log/pm2\n    \n    # Start application with PM2\n    pm2 start ecosystem.config.js\n    pm2 save\n    \n    # Setup PM2 startup\n    pm2 startup systemd -u www-data --hp /var/www\n    \n    info \"PM2 setup completed\"\n}\n\n# Configure Nginx\nconfigure_nginx() {\n    log \"Configuring Nginx...\"\n    \n    # Create Nginx configuration\n    cat > /etc/nginx/sites-available/mmb-portfolio << 'EOF'\nserver {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n    \n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    \n    # Frontend\n    location / {\n        root /var/www/mmb-portfolio/frontend/build;\n        index index.html index.htm;\n        try_files $uri $uri/ /index.html;\n        \n        # Cache static assets\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n        }\n    }\n    \n    # Backend API\n    location /api {\n        proxy_pass http://localhost:8001;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        \n        # CORS headers\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';\n        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';\n        \n        # Handle preflight requests\n        if ($request_method = 'OPTIONS') {\n            return 204;\n        }\n    }\n    \n    # Uploaded media files\n    location /uploads {\n        alias /var/www/mmb-portfolio/backend/uploads;\n        expires 1y;\n        add_header Cache-Control \"public\";\n    }\n    \n    # Security\n    location ~ /\\. {\n        deny all;\n    }\n}\nEOF\n    \n    # Enable site\n    ln -sf /etc/nginx/sites-available/mmb-portfolio /etc/nginx/sites-enabled/\n    rm -f /etc/nginx/sites-enabled/default\n    \n    # Test configuration\n    nginx -t\n    \n    if [[ $? -eq 0 ]]; then\n        systemctl reload nginx\n        info \"Nginx configured successfully\"\n    else\n        error \"Nginx configuration test failed\"\n    fi\n}\n\n# Setup firewall\nsetup_firewall() {\n    log \"Configuring firewall...\"\n    \n    if command -v ufw &> /dev/null; then\n        ufw --force reset\n        ufw default deny incoming\n        ufw default allow outgoing\n        ufw allow ssh\n        ufw allow 'Nginx Full'\n        ufw --force enable\n        info \"UFW firewall configured\"\n    else\n        warning \"UFW not available. Please configure firewall manually.\"\n    fi\n}\n\n# Create admin user info file\ncreate_admin_info() {\n    log \"Creating admin credentials file...\"\n    \n    cat > /var/www/mmb-portfolio/ADMIN_CREDENTIALS.txt << EOF\n=================================\nMMB Portfolio Website - Admin Access\n=================================\n\nWebsite URL: https://yourdomain.com\nAdmin Panel: https://yourdomain.com/admin/login\n\nDefault Admin Credentials:\nEmail: kuldeep@mmb.dev\nPassword: MMB@2024!Secure\n\n⚠️  IMPORTANT SECURITY NOTICE:\n1. Change these credentials immediately after first login\n2. Go to Admin Panel -> Profile Settings -> Change Password\n3. Update your profile information\n4. Delete this file after noting the credentials\n\nFeatures Available:\n- Dashboard with analytics\n- Content management (Services, Projects, Blog, Testimonials)\n- Media management (Logo, Images, Favicon)\n- Contact inquiries management\n- Profile settings\n- Password management\n\nSupport Contact:\nEmail: kuldeep@mmb.dev\nPhone: +91 9817034573\n\nGenerated on: $(date)\n=================================\nEOF\n    \n    chmod 600 /var/www/mmb-portfolio/ADMIN_CREDENTIALS.txt\n    info \"Admin credentials file created\"\n}\n\n# Final setup and verification\nfinal_setup() {\n    log \"Performing final setup and verification...\"\n    \n    # Set proper permissions\n    chown -R www-data:www-data /var/www/mmb-portfolio\n    chmod -R 755 /var/www/mmb-portfolio\n    \n    # Verify services\n    if systemctl is-active --quiet nginx; then\n        info \"✓ Nginx is running\"\n    else\n        error \"✗ Nginx is not running\"\n    fi\n    \n    if systemctl is-active --quiet mongod; then\n        info \"✓ MongoDB is running\"\n    else\n        error \"✗ MongoDB is not running\"\n    fi\n    \n    if pm2 list | grep -q \"mmb-backend\"; then\n        info \"✓ Backend is running\"\n    else\n        error \"✗ Backend is not running\"\n    fi\n}\n\n# Display completion message\ndisplay_completion() {\n    echo \"\"\n    echo -e \"${GREEN}================================================${NC}\"\n    echo -e \"${GREEN}🎉 MMB Portfolio Website Installation Complete!${NC}\"\n    echo -e \"${GREEN}================================================${NC}\"\n    echo \"\"\n    echo -e \"${BLUE}Next Steps:${NC}\"\n    echo -e \"${YELLOW}1. Update domain name in Nginx configuration:${NC}\"\n    echo \"   sudo nano /etc/nginx/sites-available/mmb-portfolio\"\n    echo \"\"\n    echo -e \"${YELLOW}2. Update environment variables:${NC}\"\n    echo \"   Backend: nano /var/www/mmb-portfolio/backend/.env\"\n    echo \"   Frontend: nano /var/www/mmb-portfolio/frontend/.env\"\n    echo \"\"\n    echo -e \"${YELLOW}3. Get SSL certificate:${NC}\"\n    echo \"   sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\"\n    echo \"\"\n    echo -e \"${YELLOW}4. Access admin panel:${NC}\"\n    echo \"   URL: https://yourdomain.com/admin/login\"\n    echo \"   Credentials: See /var/www/mmb-portfolio/ADMIN_CREDENTIALS.txt\"\n    echo \"\"\n    echo -e \"${YELLOW}5. Change admin password immediately!${NC}\"\n    echo \"\"\n    echo -e \"${GREEN}Support: kuldeep@mmb.dev | +91 9817034573${NC}\"\n    echo -e \"${GREEN}================================================${NC}\"\n}\n\n# Main installation function\nmain() {\n    echo -e \"${BLUE}\"\n    cat << \"EOF\"\n    ███╗   ███╗███╗   ███╗██████╗ \n    ████╗ ████║████╗ ████║██╔══██╗\n    ██╔████╔██║██╔████╔██║██████╔╝\n    ██║╚██╔╝██║██║╚██╔╝██║██╔══██╗\n    ██║ ╚═╝ ██║██║ ╚═╝ ██║██████╔╝\n    ╚═╝     ╚═╝╚═╝     ╚═╝╚═════╝ \n    \n    Portfolio Website Installer v1.0\n    Author: Kuldeep Parjapati\nEOF\n    echo -e \"${NC}\"\n    echo \"\"\n    \n    log \"Starting MMB Portfolio Website installation...\"\n    \n    # Run installation steps\n    check_root\n    get_system_info\n    check_requirements\n    update_system\n    install_nodejs\n    install_python\n    install_mongodb\n    install_nginx\n    install_certbot\n    setup_project\n    \n    # Check if project files exist\n    if [[ ! -d \"/var/www/mmb-portfolio/backend\" ]] || [[ ! -d \"/var/www/mmb-portfolio/frontend\" ]]; then\n        error \"Project files not found. Please upload your project files to /var/www/mmb-portfolio first.\"\n    fi\n    \n    setup_backend\n    setup_frontend\n    seed_database\n    setup_pm2\n    configure_nginx\n    setup_firewall\n    create_admin_info\n    final_setup\n    display_completion\n}\n\n# Handle script interruption\ntrap 'error \"Installation interrupted\"' INT TERM\n\n# Run main function\nmain \"$@\"","size_bytes":16413},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"bcrypt>=4.0.0\",\n    \"black>=24.1.1\",\n    \"boto3>=1.34.129\",\n    \"cryptography>=42.0.8\",\n    \"email-validator>=2.2.0\",\n    \"fastapi==0.110.1\",\n    \"flake8>=7.0.0\",\n    \"isort>=5.13.2\",\n    \"motor==3.3.1\",\n    \"mypy>=1.8.0\",\n    \"numpy>=1.26.0\",\n    \"pandas>=2.2.0\",\n    \"passlib>=1.7.4\",\n    \"pydantic>=2.6.4\",\n    \"pyjwt>=2.10.1\",\n    \"pymongo==4.5.0\",\n    \"pytest>=8.0.0\",\n    \"python-dotenv>=1.0.1\",\n    \"python-jose>=3.3.0\",\n    \"python-multipart>=0.0.9\",\n    \"requests>=2.32.5\",\n    \"requests-oauthlib>=2.0.0\",\n    \"selenium>=4.35.0\",\n    \"typer>=0.9.0\",\n    \"tzdata>=2024.2\",\n    \"uvicorn==0.25.0\",\n    \"webdriver-manager>=4.0.2\",\n]\n","size_bytes":785},"render.yaml":{"content":"services:\n  # Backend API Service\n  - type: web\n    name: mmb-portfolio-backend\n    env: python\n    buildCommand: \"cd backend && pip install -r requirements.txt\"\n    startCommand: \"cd backend && python server.py\"\n    plan: free\n    envVars:\n      - key: MONGO_URL\n        sync: false\n      - key: DB_NAME\n        value: mmb_portfolio\n      - key: JWT_SECRET\n        generateValue: true\n      - key: CORS_ORIGINS\n        value: https://mmb-portfolio-frontend.onrender.com\n      - key: PORT\n        value: 8001\n\n  # Frontend Static Site\n  - type: static\n    name: mmb-portfolio-frontend\n    buildCommand: \"cd frontend && npm install && npm run build\"\n    staticPublishPath: \"frontend/build\"\n    plan: free\n    envVars:\n      - key: REACT_APP_BACKEND_URL\n        value: https://mmb-portfolio-backend.onrender.com\n\ndatabases:\n  # MongoDB Database (if using Render's MongoDB)\n  - name: mmb-portfolio-db\n    plan: free\n    type: mongodb","size_bytes":930},"replit.md":{"content":"# MMB Portfolio - Replit Setup\n\n## Project Overview\nThis is a full-stack portfolio website featuring a React frontend and FastAPI backend. The application uses JSON file-based mock data storage and is fully configured for the Replit environment.\n\n## Recent Changes\n- **Date**: September 12, 2025\n- Configured for Replit environment with proper host configurations\n- Updated ports: Frontend (5000), Backend (8000)\n- Set up CORS for cross-origin communication\n- Configured workflows for both frontend and backend\n- Added deployment configuration for autoscale\n\n## Project Architecture\n### Frontend (React + TailwindCSS)\n- **Port**: 5000\n- **Framework**: Create React App with CRACO\n- **UI Library**: shadcn/ui components with Radix UI\n- **Configuration**: \n  - CRACO config allows all hosts for Replit proxy\n  - Environment variables point to backend API\n  - Cache-Control headers set to no-cache\n\n### Backend (FastAPI)\n- **Port**: 8000\n- **Framework**: FastAPI with Uvicorn\n- **Database**: JSON file-based mock database\n- **Authentication**: JWT-based admin authentication\n- **CORS**: Configured for Replit domain and localhost\n\n## Environment Configuration\n### Frontend (.env)\n```\nREACT_APP_BACKEND_URL=https://c8c5ce43-b358-4b41-9b87-8a58609f42a6-00-kmxcabryim7l.kirk.replit.dev:8000\nPORT=5000\nHOST=0.0.0.0\nWDS_SOCKET_HOST=0.0.0.0\n```\n\n### Backend (.env)\n```\nCORS_ORIGINS=https://c8c5ce43-b358-4b41-9b87-8a58609f42a6-00-kmxcabryim7l.kirk.replit.dev,http://localhost:5000\nFRONTEND_URL=https://c8c5ce43-b358-4b41-9b87-8a58609f42a6-00-kmxcabryim7l.kirk.replit.dev\nJWT_SECRET=mmb-portfolio-jwt-secret-key-for-replit-dev\nDB_NAME=mmb_portfolio\n```\n\n## Workflows\n1. **Frontend**: `cd frontend && npm start` - Serves React app on port 5000\n2. **Backend**: `cd backend && python server.py` - Serves API on port 8000\n\n## Admin Access\n- **URL**: https://[replit-domain]/admin/login\n- **Note**: Admin credentials are configured during setup for security\n\n## Key Features\n- Modern portfolio website with admin panel\n- Dynamic content management\n- Contact form integration\n- Blog system\n- Project showcase\n- Testimonials management\n- Media upload capabilities\n\n## Deployment\nConfigured for Replit's autoscale deployment with production build process.\n\n## Security Notes\n- CORS properly configured for Replit environment\n- JWT authentication for admin access\n- Environment variables used for configuration\n- No wildcard CORS origins in production","size_bytes":2432},"start_localhost.sh":{"content":"#!/bin/bash\n\n# MMB Portfolio - Local Development Starter for macOS/Linux\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\necho -e \"${BLUE}\"\ncat << \"EOF\"\n===============================================\n  MMB Portfolio - Local Development Starter\n===============================================\nEOF\necho -e \"${NC}\"\n\n# Check if we're in the right directory\nif [[ ! -d \"backend\" ]] || [[ ! -d \"frontend\" ]]; then\n    echo -e \"${RED}ERROR: backend or frontend folder not found!${NC}\"\n    echo \"Please run this script from the mmb-portfolio directory\"\n    exit 1\nfi\n\necho -e \"${GREEN}[1/5] Setting up Backend...${NC}\"\ncd backend\n\n# Check if virtual environment exists\nif [[ ! -d \"venv\" ]]; then\n    echo \"Creating Python virtual environment...\"\n    python3 -m venv venv\nfi\n\n# Activate virtual environment\nsource venv/bin/activate\n\n# Check if .env exists\nif [[ ! -f \".env\" ]]; then\n    echo \"Creating .env file...\"\n    cp .env.example .env\n    echo -e \"${YELLOW}Please edit backend/.env with your MongoDB connection!${NC}\"\nfi\n\necho \"Installing Python dependencies...\"\npip install -r requirements.txt\n\necho -e \"${GREEN}[2/5] Seeding database...${NC}\"\npython seed_data.py\n\necho -e \"${GREEN}[3/5] Setting up Frontend...${NC}\"\ncd ../frontend\n\n# Check if .env exists\nif [[ ! -f \".env\" ]]; then\n    echo \"Creating frontend .env file...\"\n    cp .env.example .env\nfi\n\necho \"Installing Node.js dependencies...\"\nnpm install\n\necho -e \"${GREEN}[4/5] Starting servers...${NC}\"\n\n# Function to start backend\nstart_backend() {\n    cd backend\n    source venv/bin/activate\n    echo -e \"${BLUE}Starting Backend Server on port 8001...${NC}\"\n    python server.py\n}\n\n# Function to start frontend  \nstart_frontend() {\n    cd frontend\n    echo -e \"${BLUE}Starting Frontend Server on port 3000...${NC}\"\n    npm start\n}\n\necho -e \"${GREEN}[5/5] Setup Complete!${NC}\"\necho \"\"\necho -e \"${BLUE}===============================================${NC}\"\necho -e \"${GREEN}🎉 MMB Portfolio is ready to start!${NC}\"\necho -e \"${BLUE}===============================================${NC}\"\necho \"\"\necho -e \"${YELLOW}You have two options:${NC}\"\necho \"\"\necho -e \"${YELLOW}Option 1: Automatic (Recommended)${NC}\"\necho \"  This will open two terminal tabs automatically\"\necho \"\"\necho -e \"${YELLOW}Option 2: Manual${NC}\"\necho \"  Open two terminals manually and run:\"\necho \"    Terminal 1: cd backend && source venv/bin/activate && python server.py\"\necho \"    Terminal 2: cd frontend && npm start\"\necho \"\"\n\n# Check if we're on macOS and can use osascript\nif [[ \"$OSTYPE\" == \"darwin\"* ]] && command -v osascript &> /dev/null; then\n    read -p \"Choose option (1 for automatic, 2 for manual): \" choice\n    \n    if [[ \"$choice\" == \"1\" ]]; then\n        echo \"Starting servers automatically...\"\n        \n        # Get current directory\n        CURRENT_DIR=$(pwd)\n        \n        # Start backend in new Terminal tab\n        osascript <<EOF\ntell application \"Terminal\"\n    activate\n    do script \"cd '$CURRENT_DIR/backend' && source venv/bin/activate && echo 'Backend Server Starting...' && python server.py\"\nend tell\nEOF\n        \n        # Wait a moment\n        sleep 2\n        \n        # Start frontend in new Terminal tab\n        osascript <<EOF\ntell application \"Terminal\"\n    activate\n    do script \"cd '$CURRENT_DIR/frontend' && echo 'Frontend Server Starting...' && npm start\"\nend tell\nEOF\n        \n        echo -e \"${GREEN}✅ Servers started in new Terminal tabs!${NC}\"\n    else\n        echo -e \"${YELLOW}Manual mode selected. Please open two terminals and run the commands shown above.${NC}\"\n    fi\n    \nelif command -v gnome-terminal &> /dev/null; then\n    # Linux with GNOME Terminal\n    read -p \"Choose option (1 for automatic, 2 for manual): \" choice\n    \n    if [[ \"$choice\" == \"1\" ]]; then\n        echo \"Starting servers automatically...\"\n        \n        # Start backend\n        gnome-terminal -- bash -c \"cd backend && source venv/bin/activate && echo 'Backend Server Starting...' && python server.py; exec bash\"\n        \n        # Wait a moment\n        sleep 2\n        \n        # Start frontend\n        gnome-terminal -- bash -c \"cd frontend && echo 'Frontend Server Starting...' && npm start; exec bash\"\n        \n        echo -e \"${GREEN}✅ Servers started in new terminal windows!${NC}\"\n    else\n        echo -e \"${YELLOW}Manual mode selected. Please open two terminals and run the commands shown above.${NC}\"\n    fi\nelse\n    echo -e \"${YELLOW}Automatic terminal opening not supported on this system.${NC}\"\n    echo -e \"${YELLOW}Please open two terminals manually and run:${NC}\"\n    echo \"\"\n    echo -e \"${BLUE}Terminal 1 (Backend):${NC}\"\n    echo \"  cd $(pwd)/backend\"\n    echo \"  source venv/bin/activate\"\n    echo \"  python server.py\"\n    echo \"\"\n    echo -e \"${BLUE}Terminal 2 (Frontend):${NC}\"\n    echo \"  cd $(pwd)/frontend\"\n    echo \"  npm start\"\nfi\n\necho \"\"\necho -e \"${BLUE}===============================================${NC}\"\necho -e \"${GREEN}🌐 Access Your Application:${NC}\"\necho -e \"${BLUE}===============================================${NC}\"\necho \"\"\necho -e \"${GREEN}Frontend:${NC} http://localhost:3000\"\necho -e \"${GREEN}Backend:${NC}  http://localhost:8001\"\necho -e \"${GREEN}Admin:${NC}    http://localhost:3000/admin/login\"\necho \"\"\necho -e \"${YELLOW}Default Admin Credentials:${NC}\"\necho -e \"${GREEN}Email:${NC}    kuldeep@mmb.dev\"\necho -e \"${GREEN}Password:${NC} MMB@2024!Secure\"\necho \"\"\necho -e \"${RED}⚠️  REMEMBER: Change admin password after first login!${NC}\"\necho \"\"\necho -e \"${BLUE}===============================================${NC}\"\necho -e \"${GREEN}Happy Coding! 🚀${NC}\"\necho -e \"${BLUE}===============================================${NC}\"","size_bytes":5717},"backend/admin_routes.py":{"content":"from fastapi import APIRouter, HTTPException, Depends, status, File, UploadFile\nfrom fastapi.responses import JSONResponse\nfrom fastapi.encoders import jsonable_encoder\nimport os\nimport uuid\nfrom pathlib import Path\nfrom typing import List\nfrom models import *\nfrom auth import get_current_admin, verify_password, hash_password, create_access_token, DEFAULT_ADMIN\n# MongoDB import removed - using mock database\nimport os\nfrom datetime import datetime\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\n# Load environment variables\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# Database will be injected from server.py\ndb = None\n\nadmin_router = APIRouter(prefix=\"/api/admin\", tags=[\"admin\"])\n\n# Initialize default admin if not exists\nasync def init_default_admin():\n    existing_admin = await db.admins.find_one({\"email\": DEFAULT_ADMIN[\"email\"]})\n    if not existing_admin:\n        hashed_password = hash_password(DEFAULT_ADMIN[\"password\"])\n        admin_data = Admin(\n            email=DEFAULT_ADMIN[\"email\"],\n            password=hashed_password,\n            name=DEFAULT_ADMIN[\"name\"]\n        )\n        await db.admins.insert_one(admin_data.dict())\n\n# Authentication Routes\n@admin_router.post(\"/login\")\nasync def admin_login(login_data: AdminLogin):\n    await init_default_admin()\n    \n    admin = await db.admins.find_one({\"email\": login_data.email})\n    if not admin or not verify_password(login_data.password, admin[\"password\"]):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid credentials\"\n        )\n    \n    token_version = admin.get(\"token_version\", 1)\n    token = create_access_token({\n        \"sub\": admin[\"id\"], \n        \"email\": admin[\"email\"],\n        \"token_version\": token_version\n    })\n    return {\n        \"access_token\": token,\n        \"token_type\": \"bearer\",\n        \"admin\": AdminResponse(**admin)\n    }\n\n@admin_router.get(\"/verify\")\nasync def verify_admin(current_admin: dict = Depends(get_current_admin)):\n    admin = await db.admins.find_one({\"id\": current_admin[\"id\"]})\n    if not admin:\n        raise HTTPException(status_code=404, detail=\"Admin not found\")\n    return AdminResponse(**admin)\n\n@admin_router.put(\"/change-password\")\nasync def change_password(password_data: ChangePasswordRequest, current_admin: dict = Depends(get_current_admin)):\n    # Get current admin from database\n    admin = await db.admins.find_one({\"id\": current_admin[\"id\"]})\n    if not admin:\n        raise HTTPException(status_code=404, detail=\"Admin not found\")\n    \n    # Verify current password\n    if not verify_password(password_data.current_password, admin[\"password\"]):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Current password is incorrect\"\n        )\n    \n    # Validate new password\n    if len(password_data.new_password) < 6:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"New password must be at least 6 characters long\"\n        )\n    \n    # Hash new password and increment token_version to invalidate existing tokens\n    new_hashed_password = hash_password(password_data.new_password)\n    current_token_version = admin.get(\"token_version\", 1)\n    new_token_version = current_token_version + 1\n    \n    await db.admins.update_one(\n        {\"id\": current_admin[\"id\"]}, \n        {\"$set\": {\n            \"password\": new_hashed_password,\n            \"token_version\": new_token_version\n        }}\n    )\n    \n    return {\"message\": \"Password changed successfully\"}\n\n# Profile Management\n@admin_router.get(\"/profile\")\nasync def get_admin_profile(current_admin: dict = Depends(get_current_admin)):\n    admin = await db.admins.find_one({\"id\": current_admin[\"id\"]})\n    if not admin:\n        raise HTTPException(status_code=404, detail=\"Admin not found\")\n    return {\"admin\": AdminResponse(**admin)}\n\n@admin_router.put(\"/profile\")\nasync def update_admin_profile(profile_data: AdminProfileUpdate, current_admin: dict = Depends(get_current_admin)):\n    # Get current admin from database\n    admin = await db.admins.find_one({\"id\": current_admin[\"id\"]})\n    if not admin:\n        raise HTTPException(status_code=404, detail=\"Admin not found\")\n    \n    # Update only provided fields\n    update_data = {k: v for k, v in profile_data.dict().items() if v is not None}\n    if not update_data:\n        raise HTTPException(status_code=400, detail=\"No data to update\")\n    \n    # Update admin profile\n    await db.admins.update_one(\n        {\"id\": current_admin[\"id\"]}, \n        {\"$set\": update_data}\n    )\n    \n    # Also update profiles collection for public API\n    profile_update_data = {}\n    if \"name\" in update_data:\n        profile_update_data[\"name\"] = update_data[\"name\"]\n    if \"email\" in update_data:\n        profile_update_data[\"email\"] = update_data[\"email\"]\n    if \"phone\" in update_data:\n        profile_update_data[\"phone\"] = update_data[\"phone\"]\n        profile_update_data[\"whatsapp\"] = update_data[\"phone\"]  # Also update whatsapp\n    if \"address\" in update_data:\n        profile_update_data[\"address\"] = update_data[\"address\"]\n    if \"bio\" in update_data:\n        profile_update_data[\"bio\"] = update_data[\"bio\"]\n    \n    if profile_update_data:\n        await db.profiles.update_one(\n            {\"admin_id\": current_admin[\"id\"]},\n            {\"$set\": profile_update_data},\n            upsert=True\n        )\n    \n    # Get updated admin data\n    updated_admin = await db.admins.find_one({\"id\": current_admin[\"id\"]})\n    return {\"admin\": AdminResponse(**updated_admin)}\n\n# Media Management Endpoints\n@admin_router.get(\"/media-settings\")\nasync def get_media_settings(current_admin: dict = Depends(get_current_admin)):\n    \"\"\"Get current media settings\"\"\"\n    try:\n        media_data = await db.media_settings.find_one({\"id\": \"main\"})\n        if not media_data:\n            # Return default empty settings\n            default_settings = {\n                \"id\": \"main\",\n                \"logo\": None,\n                \"favicon\": None,\n                \"hero_image\": None,\n                \"about_image\": None,\n                \"gallery\": []\n            }\n            await db.media_settings.insert_one(default_settings)\n            return default_settings\n        return media_data\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to fetch media settings: {str(e)}\"\n        )\n\n@admin_router.put(\"/media-settings\")\nasync def update_media_settings(\n    settings: dict,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Update media settings\"\"\"\n    try:\n        result = await db.media_settings.update_one(\n            {\"id\": \"main\"},\n            {\"$set\": settings},\n            upsert=True\n        )\n        return {\"message\": \"Media settings updated successfully\"}\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to update media settings: {str(e)}\"\n        )\n\n@admin_router.post(\"/upload-media\")\nasync def upload_media(\n    file: UploadFile = File(...),\n    type: str = None,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Upload media file (logo, images, etc.)\"\"\"\n    if not type or type not in ['logo', 'hero_image', 'about_image', 'favicon']:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid media type. Allowed: logo, hero_image, about_image, favicon\"\n        )\n    \n    # Validate file type\n    allowed_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/svg+xml', 'image/x-icon']\n    if file.content_type not in allowed_types:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid file type. Only image files are allowed.\"\n        )\n    \n    # Create uploads directory if it doesn't exist\n    upload_dir = Path(\"uploads\")\n    upload_dir.mkdir(exist_ok=True)\n    \n    # Generate unique filename\n    file_extension = Path(file.filename).suffix\n    unique_filename = f\"{type}_{uuid.uuid4()}{file_extension}\"\n    file_path = upload_dir / unique_filename\n    \n    try:\n        # Save file\n        with open(file_path, \"wb\") as buffer:\n            content = await file.read()\n            buffer.write(content)\n        \n        # Create URL (in production, this would be your domain)\n        file_url = f\"/uploads/{unique_filename}\"\n        \n        # Update media settings in database\n        media_collection = db.media_settings\n        await media_collection.update_one(\n            {\"id\": \"main\"},\n            {\"$set\": {type: file_url}},\n            upsert=True\n        )\n        \n        return {\"url\": file_url, \"message\": f\"{type} uploaded successfully\"}\n        \n    except Exception as e:\n        # Clean up file if database update fails\n        if file_path.exists():\n            file_path.unlink()\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to upload file: {str(e)}\"\n        )\n\n@admin_router.delete(\"/media/{media_type}\")\nasync def remove_media(\n    media_type: str,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Remove media file\"\"\"\n    if media_type not in ['logo', 'hero_image', 'about_image', 'favicon']:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid media type\"\n        )\n    \n    try:\n        media_collection = db.media_settings\n        result = await media_collection.update_one(\n            {\"id\": \"main\"},\n            {\"$unset\": {media_type: \"\"}}\n        )\n        \n        return {\"message\": f\"{media_type} removed successfully\"}\n        \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to remove media: {str(e)}\"\n        )\n\n# Site Settings Endpoints\n@admin_router.get(\"/site-settings\")\nasync def get_site_settings(current_admin: dict = Depends(get_current_admin)):\n    \"\"\"Get current site settings\"\"\"\n    try:\n        settings = await db.site_settings.find_one({\"id\": \"main\"})\n        if not settings:\n            # Create default settings\n            from models import SiteSettings\n            default_settings = SiteSettings().dict()\n            await db.site_settings.insert_one(default_settings)\n            return default_settings\n        return settings\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to fetch site settings: {str(e)}\"\n        )\n\n@admin_router.put(\"/site-settings\")\nasync def update_site_settings(\n    settings: dict,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Update site settings\"\"\"\n    try:\n        settings[\"updated_at\"] = datetime.utcnow().isoformat()\n        result = await db.site_settings.update_one(\n            {\"id\": \"main\"},\n            {\"$set\": settings},\n            upsert=True\n        )\n        return jsonable_encoder({\"message\": \"Site settings updated successfully\"})\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to update site settings: {str(e)}\"\n        )\n\n# Offers Management Endpoints\n@admin_router.get(\"/offers\")\nasync def get_offers(current_admin: dict = Depends(get_current_admin)):\n    \"\"\"Get all offers\"\"\"\n    try:\n        offers = await db.offers.find({}).to_list()\n        return jsonable_encoder(offers)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to fetch offers: {str(e)}\"\n        )\n\n@admin_router.post(\"/offers\")\nasync def create_offer(\n    offer_data: dict,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Create new offer\"\"\"\n    try:\n        from models import Offer\n        offer = Offer(**offer_data)\n        result = await db.offers.insert_one(offer.dict())\n        return {\"message\": \"Offer created successfully\", \"id\": offer.id}\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to create offer: {str(e)}\"\n        )\n\n@admin_router.get(\"/offers/{offer_id}\")\nasync def get_offer(\n    offer_id: str,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Get specific offer\"\"\"\n    try:\n        offer = await db.offers.find_one({\"id\": offer_id})\n        if not offer:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Offer not found\"\n            )\n        return offer\n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to fetch offer: {str(e)}\"\n        )\n\n@admin_router.put(\"/offers/{offer_id}\")\nasync def update_offer(\n    offer_id: str,\n    offer_data: dict,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Update offer\"\"\"\n    try:\n        # Check if offer exists first\n        existing_offer = await db.offers.find_one({\"id\": offer_id})\n        if not existing_offer:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Offer not found\"\n            )\n        \n        offer_data[\"updated_at\"] = datetime.utcnow().isoformat()\n        await db.offers.update_one(\n            {\"id\": offer_id},\n            {\"$set\": offer_data}\n        )\n        return jsonable_encoder({\"message\": \"Offer updated successfully\"})\n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to update offer: {str(e)}\"\n        )\n\n@admin_router.patch(\"/offers/{offer_id}/toggle\")\nasync def toggle_offer(\n    offer_id: str,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Toggle offer active status\"\"\"\n    try:\n        offer = await db.offers.find_one({\"id\": offer_id})\n        if not offer:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Offer not found\"\n            )\n        \n        new_status = not offer.get(\"active\", False)\n        result = await db.offers.update_one(\n            {\"id\": offer_id},\n            {\"$set\": {\"active\": new_status, \"updated_at\": datetime.utcnow().isoformat()}}\n        )\n        \n        # Get updated offer and return with proper serialization\n        updated_offer = await db.offers.find_one({\"id\": offer_id})\n        return jsonable_encoder({\n            \"message\": f\"Offer {'activated' if new_status else 'deactivated'} successfully\", \n            \"active\": new_status,\n            \"offer\": updated_offer\n        })\n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to toggle offer: {str(e)}\"\n        )\n\n@admin_router.delete(\"/offers/{offer_id}\")\nasync def delete_offer(\n    offer_id: str,\n    current_admin: dict = Depends(get_current_admin)\n):\n    \"\"\"Delete offer\"\"\"\n    try:\n        result = await db.offers.delete_one({\"id\": offer_id})\n        if result.deleted_count == 0:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Offer not found\"\n            )\n        return {\"message\": \"Offer deleted successfully\"}\n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to delete offer: {str(e)}\"\n        )\n\n# Services Management\n@admin_router.get(\"/services\", response_model=List[Service])\nasync def get_services(current_admin: dict = Depends(get_current_admin)):\n    services = await db.services.find().to_list(1000)\n    return [Service(**service) for service in services]\n\n@admin_router.post(\"/services\", response_model=Service)\nasync def create_service(service_data: ServiceCreate, current_admin: dict = Depends(get_current_admin)):\n    service = Service(**service_data.dict())\n    await db.services.insert_one(service.dict())\n    return service\n\n@admin_router.put(\"/services/{service_id}\", response_model=Service)\nasync def update_service(service_id: str, service_data: ServiceUpdate, current_admin: dict = Depends(get_current_admin)):\n    update_data = {k: v for k, v in service_data.dict().items() if v is not None}\n    if not update_data:\n        raise HTTPException(status_code=400, detail=\"No data to update\")\n    \n    result = await db.services.update_one({\"id\": service_id}, {\"$set\": update_data})\n    # MockDB doesn't have matched_count, skip this check\n    \n    updated_service = await db.services.find_one({\"id\": service_id})\n    return Service(**updated_service)\n\n@admin_router.delete(\"/services/{service_id}\")\nasync def delete_service(service_id: str, current_admin: dict = Depends(get_current_admin)):\n    result = await db.services.delete_one({\"id\": service_id})\n    if result.deleted_count == 0:\n        raise HTTPException(status_code=404, detail=\"Service not found\")\n    return {\"message\": \"Service deleted successfully\"}\n\n# Projects Management\n@admin_router.get(\"/projects\", response_model=List[Project])\nasync def get_projects(current_admin: dict = Depends(get_current_admin)):\n    projects = await db.projects.find().to_list(1000)\n    return [Project(**project) for project in projects]\n\n@admin_router.post(\"/projects\", response_model=Project)\nasync def create_project(project_data: ProjectCreate, current_admin: dict = Depends(get_current_admin)):\n    project = Project(**project_data.dict())\n    await db.projects.insert_one(project.dict())\n    return project\n\n@admin_router.put(\"/projects/{project_id}\", response_model=Project)\nasync def update_project(project_id: str, project_data: ProjectUpdate, current_admin: dict = Depends(get_current_admin)):\n    update_data = {k: v for k, v in project_data.dict().items() if v is not None}\n    if not update_data:\n        raise HTTPException(status_code=400, detail=\"No data to update\")\n    \n    result = await db.projects.update_one({\"id\": project_id}, {\"$set\": update_data})\n    # MockDB doesn't have matched_count, skip this check\n    \n    updated_project = await db.projects.find_one({\"id\": project_id})\n    return Project(**updated_project)\n\n@admin_router.delete(\"/projects/{project_id}\")\nasync def delete_project(project_id: str, current_admin: dict = Depends(get_current_admin)):\n    result = await db.projects.delete_one({\"id\": project_id})\n    if result.deleted_count == 0:\n        raise HTTPException(status_code=404, detail=\"Project not found\")\n    return {\"message\": \"Project deleted successfully\"}\n\n# Testimonials Management\n@admin_router.get(\"/testimonials\", response_model=List[Testimonial])\nasync def get_testimonials(current_admin: dict = Depends(get_current_admin)):\n    testimonials = await db.testimonials.find().to_list(1000)\n    return [Testimonial(**testimonial) for testimonial in testimonials]\n\n@admin_router.post(\"/testimonials\", response_model=Testimonial)\nasync def create_testimonial(testimonial_data: TestimonialCreate, current_admin: dict = Depends(get_current_admin)):\n    testimonial = Testimonial(**testimonial_data.dict())\n    await db.testimonials.insert_one(testimonial.dict())\n    return testimonial\n\n@admin_router.put(\"/testimonials/{testimonial_id}\", response_model=Testimonial)\nasync def update_testimonial(testimonial_id: str, testimonial_data: TestimonialUpdate, current_admin: dict = Depends(get_current_admin)):\n    update_data = {k: v for k, v in testimonial_data.dict().items() if v is not None}\n    if not update_data:\n        raise HTTPException(status_code=400, detail=\"No data to update\")\n    \n    result = await db.testimonials.update_one({\"id\": testimonial_id}, {\"$set\": update_data})\n    # MockDB doesn't have matched_count, skip this check\n    \n    updated_testimonial = await db.testimonials.find_one({\"id\": testimonial_id})\n    return Testimonial(**updated_testimonial)\n\n@admin_router.delete(\"/testimonials/{testimonial_id}\")\nasync def delete_testimonial(testimonial_id: str, current_admin: dict = Depends(get_current_admin)):\n    result = await db.testimonials.delete_one({\"id\": testimonial_id})\n    if result.deleted_count == 0:\n        raise HTTPException(status_code=404, detail=\"Testimonial not found\")\n    return {\"message\": \"Testimonial deleted successfully\"}\n\n# Blog Management\n@admin_router.get(\"/blogs\", response_model=List[BlogPost])\nasync def get_blogs(current_admin: dict = Depends(get_current_admin)):\n    blogs = await db.blogs.find().to_list(1000)\n    return [BlogPost(**blog) for blog in blogs]\n\n@admin_router.post(\"/blogs\", response_model=BlogPost)\nasync def create_blog(blog_data: BlogPostCreate, current_admin: dict = Depends(get_current_admin)):\n    blog = BlogPost(**blog_data.dict())\n    await db.blogs.insert_one(blog.dict())\n    return blog\n\n@admin_router.put(\"/blogs/{blog_id}\", response_model=BlogPost)\nasync def update_blog(blog_id: str, blog_data: BlogPostUpdate, current_admin: dict = Depends(get_current_admin)):\n    update_data = {k: v for k, v in blog_data.dict().items() if v is not None}\n    if not update_data:\n        raise HTTPException(status_code=400, detail=\"No data to update\")\n    \n    result = await db.blogs.update_one({\"id\": blog_id}, {\"$set\": update_data})\n    # MockDB doesn't have matched_count, skip this check\n    \n    updated_blog = await db.blogs.find_one({\"id\": blog_id})\n    return BlogPost(**updated_blog)\n\n@admin_router.delete(\"/blogs/{blog_id}\")\nasync def delete_blog(blog_id: str, current_admin: dict = Depends(get_current_admin)):\n    result = await db.blogs.delete_one({\"id\": blog_id})\n    if result.deleted_count == 0:\n        raise HTTPException(status_code=404, detail=\"Blog not found\")\n    return {\"message\": \"Blog deleted successfully\"}\n\n# Contact Management\n@admin_router.get(\"/contacts\", response_model=List[ContactInquiry])\nasync def get_contacts(current_admin: dict = Depends(get_current_admin)):\n    contacts = await db.contacts.find().sort(\"created_at\", -1).to_list(1000)\n    return [ContactInquiry(**contact) for contact in contacts]\n\n@admin_router.post(\"/contacts\", response_model=ContactInquiry)\nasync def create_contact(contact_data: ContactCreate):\n    contact = ContactInquiry(**contact_data.dict())\n    await db.contacts.insert_one(contact.dict())\n    return contact\n\n@admin_router.put(\"/contacts/{contact_id}/read\")\nasync def mark_contact_read(contact_id: str, current_admin: dict = Depends(get_current_admin)):\n    result = await db.contacts.update_one({\"id\": contact_id}, {\"$set\": {\"read\": True}})\n    # MockDB doesn't have matched_count, skip this check\n    return {\"message\": \"Contact marked as read\"}\n\n@admin_router.get(\"/notifications\")\nasync def get_notifications(current_admin: dict = Depends(get_current_admin)):\n    \"\"\"Get admin notifications\"\"\"\n    try:\n        # Get recent activities for notifications\n        recent_contacts = await db.contacts.find({}).sort([(\"created_at\", -1)]).limit(5).to_list()\n        recent_blogs = await db.blogs.find({\"published\": True}).sort([(\"created_at\", -1)]).limit(3).to_list()\n        \n        notifications = []\n        \n        # Add contact notifications\n        for contact in recent_contacts:\n            created_at = contact.get(\"created_at\", \"\")\n            if isinstance(created_at, str):\n                try:\n                    from datetime import datetime\n                    contact_time = datetime.fromisoformat(created_at.replace('Z', '+00:00'))\n                    time_diff = datetime.utcnow() - contact_time.replace(tzinfo=None)\n                    \n                    if time_diff.days == 0:\n                        if time_diff.seconds < 3600:\n                            time_str = f\"{time_diff.seconds // 60} min ago\"\n                        else:\n                            time_str = f\"{time_diff.seconds // 3600} hour ago\"\n                    else:\n                        time_str = f\"{time_diff.days} day ago\"\n                    \n                    notifications.append({\n                        \"id\": f\"contact_{contact.get('id', '')}\",\n                        \"title\": f\"New contact from {contact.get('name', 'Unknown')}\",\n                        \"time\": time_str,\n                        \"unread\": not contact.get(\"read\", False),\n                        \"type\": \"contact\"\n                    })\n                except:\n                    notifications.append({\n                        \"id\": f\"contact_{contact.get('id', '')}\",\n                        \"title\": f\"New contact from {contact.get('name', 'Unknown')}\",\n                        \"time\": \"Recently\",\n                        \"unread\": not contact.get(\"read\", False),\n                        \"type\": \"contact\"\n                    })\n        \n        # Add blog notifications\n        for blog in recent_blogs:\n            created_at = blog.get(\"created_at\", \"\")\n            if isinstance(created_at, str):\n                try:\n                    from datetime import datetime\n                    blog_time = datetime.fromisoformat(created_at.replace('Z', '+00:00'))\n                    time_diff = datetime.utcnow() - blog_time.replace(tzinfo=None)\n                    \n                    if time_diff.days == 0:\n                        if time_diff.seconds < 3600:\n                            time_str = f\"{time_diff.seconds // 60} min ago\"\n                        else:\n                            time_str = f\"{time_diff.seconds // 3600} hour ago\"\n                    else:\n                        time_str = f\"{time_diff.days} day ago\"\n                    \n                    notifications.append({\n                        \"id\": f\"blog_{blog.get('id', '')}\",\n                        \"title\": f\"Blog published: {blog.get('title', 'Unknown')[:30]}...\",\n                        \"time\": time_str,\n                        \"unread\": True,\n                        \"type\": \"blog\"\n                    })\n                except:\n                    notifications.append({\n                        \"id\": f\"blog_{blog.get('id', '')}\",\n                        \"title\": f\"Blog published: {blog.get('title', 'Unknown')[:30]}...\",\n                        \"time\": \"Recently\",\n                        \"unread\": True,\n                        \"type\": \"blog\"\n                    })\n        \n        # Add system notification\n        notifications.append({\n            \"id\": \"system_backup\",\n            \"title\": \"System backup completed successfully\",\n            \"time\": \"3 hours ago\",\n            \"unread\": False,\n            \"type\": \"system\"\n        })\n        \n        return jsonable_encoder(notifications)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to fetch notifications: {str(e)}\"\n        )\n\n@admin_router.delete(\"/contacts/{contact_id}\")\nasync def delete_contact(contact_id: str, current_admin: dict = Depends(get_current_admin)):\n    result = await db.contacts.delete_one({\"id\": contact_id})\n    if result.deleted_count == 0:\n        raise HTTPException(status_code=404, detail=\"Contact not found\")\n    return {\"message\": \"Contact deleted successfully\"}\n\n# Dashboard Stats\n@admin_router.get(\"/stats\", response_model=DashboardStats)\nasync def get_dashboard_stats(current_admin: dict = Depends(get_current_admin)):\n    total_projects = await db.projects.count_documents({})\n    total_services = await db.services.count_documents({\"active\": True})\n    total_testimonials = await db.testimonials.count_documents({\"approved\": True})\n    total_contacts = await db.contacts.count_documents({})\n    unread_contacts = await db.contacts.count_documents({\"read\": False})\n    published_blogs = await db.blogs.count_documents({\"published\": True})\n    total_blogs = await db.blogs.count_documents({})\n    \n    recent_contacts = await db.contacts.find().sort(\"created_at\", -1).limit(5).to_list(5)\n    recent_contacts_list = [ContactInquiry(**contact) for contact in recent_contacts]\n    \n    return DashboardStats(\n        total_projects=total_projects,\n        total_services=total_services,\n        total_testimonials=total_testimonials,\n        total_contacts=total_contacts,\n        unread_contacts=unread_contacts,\n        published_blogs=published_blogs,\n        total_blogs=total_blogs,\n        recent_contacts=recent_contacts_list\n    )","size_bytes":28654},"backend/auth.py":{"content":"import jwt\nimport bcrypt\nfrom datetime import datetime, timedelta\nfrom fastapi import HTTPException, Depends\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nimport os\n\n# JWT Configuration\nSECRET_KEY = os.environ.get('JWT_SECRET_KEY', 'mmb-admin-secret-key-2024')\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_HOURS = 24\n\nsecurity = HTTPBearer()\n\ndef hash_password(password: str) -> str:\n    \"\"\"Hash a password using bcrypt\"\"\"\n    salt = bcrypt.gensalt()\n    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)\n    return hashed.decode('utf-8')\n\ndef verify_password(password: str, hashed_password: str) -> bool:\n    \"\"\"Verify a password against its hash\"\"\"\n    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))\n\ndef create_access_token(data: dict) -> str:\n    \"\"\"Create a JWT access token\"\"\"\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(hours=ACCESS_TOKEN_EXPIRE_HOURS)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef verify_token(token: str) -> dict:\n    \"\"\"Verify and decode a JWT token\"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail=\"Token has expired\")\n    except jwt.PyJWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n\nasync def get_current_admin(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    \"\"\"Get current admin from JWT token with token version validation\"\"\"\n    import admin_routes  # Import here to avoid circular imports\n    \n    token = credentials.credentials\n    payload = verify_token(token)\n    admin_id = payload.get(\"sub\")\n    token_version = payload.get(\"token_version\")\n    \n    if admin_id is None:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n    \n    # Validate token version against current admin record\n    db = admin_routes.db\n    admin = await db.admins.find_one({\"id\": admin_id})\n    if not admin:\n        raise HTTPException(status_code=401, detail=\"Admin not found\")\n    \n    current_token_version = admin.get(\"token_version\", 1)\n    if token_version != current_token_version:\n        raise HTTPException(status_code=401, detail=\"Token has been invalidated\")\n    \n    return {\"id\": admin_id, \"email\": payload.get(\"email\")}\n\n# Default admin credentials - CHANGE THESE IMMEDIATELY AFTER DEPLOYMENT\nDEFAULT_ADMIN = {\n    \"email\": \"fiewin375@gmail.com\",\n    \"password\": \"MMB@2024!Secure\",  # This will be hashed\n    \"name\": \"Kuldeep Parjapati\"\n}","size_bytes":2663},"backend/models.py":{"content":"from pydantic import BaseModel, Field\nfrom typing import List, Optional\nfrom datetime import datetime\nimport uuid\n\n# Admin Models\nclass Admin(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    email: str\n    password: str\n    name: str\n    role: str = \"admin\"\n    token_version: int = 1\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass AdminLogin(BaseModel):\n    email: str\n    password: str\n\nclass ChangePasswordRequest(BaseModel):\n    current_password: str\n    new_password: str\n\nclass MediaSettings(BaseModel):\n    logo: Optional[str] = None\n    hero_image: Optional[str] = None\n    about_image: Optional[str] = None\n    favicon: Optional[str] = None\n\nclass AdminResponse(BaseModel):\n    id: str\n    email: str\n    name: str\n    role: str\n    phone: Optional[str] = None\n    address: Optional[str] = None\n    bio: Optional[str] = None\n    avatar: Optional[str] = None\n\nclass AdminProfileUpdate(BaseModel):\n    name: Optional[str] = None\n    email: Optional[str] = None\n    phone: Optional[str] = None\n    address: Optional[str] = None\n    bio: Optional[str] = None\n    avatar: Optional[str] = None\n\n# Service Models\nclass Service(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    title: str\n    description: str\n    price: str\n    duration: str\n    features: List[str]\n    icon: str\n    active: bool = True\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass ServiceCreate(BaseModel):\n    title: str\n    description: str\n    price: str\n    duration: str\n    features: List[str]\n    icon: str\n    active: bool = True\n\nclass ServiceUpdate(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n    price: Optional[str] = None\n    duration: Optional[str] = None\n    features: Optional[List[str]] = None\n    icon: Optional[str] = None\n    active: Optional[bool] = None\n\n# Project Models\nclass Project(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    title: str\n    description: str\n    image: str\n    category: str\n    tags: List[str]\n    technologies: List[str]\n    live_url: str\n    github_url: Optional[str] = None\n    featured: bool = False\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass ProjectCreate(BaseModel):\n    title: str\n    description: str\n    image: str\n    category: str\n    tags: List[str]\n    technologies: List[str]\n    live_url: str\n    github_url: Optional[str] = None\n    featured: bool = False\n\nclass ProjectUpdate(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n    image: Optional[str] = None\n    category: Optional[str] = None\n    tags: Optional[List[str]] = None\n    technologies: Optional[List[str]] = None\n    live_url: Optional[str] = None\n    github_url: Optional[str] = None\n    featured: Optional[bool] = None\n\n# Testimonial Models\nclass Testimonial(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    name: str\n    position: str\n    company: str\n    text: str\n    rating: int = Field(ge=1, le=5)\n    image: str\n    approved: bool = True\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass TestimonialCreate(BaseModel):\n    name: str\n    position: str\n    company: str\n    text: str\n    rating: int = Field(ge=1, le=5)\n    image: str\n    approved: bool = True\n\nclass TestimonialUpdate(BaseModel):\n    name: Optional[str] = None\n    position: Optional[str] = None\n    company: Optional[str] = None\n    text: Optional[str] = None\n    rating: Optional[int] = Field(None, ge=1, le=5)\n    image: Optional[str] = None\n    approved: Optional[bool] = None\n\n# Blog Models\nclass BlogPost(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    title: str\n    excerpt: str\n    content: str\n    image: str\n    category: str\n    tags: List[str]\n    author: str = \"MMB\"\n    publish_date: datetime = Field(default_factory=datetime.utcnow)\n    published: bool = False\n    read_time: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass BlogPostCreate(BaseModel):\n    title: str\n    excerpt: str\n    content: str\n    image: str\n    category: str\n    tags: List[str]\n    author: str = \"MMB\"\n    publish_date: Optional[datetime] = None\n    published: bool = False\n    read_time: str\n\nclass BlogPostUpdate(BaseModel):\n    title: Optional[str] = None\n    excerpt: Optional[str] = None\n    content: Optional[str] = None\n    image: Optional[str] = None\n    category: Optional[str] = None\n    tags: Optional[List[str]] = None\n    author: Optional[str] = None\n    publish_date: Optional[datetime] = None\n    published: Optional[bool] = None\n    read_time: Optional[str] = None\n\n# Contact Models\nclass ContactInquiry(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    name: str\n    email: str\n    phone: Optional[str] = None\n    project_type: str\n    budget: Optional[str] = None\n    message: str\n    timeline: Optional[str] = None\n    read: bool = False\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass ContactCreate(BaseModel):\n    name: str\n    email: str\n    phone: Optional[str] = None\n    project_type: str\n    budget: Optional[str] = None\n    message: str\n    timeline: Optional[str] = None\n\n# Dashboard Stats Model\nclass DashboardStats(BaseModel):\n    total_projects: int\n    total_services: int\n    total_testimonials: int\n    total_contacts: int\n    unread_contacts: int\n    published_blogs: int\n    total_blogs: int\n    recent_contacts: List[ContactInquiry]\n\n# Enhanced Media Settings Models\nclass MediaSettingsResponse(BaseModel):\n    id: str = \"main\"\n    logo: Optional[str] = None\n    favicon: Optional[str] = None\n    hero_image: Optional[str] = None\n    about_image: Optional[str] = None\n    gallery: List[str] = []\n\nclass MediaSettingsUpdate(BaseModel):\n    logo: Optional[str] = None\n    favicon: Optional[str] = None\n    hero_image: Optional[str] = None\n    about_image: Optional[str] = None\n    gallery: Optional[List[str]] = None\n\n# Offer System Models\nclass Offer(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    title: str\n    subtitle: Optional[str] = None\n    description: Optional[str] = None\n    cta_text: str = \"Get Offer\"\n    cta_url: Optional[str] = None\n    discount_percentage: Optional[int] = None\n    discount_amount: Optional[str] = None\n    active: bool = True\n    starts_at: Optional[datetime] = None\n    ends_at: Optional[datetime] = None\n    priority: int = 1\n    background_color: str = \"#ff6b6b\"\n    text_color: str = \"#ffffff\"\n    banner_image: Optional[str] = None\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: Optional[datetime] = None\n\nclass OfferCreate(BaseModel):\n    title: str\n    subtitle: Optional[str] = None\n    description: Optional[str] = None\n    cta_text: str = \"Get Offer\"\n    cta_url: Optional[str] = None\n    discount_percentage: Optional[int] = None\n    discount_amount: Optional[str] = None\n    active: bool = True\n    starts_at: Optional[datetime] = None\n    ends_at: Optional[datetime] = None\n    priority: int = 1\n    background_color: str = \"#ff6b6b\"\n    text_color: str = \"#ffffff\"\n    banner_image: Optional[str] = None\n\nclass OfferUpdate(BaseModel):\n    title: Optional[str] = None\n    subtitle: Optional[str] = None\n    description: Optional[str] = None\n    cta_text: Optional[str] = None\n    cta_url: Optional[str] = None\n    discount_percentage: Optional[int] = None\n    discount_amount: Optional[str] = None\n    active: Optional[bool] = None\n    starts_at: Optional[datetime] = None\n    ends_at: Optional[datetime] = None\n    priority: Optional[int] = None\n    background_color: Optional[str] = None\n    text_color: Optional[str] = None\n    banner_image: Optional[str] = None\n\n# Site Settings Models\nclass NavLink(BaseModel):\n    label: str\n    url: str\n    external: bool = False\n    order: int = 1\n\nclass SocialLink(BaseModel):\n    platform: str  # facebook, twitter, instagram, linkedin, github, etc.\n    url: str\n    icon: Optional[str] = None\n\nclass SiteSettings(BaseModel):\n    id: str = \"main\"\n    offers_enabled: bool = True\n    site_title: str = \"MMB Portfolio\"\n    site_description: str = \"Professional Portfolio Website\"\n    header_tagline: Optional[str] = None\n    primary_color: str = \"#3b82f6\"\n    secondary_color: str = \"#1e40af\"\n    accent_color: str = \"#ef4444\"\n    nav_links: List[NavLink] = []\n    social_links: List[SocialLink] = []\n    footer_text: str = \"© 2024 MMB Portfolio. All rights reserved.\"\n    contact_email: Optional[str] = None\n    contact_phone: Optional[str] = None\n    whatsapp_number: Optional[str] = None\n    google_analytics_id: Optional[str] = None\n    updated_at: Optional[datetime] = None\n\nclass SiteSettingsUpdate(BaseModel):\n    offers_enabled: Optional[bool] = None\n    site_title: Optional[str] = None\n    site_description: Optional[str] = None\n    header_tagline: Optional[str] = None\n    primary_color: Optional[str] = None\n    secondary_color: Optional[str] = None\n    accent_color: Optional[str] = None\n    nav_links: Optional[List[NavLink]] = None\n    social_links: Optional[List[SocialLink]] = None\n    footer_text: Optional[str] = None\n    contact_email: Optional[str] = None\n    contact_phone: Optional[str] = None\n    whatsapp_number: Optional[str] = None\n    google_analytics_id: Optional[str] = None","size_bytes":9368},"backend/profile_routes.py":{"content":"from fastapi import APIRouter, HTTPException, Depends\nfrom pydantic import BaseModel\nfrom typing import Optional\nfrom auth import get_current_admin\n# MongoDB import removed - using mock database\nimport os\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\n# Load environment variables\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# Database will be injected from server.py\ndb = None\n\nprofile_router = APIRouter(prefix=\"/api/admin\", tags=[\"profile\"])\n\nclass ProfileData(BaseModel):\n    name: str\n    email: str\n    phone: Optional[str] = None\n    whatsapp: Optional[str] = None\n    address: Optional[str] = None\n    bio: Optional[str] = None\n    linkedin: Optional[str] = None\n    github: Optional[str] = None\n    twitter: Optional[str] = None\n    instagram: Optional[str] = None\n    website: Optional[str] = None\n\nclass ProfileResponse(BaseModel):\n    id: str\n    name: str\n    email: str\n    phone: Optional[str] = None\n    whatsapp: Optional[str] = None\n    address: Optional[str] = None\n    bio: Optional[str] = None\n    linkedin: Optional[str] = None\n    github: Optional[str] = None\n    twitter: Optional[str] = None\n    instagram: Optional[str] = None\n    website: Optional[str] = None\n\n@profile_router.get(\"/profile\", response_model=ProfileResponse)\nasync def get_profile(current_admin: dict = Depends(get_current_admin)):\n    # Get profile from profiles collection or create default\n    profile = await db.profiles.find_one({\"admin_id\": current_admin[\"id\"]})\n    \n    if not profile:\n        # Create default profile\n        default_profile = {\n            \"admin_id\": current_admin[\"id\"],\n            \"name\": \"Kuldeep Parjapati\",\n            \"email\": \"hello@mmb.dev\",\n            \"phone\": \"+91 98765 43210\",\n            \"whatsapp\": \"+91 98765 43210\",\n            \"address\": \"India\",\n            \"bio\": \"Professional Web Developer & Designer creating modern, responsive websites and digital solutions that convert visitors into customers.\",\n            \"linkedin\": \"https://linkedin.com/in/mmb\",\n            \"github\": \"https://github.com/mmb\",\n            \"twitter\": \"https://twitter.com/mmb\",\n            \"instagram\": \"https://instagram.com/mmb\",\n            \"website\": \"https://mmb.dev\"\n        }\n        result = await db.profiles.insert_one(default_profile)\n        profile = await db.profiles.find_one({\"_id\": result.inserted_id})\n    \n    return ProfileResponse(\n        id=str(profile[\"_id\"]),\n        name=profile[\"name\"],\n        email=profile[\"email\"],\n        phone=profile.get(\"phone\"),\n        whatsapp=profile.get(\"whatsapp\"),\n        address=profile.get(\"address\"),\n        bio=profile.get(\"bio\"),\n        linkedin=profile.get(\"linkedin\"),\n        github=profile.get(\"github\"),\n        twitter=profile.get(\"twitter\"),\n        instagram=profile.get(\"instagram\"),\n        website=profile.get(\"website\")\n    )\n\n@profile_router.put(\"/profile\", response_model=ProfileResponse)\nasync def update_profile(profile_data: ProfileData, current_admin: dict = Depends(get_current_admin)):\n    update_data = profile_data.dict()\n    \n    # Update profile in database\n    result = await db.profiles.update_one(\n        {\"admin_id\": current_admin[\"id\"]},\n        {\"$set\": update_data},\n        upsert=True\n    )\n    \n    # Get updated profile\n    profile = await db.profiles.find_one({\"admin_id\": current_admin[\"id\"]})\n    \n    return ProfileResponse(\n        id=str(profile[\"_id\"]),\n        name=profile[\"name\"],\n        email=profile[\"email\"],\n        phone=profile.get(\"phone\"),\n        whatsapp=profile.get(\"whatsapp\"),\n        address=profile.get(\"address\"),\n        bio=profile.get(\"bio\"),\n        linkedin=profile.get(\"linkedin\"),\n        github=profile.get(\"github\"),\n        twitter=profile.get(\"twitter\"),\n        instagram=profile.get(\"instagram\"),\n        website=profile.get(\"website\")\n    )","size_bytes":3835},"backend/public_routes.py":{"content":"from fastapi import APIRouter, HTTPException\nfrom typing import List\nfrom models import *\nfrom datetime import datetime\n# MongoDB import removed - using mock database\nimport os\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\n# Load environment variables\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# Database will be injected from server.py\ndb = None\n\npublic_router = APIRouter(prefix=\"/api\", tags=[\"public\"])\n\n# Public Routes for Frontend\n@public_router.get(\"/services\", response_model=List[Service])\nasync def get_public_services():\n    services = await db.services.find({\"active\": True}).to_list()\n    return [Service(**service) for service in services]\n\n@public_router.get(\"/projects\", response_model=List[Project])\nasync def get_public_projects():\n    projects = await db.projects.find().to_list()\n    return [Project(**project) for project in projects]\n\n@public_router.get(\"/testimonials\", response_model=List[Testimonial])\nasync def get_public_testimonials():\n    testimonials = await db.testimonials.find({\"approved\": True}).to_list()\n    return [Testimonial(**testimonial) for testimonial in testimonials]\n\n@public_router.get(\"/blogs\", response_model=List[BlogPost])\nasync def get_public_blogs():\n    blogs = await db.blogs.find({\"published\": True}).to_list()\n    return [BlogPost(**blog) for blog in blogs]\n\n@public_router.get(\"/blogs/{blog_id}\", response_model=BlogPost)\nasync def get_blog_by_id(blog_id: str):\n    blog = await db.blogs.find_one({\"id\": blog_id, \"published\": True})\n    if not blog:\n        raise HTTPException(status_code=404, detail=\"Blog not found\")\n    return BlogPost(**blog)\n\n@public_router.get(\"/contacts\", response_model=List[ContactInquiry])\nasync def get_contacts():\n    contacts = await db.contacts.find().to_list()\n    return [ContactInquiry(**contact) for contact in contacts]\n\n@public_router.post(\"/contact\", response_model=ContactInquiry)\nasync def submit_contact(contact_data: ContactCreate):\n    contact = ContactInquiry(**contact_data.dict())\n    await db.contacts.insert_one(contact.dict())\n    return contact\n\n# Public Profile/Contact Info API\n@public_router.get(\"/profile\")\nasync def get_public_profile():\n    # Get the most recent admin's profile (latest created/updated)\n    admins = await db.admins.find({}).to_list()\n    if not admins:\n        admin = None\n    else:\n        # Sort by created_at descending to get the latest\n        admins.sort(key=lambda x: x.get('created_at', ''), reverse=True)\n        admin = admins[0]\n    if not admin:\n        return {\n            \"name\": \"Kuldeep Parjapati\",\n            \"email\": \"hello@mmb.dev\",\n            \"phone\": \"+91 98765 43210\",\n            \"whatsapp\": \"+91 98765 43210\",\n            \"address\": \"India\",\n            \"bio\": \"Professional Web Developer & Designer creating modern, responsive websites and digital solutions that convert visitors into customers.\",\n            \"linkedin\": \"https://linkedin.com/in/mmb\",\n            \"github\": \"https://github.com/mmb\",\n            \"twitter\": \"https://twitter.com/mmb\",\n            \"instagram\": \"https://instagram.com/mmb\",\n            \"website\": \"https://mmb.dev\"\n        }\n    \n    profile = await db.profiles.find_one({\"admin_id\": admin[\"id\"]})\n    if not profile:\n        return {\n            \"name\": \"Kuldeep Parjapati\",\n            \"email\": \"hello@mmb.dev\",\n            \"phone\": \"+91 98765 43210\",\n            \"whatsapp\": \"+91 98765 43210\",\n            \"address\": \"India\",\n            \"bio\": \"Professional Web Developer & Designer creating modern, responsive websites and digital solutions that convert visitors into customers.\",\n            \"linkedin\": \"https://linkedin.com/in/mmb\",\n            \"github\": \"https://github.com/mmb\",\n            \"twitter\": \"https://twitter.com/mmb\",\n            \"instagram\": \"https://instagram.com/mmb\",\n            \"website\": \"https://mmb.dev\"\n        }\n    \n    return {\n        \"name\": profile.get(\"name\", \"Kuldeep Parjapati\"),\n        \"email\": profile.get(\"email\", \"hello@mmb.dev\"),\n        \"phone\": profile.get(\"phone\", \"+91 98765 43210\"),\n        \"whatsapp\": profile.get(\"whatsapp\", \"+91 98765 43210\"),\n        \"address\": profile.get(\"address\", \"India\"),\n        \"bio\": profile.get(\"bio\", \"Professional Web Developer & Designer\"),\n        \"linkedin\": profile.get(\"linkedin\", \"https://linkedin.com/in/mmb\"),\n        \"github\": profile.get(\"github\", \"https://github.com/mmb\"),\n        \"twitter\": profile.get(\"twitter\", \"https://twitter.com/mmb\"),\n        \"instagram\": profile.get(\"instagram\", \"https://instagram.com/mmb\"),\n        \"website\": profile.get(\"website\", \"https://mmb.dev\")\n    }\n\n# Public Media API\n@public_router.get(\"/media\")\nasync def get_media_settings():\n    \"\"\"Get public media settings\"\"\"\n    try:\n        media_collection = db.media_settings\n        media_data = await media_collection.find_one({\"id\": \"main\"})\n        \n        if not media_data:\n            # Return default empty media settings\n            return {\n                \"logo\": \"\",\n                \"hero_image\": \"\", \n                \"about_image\": \"\",\n                \"favicon\": \"\"\n            }\n        \n        # Remove MongoDB _id field\n        media_data.pop('_id', None)\n        media_data.pop('id', None)\n        \n        return media_data\n        \n    except Exception as e:\n        return {\n            \"logo\": \"\",\n            \"hero_image\": \"\",\n            \"about_image\": \"\", \n            \"favicon\": \"\"\n        }\n\n# Enhanced Public Endpoints for New Features\n\n@public_router.get(\"/media-settings\")\nasync def get_public_media_settings():\n    \"\"\"Get public media settings with gallery\"\"\"\n    try:\n        media_data = await db.media_settings.find_one({\"id\": \"main\"})\n        if not media_data:\n            return {\n                \"id\": \"main\",\n                \"logo\": None,\n                \"favicon\": None,\n                \"hero_image\": None,\n                \"about_image\": None,\n                \"gallery\": []\n            }\n        return media_data\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Failed to fetch media settings: {str(e)}\"\n        )\n\n@public_router.get(\"/site-settings\")\nasync def get_public_site_settings():\n    \"\"\"Get public site settings\"\"\"\n    try:\n        settings = await db.site_settings.find_one({\"id\": \"main\"})\n        if not settings:\n            # Return default settings\n            return {\n                \"id\": \"main\",\n                \"offers_enabled\": True,\n                \"site_title\": \"MMB Portfolio\",\n                \"site_description\": \"Professional Portfolio Website\",\n                \"header_tagline\": None,\n                \"primary_color\": \"#3b82f6\",\n                \"secondary_color\": \"#1e40af\",\n                \"accent_color\": \"#ef4444\",\n                \"nav_links\": [],\n                \"social_links\": [],\n                \"footer_text\": \"© 2024 MMB Portfolio. All rights reserved.\",\n                \"contact_email\": None,\n                \"contact_phone\": None,\n                \"whatsapp_number\": None\n            }\n        \n        # Properly filter sensitive fields for public consumption\n        sensitive_fields = ['google_analytics_id', 'updated_at', '_id']\n        public_settings = {k: v for k, v in settings.items() if k not in sensitive_fields}\n        return public_settings\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Failed to fetch site settings: {str(e)}\"\n        )\n\n@public_router.get(\"/offers/active\")\nasync def get_active_offers():\n    \"\"\"Get currently active offers\"\"\"\n    try:\n        # Get current time\n        now = datetime.utcnow()\n        \n        # Get all active offers (MockDB compatible)\n        all_offers = await db.offers.find({\"active\": True}).to_list()\n        \n        # Filter by time range in Python (MockDB compatible)\n        active_offers = []\n        for offer in all_offers:\n            # Parse datetime strings if they exist\n            starts_at = None\n            ends_at = None\n            \n            if offer.get('starts_at'):\n                if isinstance(offer['starts_at'], str):\n                    try:\n                        starts_at = datetime.fromisoformat(offer['starts_at'].replace('Z', '+00:00'))\n                    except:\n                        starts_at = None\n                else:\n                    starts_at = offer['starts_at']\n            \n            if offer.get('ends_at'):\n                if isinstance(offer['ends_at'], str):\n                    try:\n                        ends_at = datetime.fromisoformat(offer['ends_at'].replace('Z', '+00:00'))\n                    except:\n                        ends_at = None\n                else:\n                    ends_at = offer['ends_at']\n            \n            # Check if offer is within time range\n            is_active = True\n            if starts_at and now < starts_at:\n                is_active = False\n            if ends_at and now > ends_at:\n                is_active = False\n                \n            if is_active:\n                active_offers.append(offer)\n        \n        # Sort by priority (higher priority first)\n        active_offers.sort(key=lambda x: x.get('priority', 1), reverse=True)\n        \n        return active_offers\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Failed to fetch active offers: {str(e)}\"\n        )\n\n@public_router.get(\"/offers\")\nasync def get_public_offers():\n    \"\"\"Get all public offers (for display purposes)\"\"\"\n    try:\n        offers = await db.offers.find({\"active\": True}).to_list()\n        # Sort by priority (higher priority first)\n        offers.sort(key=lambda x: x.get('priority', 1), reverse=True)\n        return offers\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Failed to fetch offers: {str(e)}\"\n        )","size_bytes":9885},"backend/seed_data.py":{"content":"import asyncio\nimport os\nimport json\nfrom dotenv import load_dotenv\nfrom pathlib import Path\nfrom models import *\nfrom auth import hash_password\nfrom datetime import datetime\n\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# Mock database using JSON files\nclass MockDB:\n    def __init__(self):\n        self.data_dir = ROOT_DIR / 'mock_data'\n        self.data_dir.mkdir(exist_ok=True)\n        \n    def get_collection(self, name):\n        return MockCollection(self.data_dir / f'{name}.json')\n\nclass MockCollection:\n    def __init__(self, file_path):\n        self.file_path = file_path\n        \n    async def delete_many(self, filter_dict):\n        return None\n        \n    async def insert_one(self, document):\n        data = []\n        if self.file_path.exists():\n            with open(self.file_path, 'r', encoding='utf-8') as f:\n                try:\n                    data = json.load(f)\n                except:\n                    data = []\n        \n        # Convert datetime objects to strings\n        doc_dict = document.model_dump() if hasattr(document, 'model_dump') else document\n        for key, value in doc_dict.items():\n            if isinstance(value, datetime):\n                doc_dict[key] = value.isoformat()\n                \n        data.append(doc_dict)\n        \n        with open(self.file_path, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=2, ensure_ascii=False)\n            \n        return None\n\ndb = MockDB()\n\nasync def seed_database():\n    print(\"Starting database seeding...\")\n    \n    # Clear existing data (mock implementation)\n    admins_collection = db.get_collection('admins')\n    services_collection = db.get_collection('services')\n    projects_collection = db.get_collection('projects')\n    testimonials_collection = db.get_collection('testimonials')\n    \n    await admins_collection.delete_many({})\n    await services_collection.delete_many({})\n    await projects_collection.delete_many({})\n    await testimonials_collection.delete_many({})\n    \n    blogs_collection = db.get_collection('blogs')\n    contacts_collection = db.get_collection('contacts')\n    await blogs_collection.delete_many({})\n    await contacts_collection.delete_many({})\n    \n    # Seed Admin - CHANGE THESE CREDENTIALS IMMEDIATELY AFTER DEPLOYMENT\n    admin_data = Admin(\n        email=\"kuldeep@mmb.dev\",\n        password=hash_password(\"MMB@2024!Secure\"),\n        name=\"Kuldeep Parjapati\"\n    )\n    await admins_collection.insert_one(admin_data)\n    print(\"✅ Admin user created\")\n    \n    # Seed Services\n    services_data = [\n        Service(\n            title=\"Website Development\",\n            description=\"Custom responsive websites built with modern technologies like React, Next.js, and Node.js\",\n            price=\"Starting from ₹15,000\",\n            duration=\"7-14 days\",\n            features=[\"Responsive Design\", \"Fast Loading\", \"SEO Optimized\", \"Admin Panel\"],\n            icon=\"Globe\",\n            active=True\n        ),\n        Service(\n            title=\"Landing Page Design\",\n            description=\"High-conversion landing pages that turn visitors into customers with compelling design and copy\",\n            price=\"Starting from ₹8,000\",\n            duration=\"3-5 days\",\n            features=[\"Conversion Focused\", \"Mobile First\", \"A/B Testing\", \"Analytics Setup\"],\n            icon=\"Layout\",\n            active=True\n        ),\n        Service(\n            title=\"UX/UI Design\",\n            description=\"User-centered design approach with wireframes, prototypes, and beautiful interfaces\",\n            price=\"Starting from ₹12,000\",\n            duration=\"5-10 days\",\n            features=[\"User Research\", \"Wireframes\", \"Prototypes\", \"Design System\"],\n            icon=\"Palette\",\n            active=True\n        ),\n        Service(\n            title=\"WordPress Development\",\n            description=\"Custom WordPress themes and plugins with easy-to-use admin panels\",\n            price=\"Starting from ₹10,000\",\n            duration=\"5-7 days\",\n            features=[\"Custom Themes\", \"Plugin Development\", \"WooCommerce\", \"SEO Ready\"],\n            icon=\"Code\",\n            active=True\n        ),\n        Service(\n            title=\"Content Writing\",\n            description=\"SEO-optimized content that engages your audience and improves search rankings\",\n            price=\"Starting from ₹500/page\",\n            duration=\"1-3 days\",\n            features=[\"SEO Optimized\", \"Engaging Copy\", \"Research Based\", \"Plagiarism Free\"],\n            icon=\"PenTool\",\n            active=True\n        ),\n        Service(\n            title=\"Digital Marketing\",\n            description=\"Complete digital marketing solutions including social media and SEO strategies\",\n            price=\"Starting from ₹5,000/month\",\n            duration=\"Ongoing\",\n            features=[\"Social Media\", \"SEO Strategy\", \"Content Calendar\", \"Analytics\"],\n            icon=\"TrendingUp\",\n            active=True\n        )\n    ]\n    \n    for service in services_data:\n        await services_collection.insert_one(service)\n    print(\"✅ Services created\")\n    \n    # Seed Projects\n    projects_data = [\n        Project(\n            title=\"Skillpay - Payment Solutions\",\n            description=\"Modern payment gateway website with secure transactions and user-friendly interface\",\n            image=\"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=600&h=400&fit=crop\",\n            category=\"Website Development\",\n            tags=[\"React\", \"Payment Gateway\", \"Security\"],\n            technologies=[\"React\", \"Node.js\", \"Stripe\", \"MongoDB\"],\n            live_url=\"https://skillpay.shop\",\n            github_url=\"https://github.com/mmb/skillpay\",\n            featured=True\n        ),\n        Project(\n            title=\"Durga Chemical Solutions\",\n            description=\"Corporate website for chemical solutions company with product catalog and inquiry system\",\n            image=\"https://images.unsplash.com/photo-1532094349884-543bc11b234d?w=600&h=400&fit=crop\",\n            category=\"Corporate Website\",\n            tags=[\"WordPress\", \"Corporate\", \"Catalog\"],\n            technologies=[\"WordPress\", \"PHP\", \"MySQL\"],\n            live_url=\"https://durgachemsol.com\",\n            featured=True\n        ),\n        Project(\n            title=\"Hisar Job Place\",\n            description=\"Job portal connecting employers with job seekers in Hisar region\",\n            image=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=600&h=400&fit=crop\",\n            category=\"Web Application\",\n            tags=[\"Job Portal\", \"React\", \"Database\"],\n            technologies=[\"React\", \"Node.js\", \"MongoDB\", \"JWT\"],\n            live_url=\"https://hisarjobplace.in\",\n            featured=True\n        ),\n        Project(\n            title=\"NeoGenie Shop\",\n            description=\"E-commerce platform with modern design and seamless shopping experience\",\n            image=\"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=600&h=400&fit=crop\",\n            category=\"E-commerce\",\n            tags=[\"E-commerce\", \"Shopping\", \"Payment\"],\n            technologies=[\"React\", \"Node.js\", \"Stripe\", \"MongoDB\"],\n            live_url=\"https://neogenie.shop\",\n            featured=True\n        ),\n        Project(\n            title=\"Pensiya Krishi Farm\",\n            description=\"Agricultural website showcasing farm products and organic farming practices\",\n            image=\"https://images.unsplash.com/photo-1625246333195-78d9c38ad449?w=600&h=400&fit=crop\",\n            category=\"Agriculture\",\n            tags=[\"Agriculture\", \"Organic\", \"Products\"],\n            technologies=[\"WordPress\", \"WooCommerce\", \"PHP\"],\n            live_url=\"https://pensiyakrishifarm.com\",\n            featured=False\n        ),\n        Project(\n            title=\"Krishi Ledger App\",\n            description=\"Farm management application for tracking crops, expenses, and profits\",\n            image=\"https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=600&h=400&fit=crop\",\n            category=\"Web Application\",\n            tags=[\"Agriculture\", \"Management\", \"Dashboard\"],\n            technologies=[\"React\", \"Node.js\", \"Charts.js\", \"MongoDB\"],\n            live_url=\"https://krishi-ledger-c4ab0f15.base44.app\",\n            featured=False\n        ),\n        Project(\n            title=\"Tech Haryana\",\n            description=\"Technology news and updates platform for Haryana region\",\n            image=\"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=600&h=400&fit=crop\",\n            category=\"News Portal\",\n            tags=[\"Technology\", \"News\", \"Regional\"],\n            technologies=[\"WordPress\", \"PHP\", \"MySQL\", \"Bootstrap\"],\n            live_url=\"https://techharyana.in\",\n            featured=False\n        ),\n        Project(\n            title=\"Pensiya Krishi Farm Shop\",\n            description=\"Online shop for organic farm products with delivery system\",\n            image=\"https://images.unsplash.com/photo-1625246333195-78d9c38ad449?w=600&h=400&fit=crop\",\n            category=\"E-commerce\",\n            tags=[\"Agriculture\", \"E-commerce\", \"Organic\"],\n            technologies=[\"WooCommerce\", \"WordPress\", \"Payment Gateway\"],\n            live_url=\"https://pensiyakrishifarm.shop\",\n            featured=True\n        ),\n        Project(\n            title=\"DigiSell Platform\",\n            description=\"Digital marketplace for buying and selling digital products and services\",\n            image=\"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=600&h=400&fit=crop\",\n            category=\"Digital Marketplace\",\n            tags=[\"Marketplace\", \"Digital Products\", \"E-commerce\"],\n            technologies=[\"React\", \"Node.js\", \"Payment Gateway\", \"MongoDB\"],\n            live_url=\"https://digi-sell-727f2f0c.base44.app\",\n            featured=True\n        )\n    ]\n    \n    for project in projects_data:\n        await projects_collection.insert_one(project)\n    print(\"✅ Projects created\")\n    \n    # Seed Testimonials\n    testimonials_data = [\n        Testimonial(\n            name=\"Rajesh Kumar\",\n            position=\"CEO\",\n            company=\"Durga Chemical Solutions\",\n            text=\"MMB delivered an exceptional website that perfectly represents our brand. Professional service and excellent communication throughout the project.\",\n            rating=5,\n            image=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face\",\n            approved=True\n        ),\n        Testimonial(\n            name=\"Priya Sharma\",\n            position=\"Founder\",\n            company=\"NeoGenie Shop\",\n            text=\"The e-commerce platform MMB built for us increased our sales by 40%. Amazing work and great attention to detail!\",\n            rating=5,\n            image=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face\",\n            approved=True\n        ),\n        Testimonial(\n            name=\"Amit Singh\",\n            position=\"Owner\",\n            company=\"Pensiya Krishi Farm\",\n            text=\"Professional, timely delivery, and excellent support. MMB understood our agricultural business needs perfectly.\",\n            rating=5,\n            image=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face\",\n            approved=True\n        )\n    ]\n    \n    for testimonial in testimonials_data:\n        await testimonials_collection.insert_one(testimonial)\n    print(\"✅ Testimonials created\")\n    \n    # Seed Blog Posts\n    blogs_data = [\n        BlogPost(\n            title=\"Complete Guide to React Hooks in 2024\",\n            excerpt=\"Master React Hooks with practical examples and learn how to build modern, efficient React applications using useState, useEffect, and custom hooks.\",\n            content=\"<h2>Introduction to React Hooks</h2><p>React Hooks revolutionized how we write React components...</p>\",\n            image=\"https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=600&h=400&fit=crop\",\n            category=\"React\",\n            tags=[\"React\", \"Hooks\", \"JavaScript\", \"Frontend\"],\n            author=\"MMB\",\n            read_time=\"12 min read\",\n            published=True\n        ),\n        BlogPost(\n            title=\"Building Responsive Websites with Tailwind CSS\",\n            excerpt=\"Learn advanced Tailwind CSS techniques for creating beautiful, responsive designs that work perfectly across all devices and screen sizes.\",\n            content=\"<h2>Getting Started with Tailwind CSS</h2><p>Tailwind CSS is a utility-first CSS framework...</p>\",\n            image=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=600&h=400&fit=crop\",\n            category=\"CSS\",\n            tags=[\"Tailwind CSS\", \"Responsive Design\", \"CSS\", \"Web Design\"],\n            author=\"MMB\",\n            read_time=\"8 min read\",\n            published=True\n        ),\n        BlogPost(\n            title=\"Node.js Best Practices for Production Applications\",\n            excerpt=\"Essential Node.js best practices, security considerations, and performance optimizations for building scalable backend applications in production.\",\n            content=\"<h2>Node.js Production Best Practices</h2><p>Building production-ready Node.js applications requires...</p>\",\n            image=\"https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=600&h=400&fit=crop\",\n            category=\"Node.js\",\n            tags=[\"Node.js\", \"Backend\", \"JavaScript\", \"Best Practices\"],\n            author=\"MMB\",\n            read_time=\"15 min read\",\n            published=False\n        )\n    ]\n    \n    for blog in blogs_data:\n        await blogs_collection.insert_one(blog)\n    print(\"✅ Blog posts created\")\n    \n    # Seed Sample Contacts\n    contacts_data = [\n        ContactInquiry(\n            name=\"John Doe\",\n            email=\"john@example.com\",\n            phone=\"+91 98765 43210\",\n            project_type=\"Website Development\",\n            budget=\"₹25,000 - ₹50,000\",\n            message=\"I need a modern website for my business. Please contact me to discuss the requirements.\",\n            timeline=\"1-2 Months\",\n            read=False\n        ),\n        ContactInquiry(\n            name=\"Sarah Wilson\",\n            email=\"sarah@company.com\",\n            phone=\"+91 87654 32109\",\n            project_type=\"E-commerce Store\",\n            budget=\"₹50,000 - ₹1,00,000\",\n            message=\"Looking for an e-commerce solution with payment gateway integration.\",\n            timeline=\"3-4 Weeks\",\n            read=True\n        )\n    ]\n    \n    for contact in contacts_data:\n        await contacts_collection.insert_one(contact)\n    print(\"✅ Contact inquiries created\")\n    \n    print(\"🎉 Database seeding completed successfully!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(seed_database())","size_bytes":14801},"backend/server.py":{"content":"from fastapi import FastAPI, APIRouter\nfrom fastapi.staticfiles import StaticFiles\nfrom dotenv import load_dotenv\nfrom starlette.middleware.cors import CORSMiddleware\nimport os\nimport logging\nimport json\nfrom pathlib import Path\nfrom admin_routes import admin_router\nfrom public_routes import public_router\nfrom profile_routes import profile_router\nfrom datetime import datetime\n\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# Create uploads directory if it doesn't exist\nuploads_dir = ROOT_DIR / \"uploads\"\nuploads_dir.mkdir(exist_ok=True)\n\n# Mock database using JSON files\nclass MockResult:\n    def __init__(self, modified_count=0, deleted_count=0, inserted_id=None):\n        self.modified_count = modified_count\n        self.deleted_count = deleted_count\n        self.inserted_id = inserted_id\n\nclass MockDB:\n    def __init__(self):\n        self.data_dir = ROOT_DIR / 'mock_data'\n        self.data_dir.mkdir(exist_ok=True)\n        \n    def get_collection(self, name):\n        return MockCollection(self.data_dir / f'{name}.json')\n\nclass MockCursor:\n    def __init__(self, file_path, filter_dict=None, limit_count=None, sort_field=None, sort_order=1):\n        self.file_path = file_path\n        self.filter_dict = filter_dict\n        self.limit_count = limit_count\n        self.sort_field = sort_field\n        self.sort_order = sort_order\n        \n    def sort(self, field, order=1):\n        return MockCursor(self.file_path, self.filter_dict, self.limit_count, field, order)\n        \n    def limit(self, count):\n        return MockCursor(self.file_path, self.filter_dict, count, self.sort_field, self.sort_order)\n        \n    async def to_list(self, limit=None):\n        if not self.file_path.exists():\n            return []\n        \n        with open(self.file_path, 'r', encoding='utf-8') as f:\n            try:\n                data = json.load(f)\n            except:\n                return []\n        \n        # Apply filter if provided\n        if self.filter_dict:\n            filtered_data = []\n            for item in data:\n                match = True\n                for key, value in self.filter_dict.items():\n                    if key not in item or item[key] != value:\n                        match = False\n                        break\n                if match:\n                    filtered_data.append(item)\n            data = filtered_data\n        \n        # Apply sort\n        if self.sort_field:\n            try:\n                data.sort(key=lambda x: x.get(self.sort_field, ''), reverse=(self.sort_order == -1))\n            except:\n                pass\n        \n        # Apply limit\n        if self.limit_count:\n            data = data[:self.limit_count]\n        if limit:\n            data = data[:limit]\n        return data\n\nclass MockCollection:\n    def __init__(self, file_path):\n        self.file_path = file_path\n        \n    def find(self, filter_dict=None):\n        return MockCursor(self.file_path, filter_dict)\n        \n    async def find_async(self, filter_dict=None, limit=None):\n        if not self.file_path.exists():\n            return []\n        \n        with open(self.file_path, 'r', encoding='utf-8') as f:\n            try:\n                data = json.load(f)\n            except:\n                return []\n        \n        if limit:\n            data = data[:limit]\n        return data\n        \n    async def find_one(self, filter_dict):\n        if not self.file_path.exists():\n            return None\n            \n        with open(self.file_path, 'r', encoding='utf-8') as f:\n            try:\n                data = json.load(f)\n            except:\n                return None\n        \n        # Simple filter matching\n        for item in data:\n            match = True\n            for key, value in filter_dict.items():\n                if key not in item or item[key] != value:\n                    match = False\n                    break\n            if match:\n                return item\n        return None\n        \n    async def insert_one(self, document):\n        data = []\n        if self.file_path.exists():\n            with open(self.file_path, 'r', encoding='utf-8') as f:\n                try:\n                    data = json.load(f)\n                except:\n                    data = []\n        \n        # Convert datetime objects to strings\n        doc_dict = document.model_dump() if hasattr(document, 'model_dump') else document\n        for key, value in doc_dict.items():\n            if isinstance(value, datetime):\n                doc_dict[key] = value.isoformat()\n                \n        data.append(doc_dict)\n        \n        with open(self.file_path, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=2, ensure_ascii=False)\n            \n        return None\n        \n    async def update_one(self, filter_dict, update_dict, upsert=False):\n        data = []\n        if self.file_path.exists():\n            with open(self.file_path, 'r', encoding='utf-8') as f:\n                try:\n                    data = json.load(f)\n                except:\n                    data = []\n        \n        # Find and update item\n        modified_count = 0\n        found = False\n        for i, item in enumerate(data):\n            match = True\n            for key, value in filter_dict.items():\n                if key not in item or item[key] != value:\n                    match = False\n                    break\n            if match:\n                if '$set' in update_dict:\n                    data[i].update(update_dict['$set'])\n                modified_count = 1\n                found = True\n                break\n        \n        # If not found and upsert is True, create new document\n        if not found and upsert:\n            new_doc = filter_dict.copy()\n            if '$set' in update_dict:\n                new_doc.update(update_dict['$set'])\n            # Add a unique ID for the new document\n            import uuid\n            new_doc['_id'] = str(uuid.uuid4())\n            data.append(new_doc)\n            modified_count = 1\n        \n        with open(self.file_path, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=2, ensure_ascii=False)\n            \n        return MockResult(modified_count=modified_count)\n        \n    async def delete_one(self, filter_dict):\n        if not self.file_path.exists():\n            return MockResult(deleted_count=0)\n            \n        with open(self.file_path, 'r', encoding='utf-8') as f:\n            try:\n                data = json.load(f)\n            except:\n                return MockResult(deleted_count=0)\n        \n        # Find and delete item\n        deleted_count = 0\n        for i, item in enumerate(data):\n            match = True\n            for key, value in filter_dict.items():\n                if key not in item or item[key] != value:\n                    match = False\n                    break\n            if match:\n                del data[i]\n                deleted_count = 1\n                break\n        \n        with open(self.file_path, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=2, ensure_ascii=False)\n            \n        return MockResult(deleted_count=deleted_count)\n        \n    async def delete_many(self, filter_dict):\n        return None\n        \n    async def count_documents(self, filter_dict=None):\n        if not self.file_path.exists():\n            return 0\n            \n        with open(self.file_path, 'r', encoding='utf-8') as f:\n            try:\n                data = json.load(f)\n            except:\n                return 0\n        \n        if filter_dict is None or not filter_dict:\n            return len(data)\n            \n        # Simple filter matching for count\n        count = 0\n        for item in data:\n            match = True\n            for key, value in filter_dict.items():\n                if key not in item or item[key] != value:\n                    match = False\n                    break\n            if match:\n                count += 1\n        return count\n\n# Create mock database instance\ndb = MockDB()\n\n# Add collections as attributes for compatibility\ndb.admins = db.get_collection('admins')\ndb.services = db.get_collection('services')\ndb.projects = db.get_collection('projects')\ndb.testimonials = db.get_collection('testimonials')\ndb.blogs = db.get_collection('blogs')\ndb.contacts = db.get_collection('contacts')\ndb.profiles = db.get_collection('profiles')\ndb.media_settings = db.get_collection('media_settings')\ndb.site_settings = db.get_collection('site_settings')\ndb.offers = db.get_collection('offers')\n\n# Inject database into route modules\nimport admin_routes\nimport public_routes\nimport profile_routes\n\nadmin_routes.db = db\npublic_routes.db = db\nprofile_routes.db = db\n\n# Create the main app\napp = FastAPI(title=\"MMB Portfolio API\", version=\"1.0.0\")\n\n# Mount static files for uploads\napp.mount(\"/uploads\", StaticFiles(directory=str(uploads_dir)), name=\"uploads\")\n\n# Include routers\napp.include_router(admin_router)\napp.include_router(public_router)\napp.include_router(profile_router)\n\n# Get CORS origins from environment - avoid wildcard for security\ncors_origins_env = os.getenv('CORS_ORIGINS', '')\nif cors_origins_env:\n    cors_origins = [origin.strip() for origin in cors_origins_env.split(',')]\nelse:\n    # Default to specific domains for security\n    cors_origins = [\n        'https://c8c5ce43-b358-4b41-9b87-8a58609f42a6-00-kmxcabryim7l.kirk.replit.dev',\n        'http://localhost:5000'\n    ]\n\n# Admin panel route  \n@app.get(\"/admin\")\nasync def admin_panel():\n    frontend_url = os.getenv('FRONTEND_URL', 'https://c8c5ce43-b358-4b41-9b87-8a58609f42a6-00-kmxcabryim7l.kirk.replit.dev')\n    return {\"message\": f\"Admin Panel - Please use frontend at {frontend_url}/admin/login\"}\n\n# Legacy route for compatibility\n@app.get(\"/api/\")\nasync def root():\n    return {\"message\": \"MMB Portfolio API - Admin Panel Ready\"}\n\n# Root route\n@app.get(\"/\")\nasync def home():\n    frontend_url = os.getenv('FRONTEND_URL', 'https://c8c5ce43-b358-4b41-9b87-8a58609f42a6-00-kmxcabryim7l.kirk.replit.dev')\n    return {\"message\": \"MMB Portfolio API - Backend Server Running\", \"admin_panel\": f\"{frontend_url}/admin/login\", \"api_docs\": \"/docs\"}\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_credentials=True,\n    allow_origins=cors_origins,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Shutdown event removed - using mock database\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n","size_bytes":10642},"frontend/README.md":{"content":"# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\n\nThe page will reload when you make changes.\\\nYou may also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can't go back!**\n\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\n\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n","size_bytes":3359},"frontend/craco.config.js":{"content":"// Load configuration from environment or config file\nconst path = require('path');\n\n// Environment variable overrides\nconst config = {\n  disableHotReload: process.env.DISABLE_HOT_RELOAD === 'true',\n};\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n    configure: (webpackConfig) => {\n      \n      // Disable hot reload completely if environment variable is set\n      if (config.disableHotReload) {\n        // Remove hot reload related plugins\n        webpackConfig.plugins = webpackConfig.plugins.filter(plugin => {\n          return !(plugin.constructor.name === 'HotModuleReplacementPlugin');\n        });\n        \n        // Disable watch mode\n        webpackConfig.watch = false;\n        webpackConfig.watchOptions = {\n          ignored: /.*/, // Ignore all files\n        };\n      } else {\n        // Add ignored patterns to reduce watched directories\n        webpackConfig.watchOptions = {\n          ...webpackConfig.watchOptions,\n          ignored: [\n            '**/node_modules/**',\n            '**/.git/**',\n            '**/build/**',\n            '**/dist/**',\n            '**/coverage/**',\n            '**/public/**',\n          ],\n        };\n      }\n      \n      return webpackConfig;\n    },\n  },\n  // Replit configuration - allow all hosts and set port 5000\n  devServer: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: 'all',\n    headers: {\n      'Cache-Control': 'no-cache',\n    },\n  },\n};","size_bytes":1458},"frontend/postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":82},"frontend/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    darkMode: [\"class\"],\n    content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./public/index.html\"\n  ],\n  theme: {\n  \textend: {\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t}\n  \t\t},\n  \t\tkeyframes: {\n  \t\t\t'accordion-down': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t}\n  \t\t\t},\n  \t\t\t'accordion-up': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t}\n  \t\t\t}\n  \t\t},\n  \t\tanimation: {\n  \t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n  \t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};","size_bytes":2013},"tests/__init__.py":{"content":"","size_bytes":0},"frontend/src/App.css":{"content":".App-logo {\n    height: 40vmin;\n    pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n    .App-logo {\n        animation: App-logo-spin infinite 20s linear;\n    }\n}\n\n.App-header {\n    background-color: #0f0f10;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n}\n\n.App-link {\n    color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n","size_bytes":578},"frontend/src/App.js":{"content":"import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { Toaster } from \"./components/ui/toaster\";\nimport { AuthProvider, useAuth } from \"./context/AuthContext\";\nimport { ProfileProvider } from \"./context/ProfileContext\";\nimport { SiteSettingsProvider } from \"./context/SiteSettingsContext\";\n\n// Layout Components\nimport Header from \"./components/Layout/Header\";\nimport Footer from \"./components/Layout/Footer\";\nimport WhatsAppButton from \"./components/Common/WhatsAppButton\";\n\n// Public Pages\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Services from \"./pages/Services\";\nimport Portfolio from \"./pages/Portfolio\";\nimport Testimonials from \"./pages/Testimonials\";\nimport Contact from \"./pages/Contact\";\nimport Blog from \"./pages/Blog\";\nimport PrivacyPolicy from \"./pages/PrivacyPolicy\";\nimport TermsOfService from \"./pages/TermsOfService\";\n\n// Admin Components\nimport AdminLogin from \"./pages/Admin/AdminLogin\";\nimport AdminLayout from \"./components/Admin/AdminLayout\";\nimport AdminDashboard from \"./pages/Admin/AdminDashboard\";\nimport AdminServices from \"./pages/Admin/AdminServices\";\nimport AdminProjects from \"./pages/Admin/AdminProjects\";\nimport AdminContacts from \"./pages/Admin/AdminContacts\";\nimport AdminProfile from \"./pages/Admin/AdminProfile\";\nimport AdminBlogs from \"./pages/Admin/AdminBlogs\";\nimport AdminTestimonials from \"./pages/Admin/AdminTestimonials\";\nimport AdminMedia from \"./pages/Admin/AdminMedia\";\nimport AdminOffers from \"./pages/Admin/AdminOffers\";\nimport AdminAppearance from \"./pages/Admin/AdminAppearance\";\n\n// Protected Route Component\nconst ProtectedRoute = ({ children }) => {\n  const { isAuthenticated, loading } = useAuth();\n  \n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n  \n  return isAuthenticated ? children : <Navigate to=\"/admin/login\" />;\n};\n\n// Public Route Component (redirect to dashboard if logged in)\nconst PublicRoute = ({ children }) => {\n  const { isAuthenticated, loading } = useAuth();\n  \n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n  \n  return !isAuthenticated ? children : <Navigate to=\"/admin/dashboard\" />;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <AuthProvider>\n          <ProfileProvider>\n            <SiteSettingsProvider>\n          <Routes>\n            {/* Public Routes */}\n            <Route path=\"/\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <Home />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/about\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <About />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/services\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <Services />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/portfolio\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <Portfolio />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/testimonials\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <Testimonials />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/blog\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <Blog />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/contact\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <Contact />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/privacy\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <PrivacyPolicy />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n            \n            <Route path=\"/terms\" element={\n              <div className=\"min-h-screen flex flex-col\">\n                <Header />\n                <main className=\"flex-1\">\n                  <TermsOfService />\n                </main>\n                <Footer />\n                <WhatsAppButton />\n              </div>\n            } />\n\n            {/* Admin Routes */}\n            <Route path=\"/admin/login\" element={\n              <PublicRoute>\n                <AdminLogin />\n              </PublicRoute>\n            } />\n            \n            <Route path=\"/admin\" element={\n              <ProtectedRoute>\n                <AdminLayout />\n              </ProtectedRoute>\n            }>\n              <Route index element={<Navigate to=\"/admin/dashboard\" />} />\n              <Route path=\"dashboard\" element={<AdminDashboard />} />\n              <Route path=\"services\" element={<AdminServices />} />\n              <Route path=\"projects\" element={<AdminProjects />} />\n              <Route path=\"contacts\" element={<AdminContacts />} />\n              <Route path=\"profile\" element={<AdminProfile />} />\n              <Route path=\"blogs\" element={<AdminBlogs />} />\n              <Route path=\"testimonials\" element={<AdminTestimonials />} />\n              <Route path=\"media\" element={<AdminMedia />} />\n              <Route path=\"offers\" element={<AdminOffers />} />\n              <Route path=\"appearance\" element={<AdminAppearance />} />\n            </Route>\n\n            {/* Redirect /admin to /admin/dashboard */}\n            <Route path=\"/admin/*\" element={<Navigate to=\"/admin/dashboard\" />} />\n          </Routes>\n          <Toaster />\n            </SiteSettingsProvider>\n          </ProfileProvider>\n        </AuthProvider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":7248},"frontend/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\",\n        \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n        \"Helvetica Neue\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n        monospace;\n}\n\n\n\n@layer base {\n  :root {\n        --background: 0 0% 100%;\n        --foreground: 0 0% 3.9%;\n        --card: 0 0% 100%;\n        --card-foreground: 0 0% 3.9%;\n        --popover: 0 0% 100%;\n        --popover-foreground: 0 0% 3.9%;\n        --primary: 0 0% 9%;\n        --primary-foreground: 0 0% 98%;\n        --secondary: 0 0% 96.1%;\n        --secondary-foreground: 0 0% 9%;\n        --muted: 0 0% 96.1%;\n        --muted-foreground: 0 0% 45.1%;\n        --accent: 0 0% 96.1%;\n        --accent-foreground: 0 0% 9%;\n        --destructive: 0 84.2% 60.2%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 0 0% 89.8%;\n        --input: 0 0% 89.8%;\n        --ring: 0 0% 3.9%;\n        --chart-1: 12 76% 61%;\n        --chart-2: 173 58% 39%;\n        --chart-3: 197 37% 24%;\n        --chart-4: 43 74% 66%;\n        --chart-5: 27 87% 67%;\n        --radius: 0.5rem;\n    }\n  .dark {\n        --background: 0 0% 3.9%;\n        --foreground: 0 0% 98%;\n        --card: 0 0% 3.9%;\n        --card-foreground: 0 0% 98%;\n        --popover: 0 0% 3.9%;\n        --popover-foreground: 0 0% 98%;\n        --primary: 0 0% 98%;\n        --primary-foreground: 0 0% 9%;\n        --secondary: 0 0% 14.9%;\n        --secondary-foreground: 0 0% 98%;\n        --muted: 0 0% 14.9%;\n        --muted-foreground: 0 0% 63.9%;\n        --accent: 0 0% 14.9%;\n        --accent-foreground: 0 0% 98%;\n        --destructive: 0 62.8% 30.6%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 0 0% 14.9%;\n        --input: 0 0% 14.9%;\n        --ring: 0 0% 83.1%;\n        --chart-1: 220 70% 50%;\n        --chart-2: 160 60% 45%;\n        --chart-3: 30 80% 55%;\n        --chart-4: 280 65% 60%;\n        --chart-5: 340 75% 55%;\n    }\n}\n\n\n\n@layer base {\n  * {\n    @apply border-border;\n    }\n  body {\n    @apply bg-background text-foreground;\n    }\n}\n","size_bytes":2253},"frontend/src/index.js":{"content":"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n","size_bytes":255},"frontend/src/context/AuthContext.jsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AuthContext = createContext();\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [admin, setAdmin] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('admin_token'));\n\n  // Set axios default authorization header\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Verify token on app start\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (token) {\n        try {\n          const response = await axios.get(`${API}/admin/verify`);\n          setAdmin(response.data);\n        } catch (error) {\n          console.error('Token verification failed:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n\n    verifyToken();\n  }, [token]);\n\n  const login = async (credentials) => {\n    try {\n      const response = await axios.post(`${API}/admin/login`, credentials);\n      const { access_token, admin: adminData } = response.data;\n      \n      setToken(access_token);\n      setAdmin(adminData);\n      localStorage.setItem('admin_token', access_token);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Login failed:', error);\n      return { \n        success: false, \n        error: error.response?.data?.detail || 'Login failed' \n      };\n    }\n  };\n\n  const logout = () => {\n    setToken(null);\n    setAdmin(null);\n    localStorage.removeItem('admin_token');\n    delete axios.defaults.headers.common['Authorization'];\n  };\n\n  const value = {\n    admin,\n    token,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!admin\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":2216},"frontend/src/context/ProfileContext.jsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ProfileContext = createContext();\n\nexport const useProfile = () => {\n  const context = useContext(ProfileContext);\n  if (!context) {\n    throw new Error('useProfile must be used within a ProfileProvider');\n  }\n  return context;\n};\n\nexport const ProfileProvider = ({ children }) => {\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchProfile = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\n      const response = await axios.get(`${backendUrl}/api/profile`);\n      \n      setProfile(response.data);\n    } catch (err) {\n      console.error('Error fetching profile:', err);\n      setError('Failed to fetch profile data');\n      \n      // Fallback to default data if API fails\n      setProfile({\n        name: \"Kuldeep Parjapati\",\n        email: \"hello@mmb.dev\",\n        phone: \"+91 98765 43210\",\n        whatsapp: \"+91 98765 43210\",\n        address: \"India\",\n        bio: \"Professional Web Developer & Designer\",\n        linkedin: \"https://linkedin.com/in/mmb\",\n        github: \"https://github.com/mmb\",\n        twitter: \"https://twitter.com/mmb\",\n        instagram: \"https://instagram.com/mmb\",\n        website: \"https://mmb.dev\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  const contextValue = {\n    profile,\n    loading,\n    error,\n    refetchProfile: fetchProfile,\n    refreshProfile: fetchProfile\n  };\n\n  return (\n    <ProfileContext.Provider value={contextValue}>\n      {children}\n    </ProfileContext.Provider>\n  );\n};\n\nexport default ProfileContext;","size_bytes":1861},"frontend/src/data/mock.js":{"content":"// Mock data for MMB Portfolio Website\n\nexport const mockData = {\n  // Hero Section\n  hero: {\n    name: \"MMB\",\n    tagline: \"Modern Web Solutions That Convert Visitors Into Customers\",\n    description: \"Professional Website Development, UX/UI Design & Digital Solutions\",\n    ctaText: \"Let's Work Together\",\n    heroImage: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=600&fit=crop\"\n  },\n\n  // About Section\n  about: {\n    title: \"About MMB\",\n    description: \"Passionate web developer and designer with expertise in creating modern, responsive websites that deliver exceptional user experiences. Specialized in React, Node.js, and modern web technologies.\",\n    experience: \"3+ Years\",\n    projectsCompleted: \"15+\",\n    happyClients: \"12+\",\n    skills: [\n      \"React & Next.js\",\n      \"Node.js & Express\",\n      \"MongoDB & Firebase\",\n      \"Tailwind CSS\",\n      \"WordPress Development\",\n      \"UX/UI Design\",\n      \"SEO Optimization\"\n    ]\n  },\n\n  // Services\n  services: [\n    {\n      id: 1,\n      title: \"Website Development\",\n      description: \"Custom responsive websites built with modern technologies like React, Next.js, and Node.js\",\n      price: \"Starting from ₹15,000\",\n      duration: \"7-14 days\",\n      features: [\"Responsive Design\", \"Fast Loading\", \"SEO Optimized\", \"Admin Panel\"],\n      icon: \"Globe\"\n    },\n    {\n      id: 2,\n      title: \"Landing Page Design\",\n      description: \"High-conversion landing pages that turn visitors into customers with compelling design and copy\",\n      price: \"Starting from ₹8,000\",\n      duration: \"3-5 days\", \n      features: [\"Conversion Focused\", \"Mobile First\", \"A/B Testing\", \"Analytics Setup\"],\n      icon: \"Layout\"\n    },\n    {\n      id: 3,\n      title: \"UX/UI Design\",\n      description: \"User-centered design approach with wireframes, prototypes, and beautiful interfaces\",\n      price: \"Starting from ₹12,000\",\n      duration: \"5-10 days\",\n      features: [\"User Research\", \"Wireframes\", \"Prototypes\", \"Design System\"],\n      icon: \"Palette\"\n    },\n    {\n      id: 4,\n      title: \"WordPress Development\",\n      description: \"Custom WordPress themes and plugins with easy-to-use admin panels\",\n      price: \"Starting from ₹10,000\", \n      duration: \"5-7 days\",\n      features: [\"Custom Themes\", \"Plugin Development\", \"WooCommerce\", \"SEO Ready\"],\n      icon: \"Wordpress\"\n    },\n    {\n      id: 5,\n      title: \"Content Writing\",\n      description: \"SEO-optimized content that engages your audience and improves search rankings\",\n      price: \"Starting from ₹500/page\",\n      duration: \"1-3 days\",\n      features: [\"SEO Optimized\", \"Engaging Copy\", \"Research Based\", \"Plagiarism Free\"],\n      icon: \"PenTool\"\n    },\n    {\n      id: 6,\n      title: \"Digital Marketing\",\n      description: \"Complete digital marketing solutions including social media and SEO strategies\",\n      price: \"Starting from ₹5,000/month\",\n      duration: \"Ongoing\",\n      features: [\"Social Media\", \"SEO Strategy\", \"Content Calendar\", \"Analytics\"],\n      icon: \"TrendingUp\"\n    }\n  ],\n\n  // Portfolio Projects\n  projects: [\n    {\n      id: 1,\n      title: \"Skillpay - Payment Solutions\",\n      description: \"Modern payment gateway website with secure transactions and user-friendly interface\",\n      image: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=600&h=400&fit=crop\",\n      category: \"Website Development\",\n      tags: [\"React\", \"Payment Gateway\", \"Security\"],\n      liveUrl: \"https://skillpay.shop\",\n      technologies: [\"React\", \"Node.js\", \"Stripe\", \"MongoDB\"]\n    },\n    {\n      id: 2,\n      title: \"Durga Chemical Solutions\",\n      description: \"Corporate website for chemical solutions company with product catalog and inquiry system\",\n      image: \"https://images.unsplash.com/photo-1532094349884-543bc11b234d?w=600&h=400&fit=crop\",\n      category: \"Corporate Website\",\n      tags: [\"WordPress\", \"Corporate\", \"Catalog\"],\n      liveUrl: \"https://durgachemsol.com\",\n      technologies: [\"WordPress\", \"PHP\", \"MySQL\"]\n    },\n    {\n      id: 3,\n      title: \"Hisar Job Place\",\n      description: \"Job portal connecting employers with job seekers in Hisar region\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=600&h=400&fit=crop\",\n      category: \"Web Application\",\n      tags: [\"Job Portal\", \"React\", \"Database\"],\n      liveUrl: \"https://hisarjobplace.in\",\n      technologies: [\"React\", \"Node.js\", \"MongoDB\", \"JWT\"]\n    },\n    {\n      id: 4,\n      title: \"NeoGenie Shop\",\n      description: \"E-commerce platform with modern design and seamless shopping experience\",\n      image: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=600&h=400&fit=crop\",\n      category: \"E-commerce\",\n      tags: [\"E-commerce\", \"Shopping\", \"Payment\"],\n      liveUrl: \"https://neogenie.shop\",\n      technologies: [\"React\", \"Node.js\", \"Stripe\", \"MongoDB\"]\n    },\n    {\n      id: 5,\n      title: \"Pensiya Krishi Farm\",\n      description: \"Agricultural website showcasing farm products and organic farming practices\",\n      image: \"https://images.unsplash.com/photo-1625246333195-78d9c38ad449?w=600&h=400&fit=crop\",\n      category: \"Agriculture\",\n      tags: [\"Agriculture\", \"Organic\", \"Products\"],\n      liveUrl: \"https://pensiyakrishifarm.com\",\n      technologies: [\"WordPress\", \"WooCommerce\", \"PHP\"]\n    },\n    {\n      id: 6,\n      title: \"Krishi Ledger App\",\n      description: \"Farm management application for tracking crops, expenses, and profits\",\n      image: \"https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=600&h=400&fit=crop\",\n      category: \"Web Application\",\n      tags: [\"Agriculture\", \"Management\", \"Dashboard\"],\n      liveUrl: \"https://app--krishi-ledger-copy-copy-0e9155b6.base44.app\",\n      technologies: [\"React\", \"Node.js\", \"Charts.js\", \"MongoDB\"]\n    }\n  ],\n\n  // Testimonials\n  testimonials: [\n    {\n      id: 1,\n      name: \"Rajesh Kumar\",\n      position: \"CEO, Durga Chemical Solutions\",\n      company: \"Durga Chemical Solutions\",\n      rating: 5,\n      text: \"MMB delivered an exceptional website that perfectly represents our brand. Professional service and excellent communication throughout the project.\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face\"\n    },\n    {\n      id: 2,\n      name: \"Priya Sharma\",\n      position: \"Founder, NeoGenie Shop\",\n      company: \"NeoGenie Shop\", \n      rating: 5,\n      text: \"The e-commerce platform MMB built for us increased our sales by 40%. Amazing work and great attention to detail!\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face\"\n    },\n    {\n      id: 3,\n      name: \"Amit Singh\",\n      position: \"Owner, Pensiya Krishi Farm\",\n      company: \"Pensiya Krishi Farm\",\n      rating: 5,\n      text: \"Professional, timely delivery, and excellent support. MMB understood our agricultural business needs perfectly.\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face\"\n    }\n  ],\n\n  // Blog Posts\n  blogPosts: [\n    {\n      id: 1,\n      title: \"Complete Guide to React Hooks in 2024\",\n      excerpt: \"Master React Hooks with practical examples and learn how to build modern, efficient React applications using useState, useEffect, and custom hooks.\",\n      image: \"https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=600&h=400&fit=crop\",\n      category: \"React\",\n      author: \"MMB\",\n      publishDate: \"2024-01-25\",\n      readTime: \"12 min read\",\n      tags: [\"React\", \"Hooks\", \"JavaScript\", \"Frontend\"]\n    },\n    {\n      id: 2,\n      title: \"Building Responsive Websites with Tailwind CSS\",\n      excerpt: \"Learn advanced Tailwind CSS techniques for creating beautiful, responsive designs that work perfectly across all devices and screen sizes.\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=600&h=400&fit=crop\",\n      category: \"CSS\",\n      author: \"MMB\",\n      publishDate: \"2024-01-22\",\n      readTime: \"8 min read\",\n      tags: [\"Tailwind CSS\", \"Responsive Design\", \"CSS\", \"Web Design\"]\n    },\n    {\n      id: 3,\n      title: \"Node.js Best Practices for Production Applications\",\n      excerpt: \"Essential Node.js best practices, security considerations, and performance optimizations for building scalable backend applications in production.\",\n      image: \"https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=600&h=400&fit=crop\",\n      category: \"Node.js\",\n      author: \"MMB\",\n      publishDate: \"2024-01-20\",\n      readTime: \"15 min read\",\n      tags: [\"Node.js\", \"Backend\", \"JavaScript\", \"Best Practices\"]\n    },\n    {\n      id: 4,\n      title: \"SEO Optimization for Modern Web Applications\",\n      excerpt: \"Complete SEO guide for modern web apps including technical SEO, Core Web Vitals, and strategies to improve search engine rankings in 2024.\",\n      image: \"https://images.unsplash.com/photo-1432888622747-4eb9a8efeb07?w=600&h=400&fit=crop\",\n      category: \"SEO\",\n      author: \"MMB\",\n      publishDate: \"2024-01-18\",\n      readTime: \"10 min read\",\n      tags: [\"SEO\", \"Web Performance\", \"Google\", \"Rankings\"]\n    },\n    {\n      id: 5,\n      title: \"MongoDB Database Design Patterns and Best Practices\",\n      excerpt: \"Learn MongoDB schema design patterns, indexing strategies, and performance optimization techniques for building efficient database solutions.\",\n      image: \"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=600&h=400&fit=crop\",\n      category: \"Database\",\n      author: \"MMB\",\n      publishDate: \"2024-01-15\",\n      readTime: \"11 min read\",\n      tags: [\"MongoDB\", \"Database\", \"NoSQL\", \"Performance\"]\n    },\n    {\n      id: 6,\n      title: \"WordPress vs Custom Development: Complete Comparison\",\n      excerpt: \"Detailed comparison between WordPress and custom development approaches, helping you choose the right solution for your business needs.\",\n      image: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop\",\n      category: \"WordPress\",\n      author: \"MMB\",\n      publishDate: \"2024-01-12\",\n      readTime: \"9 min read\",\n      tags: [\"WordPress\", \"Custom Development\", \"CMS\", \"Decision Guide\"]\n    },\n    {\n      id: 7,\n      title: \"API Security Best Practices for Web Developers\",\n      excerpt: \"Essential security practices for REST APIs including authentication, authorization, rate limiting, and protection against common vulnerabilities.\",\n      image: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=600&h=400&fit=crop\",\n      category: \"Security\",\n      author: \"MMB\",\n      publishDate: \"2024-01-10\",\n      readTime: \"13 min read\",\n      tags: [\"API Security\", \"REST API\", \"Authentication\", \"Web Security\"]\n    },\n    {\n      id: 8,\n      title: \"Performance Optimization Techniques for React Applications\",\n      excerpt: \"Advanced React performance optimization strategies including code splitting, lazy loading, memoization, and bundle size reduction techniques.\",\n      image: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=600&h=400&fit=crop\",\n      category: \"React\",\n      author: \"MMB\",\n      publishDate: \"2024-01-08\",\n      readTime: \"14 min read\",\n      tags: [\"React\", \"Performance\", \"Optimization\", \"Code Splitting\"]\n    }\n  ],\n\n  // Contact Information\n  contact: {\n    email: \"hello@mmb.dev\",\n    phone: \"+91 98765 43210\",\n    whatsapp: \"+91 98765 43210\",\n    address: \"India\",\n    social: {\n      linkedin: \"https://linkedin.com/in/mmb\",\n      github: \"https://github.com/mmb\",\n      twitter: \"https://twitter.com/mmb\",\n      instagram: \"https://instagram.com/mmb\"\n    }\n  },\n\n  // Stats\n  stats: [\n    { label: \"Projects Completed\", value: \"15+\" },\n    { label: \"Happy Clients\", value: \"12+\" },\n    { label: \"Years Experience\", value: \"3+\" },\n    { label: \"Technologies\", value: \"10+\" }\n  ]\n};\n\nexport default mockData;","size_bytes":11882},"frontend/src/hooks/use-toast.js":{"content":"\"use client\";\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\"\n}\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString();\n}\n\nconst toastTimeouts = new Map()\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n}\n\nconst listeners = []\n\nlet memoryState = { toasts: [] }\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\nfunction toast({\n  ...props\n}) {\n  const id = genId()\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    };\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast }\n","size_bytes":3085},"frontend/src/lib/utils.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n","size_bytes":137},"frontend/src/pages/About.jsx":{"content":"import React from 'react';\nimport { Badge } from '../components/ui/badge';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Progress } from '../components/ui/progress';\nimport { CheckCircle, Award, Target, Users } from 'lucide-react';\nimport mockData from '../data/mock';\n\nconst About = () => {\n  const { about, stats } = mockData;\n\n  const achievements = [\n    { icon: Award, title: \"Best Design Award\", description: \"Received recognition for outstanding web design\" },\n    { icon: Target, title: \"100% Project Success\", description: \"All projects delivered on time and within budget\" },\n    { icon: Users, title: \"Happy Clients\", description: \"Consistently 5-star reviews from satisfied clients\" }\n  ];\n\n  const skills = [\n    { name: \"React & Next.js\", level: 95 },\n    { name: \"Node.js & Express\", level: 90 },\n    { name: \"UI/UX Design\", level: 85 },\n    { name: \"MongoDB & Firebase\", level: 88 },\n    { name: \"WordPress Development\", level: 92 },\n    { name: \"Digital Marketing\", level: 80 }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-purple-50\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <Badge variant=\"outline\">About MMB</Badge>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900\">\n            Passionate About Creating Digital Excellence\n          </h1>\n          <p className=\"text-xl text-gray-600 leading-relaxed\">\n            {about.description}\n          </p>\n          \n          {/* Profile Image */}\n          <div className=\"w-40 h-40 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mx-auto flex items-center justify-center text-white text-6xl font-bold\">\n            MMB\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center p-6 bg-white rounded-lg shadow-lg\">\n                <div className=\"text-3xl font-bold text-blue-600 mb-2\">{stat.value}</div>\n                <div className=\"text-gray-600\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Skills Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Technical Expertise\n            </h2>\n            <p className=\"text-gray-600 text-lg\">\n              Proficient in modern web technologies and frameworks\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <div className=\"space-y-6\">\n              {skills.map((skill, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium text-gray-900\">{skill.name}</span>\n                    <span className=\"text-blue-600\">{skill.level}%</span>\n                  </div>\n                  <Progress value={skill.level} className=\"h-2\" />\n                </div>\n              ))}\n            </div>\n\n            <div className=\"space-y-6\">\n              <h3 className=\"text-2xl font-semibold text-gray-900\">Key Skills</h3>\n              <div className=\"grid grid-cols-1 gap-4\">\n                {about.skills.map((skill, index) => (\n                  <div key={index} className=\"flex items-center space-x-3 p-4 bg-white rounded-lg shadow-sm\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    <span className=\"text-gray-700\">{skill}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Journey Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              My Journey\n            </h2>\n            <p className=\"text-gray-600 text-lg\">\n              From passion to profession - building digital solutions that matter\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            <Card>\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-blue-600 font-bold\">2021</span>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <h3 className=\"text-xl font-semibold text-gray-900\">Started Web Development Journey</h3>\n                    <p className=\"text-gray-600\">\n                      Began learning modern web technologies including React, Node.js, and responsive design principles.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-purple-600 font-bold\">2022</span>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <h3 className=\"text-xl font-semibold text-gray-900\">First Professional Projects</h3>\n                    <p className=\"text-gray-600\">\n                      Completed first commercial projects including e-commerce websites and corporate portals.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-green-600 font-bold\">2024</span>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <h3 className=\"text-xl font-semibold text-gray-900\">Full-Stack Expertise</h3>\n                    <p className=\"text-gray-600\">\n                      Expanded expertise to full-stack development, specializing in modern web applications and digital solutions.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Achievements Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Achievements & Recognition\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {achievements.map((achievement, index) => {\n              const IconComponent = achievement.icon;\n              return (\n                <Card key={index} className=\"text-center\">\n                  <CardContent className=\"p-8 space-y-4\">\n                    <div className=\"w-16 h-16 bg-blue-100 rounded-full mx-auto flex items-center justify-center\">\n                      <IconComponent className=\"h-8 w-8 text-blue-600\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-gray-900\">{achievement.title}</h3>\n                    <p className=\"text-gray-600\">{achievement.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              My Values\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-semibold text-gray-900\">Quality First</h3>\n              <p className=\"text-gray-600\">\n                Every project is crafted with attention to detail, ensuring high-quality code, \n                beautiful design, and optimal performance.\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-semibold text-gray-900\">Client-Focused</h3>\n              <p className=\"text-gray-600\">\n                Understanding client needs and delivering solutions that exceed expectations \n                is at the heart of every project.\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-semibold text-gray-900\">Continuous Learning</h3>\n              <p className=\"text-gray-600\">\n                Staying updated with the latest technologies and trends to provide \n                cutting-edge solutions.\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-semibold text-gray-900\">Timely Delivery</h3>\n              <p className=\"text-gray-600\">\n                Committed to delivering projects on time without compromising on quality \n                or functionality.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default About;","size_bytes":10011},"frontend/src/pages/Blog.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Badge } from '../components/ui/badge';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Calendar, Clock, User, Search, Tag, ArrowRight } from 'lucide-react';\nimport axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst Blog = () => {\n  const [blogPosts, setBlogPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n\n  useEffect(() => {\n    fetchBlogs();\n  }, []);\n\n  const fetchBlogs = async () => {\n    try {\n      const response = await axios.get(`${API}/blogs`);\n      setBlogPosts(response.data);\n    } catch (error) {\n      console.error('Failed to fetch blogs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const categories = ['All', ...new Set(blogPosts.map(post => post.category))];\n  \n  const filteredPosts = blogPosts.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         post.excerpt.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'All' || post.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  const additionalPosts = [\n    {\n      id: 9,\n      title: \"Deployment Strategies for Modern Web Applications\",\n      excerpt: \"Learn about different deployment strategies including CI/CD pipelines, containerization with Docker, and cloud deployment best practices.\",\n      image: \"https://images.unsplash.com/photo-1667372393086-9d4001d51cf1?w=600&h=400&fit=crop\",\n      category: \"DevOps\",\n      author: \"MMB\",\n      publishDate: \"2024-01-05\",\n      readTime: \"12 min read\",\n      tags: [\"DevOps\", \"Deployment\", \"CI/CD\", \"Docker\"]\n    },\n    {\n      id: 10,\n      title: \"Building Progressive Web Apps (PWAs) with React\",\n      excerpt: \"Complete guide to creating Progressive Web Apps that work offline, send push notifications, and provide native app-like experiences.\",\n      image: \"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?w=600&h=400&fit=crop\",\n      category: \"PWA\",\n      author: \"MMB\",\n      publishDate: \"2024-01-03\",\n      readTime: \"16 min read\",\n      tags: [\"PWA\", \"React\", \"Offline\", \"Mobile\"]\n    }\n  ];\n\n  const allPosts = [...blogPosts, ...additionalPosts];\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-purple-50\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <Badge variant=\"outline\">MMB Blog</Badge>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900\">\n            Web Development Insights & Tips\n          </h1>\n          <p className=\"text-xl text-gray-600 leading-relaxed\">\n            Stay updated with the latest trends, tutorials, and best practices in web development, \n            design, and digital marketing.\n          </p>\n        </div>\n      </section>\n\n      {/* Search & Filter */}\n      <section className=\"py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search articles...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600\">Category:</span>\n              <div className=\"flex space-x-1\">\n                {categories.map((category) => (\n                  <button\n                    key={category}\n                    onClick={() => setSelectedCategory(category)}\n                    className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                      selectedCategory === category\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                    }`}\n                  >\n                    {category}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Post */}\n      <section className=\"py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Badge variant=\"outline\" className=\"mb-6\">Featured Article</Badge>\n          <Card className=\"overflow-hidden hover:shadow-xl transition-all duration-300\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2\">\n              <div className=\"aspect-video lg:aspect-auto\">\n                <img \n                  src={filteredPosts[0]?.image || 'https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?w=600&h=400&fit=crop'} \n                  alt={filteredPosts[0]?.title || 'Blog post'}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              <CardContent className=\"p-8 flex flex-col justify-center space-y-4\">\n                <Badge variant=\"secondary\">{filteredPosts[0]?.category || 'Development'}</Badge>\n                <h2 className=\"text-2xl md:text-3xl font-bold text-gray-900 leading-tight\">\n                  {filteredPosts[0]?.title || 'Featured Blog Post'}\n                </h2>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  {filteredPosts[0]?.excerpt || 'This is a featured blog post excerpt.'}\n                </p>\n                <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                  <div className=\"flex items-center space-x-1\">\n                    <User className=\"h-4 w-4\" />\n                    <span>{filteredPosts[0]?.author || 'MMB'}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{filteredPosts[0]?.publish_date ? new Date(filteredPosts[0].publish_date).toLocaleDateString() : 'Recent'}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{filteredPosts[0]?.read_time || '5 min read'}</span>\n                  </div>\n                </div>\n                <Button className=\"w-fit\">\n                  Read Full Article\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </CardContent>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      {/* Blog Posts Grid */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Latest Articles</h2>\n            <p className=\"text-gray-600\">\n              Showing {filteredPosts.length} article{filteredPosts.length !== 1 ? 's' : ''}\n              {selectedCategory !== 'All' && ` in ${selectedCategory}`}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {filteredPosts.slice(1).map((post) => (\n              <Card key={post.id} className=\"group overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1\">\n                <div className=\"aspect-video overflow-hidden\">\n                  <img \n                    src={post.image} \n                    alt={post.title}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                </div>\n                <CardContent className=\"p-6 space-y-4\">\n                  <div className=\"flex justify-between items-start\">\n                    <Badge variant=\"outline\">{post.category}</Badge>\n                    <span className=\"text-xs text-gray-500\">{post.readTime}</span>\n                  </div>\n                  \n                  <h3 className=\"text-xl font-semibold text-gray-900 group-hover:text-blue-600 transition-colors leading-tight\">\n                    {post.title}\n                  </h3>\n                  \n                  <p className=\"text-gray-600 text-sm leading-relaxed\">\n                    {post.excerpt}\n                  </p>\n\n                  <div className=\"flex flex-wrap gap-1\">\n                    {post.tags.map((tag, index) => (\n                      <span key={index} className=\"text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded flex items-center\">\n                        <Tag className=\"h-3 w-3 mr-1\" />\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n\n                  <div className=\"flex items-center justify-between pt-4 border-t border-gray-100\">\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                      <User className=\"h-4 w-4\" />\n                      <span>{post.author}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                      <Calendar className=\"h-4 w-4\" />\n                      <span>{new Date(post.publish_date).toLocaleDateString()}</span>\n                    </div>\n                  </div>\n\n                  <Button variant=\"outline\" className=\"w-full group-hover:bg-blue-50\">\n                    Read More\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Signup */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Stay Updated\n            </h2>\n            <p className=\"text-gray-600 text-lg\">\n              Get the latest web development tips, tutorials, and insights delivered to your inbox.\n            </p>\n          </div>\n\n          <Card className=\"p-8\">\n            <div className=\"flex flex-col md:flex-row gap-4 max-w-md mx-auto\">\n              <Input\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                className=\"flex-1\"\n              />\n              <Button>\n                Subscribe\n              </Button>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-4\">\n              No spam, unsubscribe at any time. \n            </p>\n          </Card>\n        </div>\n      </section>\n\n      {/* Blog Categories */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Explore Topics\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n            {['React', 'Node.js', 'CSS', 'SEO', 'WordPress', 'Security', 'Database', 'PWA', 'DevOps', 'Performance'].map((topic, index) => (\n              <Card key={index} className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer\">\n                <CardContent className=\"p-6 text-center space-y-3\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg mx-auto flex items-center justify-center group-hover:bg-blue-600 transition-colors\">\n                    <Tag className=\"h-6 w-6 text-blue-600 group-hover:text-white transition-colors\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900\">{topic}</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    {Math.floor(Math.random() * 5) + 1} articles\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold\">\n            Need Web Development Help?\n          </h2>\n          <p className=\"text-xl text-blue-100\">\n            Ready to bring your project to life? Let's discuss your requirements.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild size=\"lg\" variant=\"secondary\">\n              <a href=\"/contact\">Get Started</a>\n            </Button>\n            <Button asChild size=\"lg\" variant=\"outline\">\n              <a href=\"/services\">View Services</a>\n            </Button>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Blog;","size_bytes":13640},"frontend/src/pages/Contact.jsx":{"content":"import React, { useState } from 'react';\nimport { Badge } from '../components/ui/badge';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Textarea } from '../components/ui/textarea';\nimport { Label } from '../components/ui/label';\nimport { useToast } from '../hooks/use-toast';\nimport { Mail, Phone, MapPin, Send, MessageCircle, Clock, CheckCircle } from 'lucide-react';\nimport axios from 'axios';\nimport { useProfile } from '../context/ProfileContext';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\n\nconst Contact = () => {\n  const { profile, loading } = useProfile();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    projectType: '',\n    budget: '',\n    message: '',\n    timeline: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Submit to backend\n      await axios.post(`${BACKEND_URL}/api/contact`, {\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone,\n        project_type: formData.projectType,\n        budget: formData.budget,\n        message: formData.message,\n        timeline: formData.timeline\n      });\n\n      toast({\n        title: \"Message Sent Successfully!\",\n        description: \"Thank you for your inquiry. I'll get back to you within 24 hours.\",\n      });\n      \n      // Reset form\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        projectType: '',\n        budget: '',\n        message: '',\n        timeline: ''\n      });\n      \n    } catch (error) {\n      console.error('Contact form error:', error);\n      toast({\n        title: \"Error Sending Message\",\n        description: \"There was an error sending your message. Please try again or contact directly.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleWhatsAppClick = () => {\n    if (!profile?.whatsapp) return;\n    \n    const message = `Hi MMB! I'm interested in your web development services.\\n\\nProject Type: ${formData.projectType || 'Not specified'}\\nBudget: ${formData.budget || 'Not specified'}\\nTimeline: ${formData.timeline || 'Not specified'}\\n\\nMessage: ${formData.message || 'I would like to discuss my project requirements.'}`;\n    const whatsappUrl = `https://wa.me/${profile.whatsapp.replace(/[^0-9]/g, '')}?text=${encodeURIComponent(message)}`;\n    window.open(whatsappUrl, '_blank');\n  };\n\n  const projectTypes = [\n    'Website Development',\n    'Landing Page Design',\n    'E-commerce Store',\n    'WordPress Website',\n    'UX/UI Design',\n    'Web Application',\n    'Other'\n  ];\n\n  const budgetRanges = [\n    'Under ₹10,000',\n    '₹10,000 - ₹25,000',\n    '₹25,000 - ₹50,000',\n    '₹50,000 - ₹1,00,000',\n    'Above ₹1,00,000'\n  ];\n\n  const timelines = [\n    'ASAP (Rush Job)',\n    '1-2 Weeks',\n    '3-4 Weeks',\n    '1-2 Months',\n    '3+ Months'\n  ];\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-purple-50\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <Badge variant=\"outline\">Get In Touch</Badge>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900\">\n            Let's Work Together\n          </h1>\n          <p className=\"text-xl text-gray-600 leading-relaxed\">\n            Ready to bring your vision to life? I'm here to help you create amazing web experiences. \n            Let's discuss your project requirements.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Form & Info */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n                  Contact Information\n                </h2>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <Mail className=\"h-6 w-6 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">Email</h3>\n                      <a \n                        href={`mailto:${profile?.email}`}\n                        className=\"text-blue-600 hover:text-blue-700\"\n                      >\n                        {profile?.email}\n                      </a>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        I'll respond within 24 hours\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <Phone className=\"h-6 w-6 text-green-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">Phone</h3>\n                      <a \n                        href={`tel:${profile?.phone}`}\n                        className=\"text-green-600 hover:text-green-700\"\n                      >\n                        {profile?.phone}\n                      </a>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Available 9 AM - 6 PM IST\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                      <MapPin className=\"h-6 w-6 text-purple-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">Location</h3>\n                      <p className=\"text-gray-600\">{profile?.address}</p>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Serving clients worldwide\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Quick Contact */}\n              <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n                <CardContent className=\"p-6 text-center space-y-4\">\n                  <MessageCircle className=\"h-12 w-12 mx-auto\" />\n                  <h3 className=\"text-xl font-semibold\">Quick Response on WhatsApp</h3>\n                  <p className=\"text-green-100\">\n                    Get instant replies to your queries\n                  </p>\n                  <Button \n                    onClick={handleWhatsAppClick}\n                    variant=\"secondary\"\n                    className=\"w-full\"\n                  >\n                    Chat on WhatsApp\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Response Time */}\n              <Card>\n                <CardContent className=\"p-6 space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Clock className=\"h-5 w-5 text-blue-600\" />\n                    <h3 className=\"font-semibold text-gray-900\">Response Times</h3>\n                  </div>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">WhatsApp</span>\n                      <span className=\"text-green-600 font-medium\">Within 2 hours</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Email</span>\n                      <span className=\"text-blue-600 font-medium\">Within 24 hours</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Phone</span>\n                      <span className=\"text-purple-600 font-medium\">Business hours</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Contact Form */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardContent className=\"p-8\">\n                  <div className=\"mb-6\">\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      Project Inquiry Form\n                    </h2>\n                    <p className=\"text-gray-600\">\n                      Fill out the form below and I'll get back to you with a detailed proposal.\n                    </p>\n                  </div>\n\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Full Name *</Label>\n                        <Input\n                          id=\"name\"\n                          name=\"name\"\n                          value={formData.name}\n                          onChange={handleInputChange}\n                          placeholder=\"Your full name\"\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email Address *</Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={handleInputChange}\n                          placeholder=\"your@email.com\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Phone Number</Label>\n                        <Input\n                          id=\"phone\"\n                          name=\"phone\"\n                          value={formData.phone}\n                          onChange={handleInputChange}\n                          placeholder=\"+91 98765 43210\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"projectType\">Project Type *</Label>\n                        <select\n                          id=\"projectType\"\n                          name=\"projectType\"\n                          value={formData.projectType}\n                          onChange={handleInputChange}\n                          className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                          required\n                        >\n                          <option value=\"\">Select project type</option>\n                          {projectTypes.map((type) => (\n                            <option key={type} value={type}>{type}</option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"budget\">Budget Range</Label>\n                        <select\n                          id=\"budget\"\n                          name=\"budget\"\n                          value={formData.budget}\n                          onChange={handleInputChange}\n                          className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        >\n                          <option value=\"\">Select budget range</option>\n                          {budgetRanges.map((range) => (\n                            <option key={range} value={range}>{range}</option>\n                          ))}\n                        </select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"timeline\">Timeline</Label>\n                        <select\n                          id=\"timeline\"\n                          name=\"timeline\"\n                          value={formData.timeline}\n                          onChange={handleInputChange}\n                          className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        >\n                          <option value=\"\">Select timeline</option>\n                          {timelines.map((time) => (\n                            <option key={time} value={time}>{time}</option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"message\">Project Details *</Label>\n                      <Textarea\n                        id=\"message\"\n                        name=\"message\"\n                        value={formData.message}\n                        onChange={handleInputChange}\n                        placeholder=\"Please describe your project requirements, goals, and any specific features you need...\"\n                        rows={6}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"flex flex-col sm:flex-row gap-4\">\n                      <Button \n                        type=\"submit\" \n                        className=\"flex-1\" \n                        disabled={isSubmitting}\n                      >\n                        {isSubmitting ? (\n                          <>\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                            Sending...\n                          </>\n                        ) : (\n                          <>\n                            <Send className=\"mr-2 h-4 w-4\" />\n                            Send Message\n                          </>\n                        )}\n                      </Button>\n                      <Button \n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={handleWhatsAppClick}\n                        className=\"flex-1\"\n                      >\n                        <MessageCircle className=\"mr-2 h-4 w-4\" />\n                        WhatsApp Instead\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Frequently Asked Questions\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <Card>\n              <CardContent className=\"p-6 space-y-3\">\n                <h3 className=\"font-semibold text-gray-900\">How long does a project take?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Project timelines vary based on complexity. Simple websites take 1-2 weeks, \n                  while complex applications can take 1-3 months.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 space-y-3\">\n                <h3 className=\"font-semibold text-gray-900\">Do you provide ongoing support?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Yes! I provide 30 days of free support after project completion, \n                  and ongoing maintenance packages are available.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 space-y-3\">\n                <h3 className=\"font-semibold text-gray-900\">What's included in the project cost?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  All costs include design, development, testing, deployment, \n                  and 30 days of support. Hosting is additional.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 space-y-3\">\n                <h3 className=\"font-semibold text-gray-900\">Can you work with my existing team?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Absolutely! I collaborate well with designers, marketers, \n                  and other developers to deliver the best results.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Process Overview */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              What Happens Next?\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-blue-600 text-white rounded-full mx-auto flex items-center justify-center text-xl font-bold\">\n                1\n              </div>\n              <h3 className=\"font-semibold text-gray-900\">Initial Contact</h3>\n              <p className=\"text-gray-600 text-sm\">\n                You send your project details and I respond within 24 hours.\n              </p>\n            </div>\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-purple-600 text-white rounded-full mx-auto flex items-center justify-center text-xl font-bold\">\n                2\n              </div>\n              <h3 className=\"font-semibold text-gray-900\">Discovery Call</h3>\n              <p className=\"text-gray-600 text-sm\">\n                We discuss requirements, timeline, and budget in detail.\n              </p>\n            </div>\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-green-600 text-white rounded-full mx-auto flex items-center justify-center text-xl font-bold\">\n                3\n              </div>\n              <h3 className=\"font-semibold text-gray-900\">Proposal & Agreement</h3>\n              <p className=\"text-gray-600 text-sm\">\n                You receive a detailed proposal and we finalize the agreement.\n              </p>\n            </div>\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-orange-600 text-white rounded-full mx-auto flex items-center justify-center text-xl font-bold\">\n                4\n              </div>\n              <h3 className=\"font-semibold text-gray-900\">Project Kickoff</h3>\n              <p className=\"text-gray-600 text-sm\">\n                We start working on your project with regular updates.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Contact;","size_bytes":20041},"frontend/src/pages/Home.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Badge } from '../components/ui/badge';\nimport { ArrowRight, Star, Globe, Layout, Palette, Code, PenTool, TrendingUp, Users, CheckCircle, Award, Target, ExternalLink } from 'lucide-react';\nimport axios from 'axios';\nimport { useSiteSettings } from '../context/SiteSettingsContext';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const { siteSettings, getHeroImageUrl, getThemeColors } = useSiteSettings();\n  const [services, setServices] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [testimonials, setTestimonials] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeFilter, setActiveFilter] = useState('All');\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const [servicesRes, projectsRes, testimonialsRes] = await Promise.all([\n        axios.get(`${API}/services`),\n        axios.get(`${API}/projects`),\n        axios.get(`${API}/testimonials`)\n      ]);\n      \n      setServices(servicesRes.data);\n      setProjects(projectsRes.data);\n      setTestimonials(testimonialsRes.data);\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Hero Section - Let's Solutions */}\n      <section className=\"py-16 px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-start\">\n            {/* Left Content */}\n            <div className=\"space-y-8\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <h1 className=\"text-lg text-gray-600 font-medium\">\n                    👋 Hello, I'm {siteSettings?.site_title || 'Kuldeep Parjapati'}\n                  </h1>\n                  \n                  <h2 \n                    className=\"text-6xl lg:text-7xl font-bold text-black leading-tight\"\n                    style={{ \n                      color: getThemeColors().primary\n                    }}\n                  >\n                    I Create<br />\n                    <span style={{ color: getThemeColors().secondary }}>Digital Solutions</span><br />\n                    That Convert\n                  </h2>\n                  \n                  <p className=\"text-gray-600 text-lg leading-relaxed max-w-lg\">\n                    {siteSettings?.site_description || 'I design modern websites that convert visitors into customers'}\n                  </p>\n                </div>\n                \n                <div className=\"pt-4\">\n                  <Button \n                    size=\"lg\" \n                    className=\"bg-black hover:bg-gray-800 text-white px-8 py-3\"\n                    onClick={() => navigate('/contact')}\n                  >\n                    Get Started\n                  </Button>\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-3 gap-8 pt-8\">\n                <div>\n                  <div className=\"text-3xl font-bold text-black\">50+</div>\n                  <div className=\"text-sm text-gray-500 mt-1\">Projects</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold text-black\">95%</div>\n                  <div className=\"text-sm text-gray-500 mt-1\">Satisfaction</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold text-black\">3+</div>\n                  <div className=\"text-sm text-gray-500 mt-1\">Years</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Content - Profile Card */}\n            <div className=\"bg-gray-50 rounded-2xl p-8 relative\">\n              <div className=\"text-center space-y-6\">\n                {/* Enhanced 3D MMB Logo */}\n                <div className=\"relative w-32 h-32 mx-auto\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full animate-pulse shadow-2xl\"></div>\n                  <div className=\"absolute inset-2 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-4xl font-bold transform hover:scale-110 transition-transform duration-300 shadow-inner\">\n                    MMB\n                  </div>\n                  {/* Floating elements */}\n                  <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-yellow-400 rounded-full animate-bounce delay-100\"></div>\n                  <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-green-400 rounded-full animate-bounce delay-300\"></div>\n                  <div className=\"absolute top-1/2 -left-4 w-3 h-3 bg-pink-400 rounded-full animate-ping delay-500\"></div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <h3 className=\"text-2xl font-bold text-black\">Kuldeep Parjapati</h3>\n                  <p className=\"text-gray-600 font-medium\">Modern Web Solutions Expert</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* About Me Section */}\n      <section className=\"py-16 px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16\">\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"text-5xl font-bold text-black mb-6\">About Me</h2>\n                <p className=\"text-gray-600 text-lg leading-relaxed\">\n                  I'm a passionate web developer and designer with expertise in creating \n                  stunning, responsive websites that engage users and drive results. \n                  My focus is on combining creativity with functionality to deliver \n                  exceptional digital experiences.\n                </p>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-gray-700\">Full-Stack Web Development</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-gray-700\">Responsive Design & UX/UI</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-gray-700\">E-commerce & WordPress Development</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-gray-700\">SEO & Performance Optimization</span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"text-center p-6 bg-white rounded-lg shadow-sm\">\n                  <div className=\"text-3xl font-bold text-blue-600\">15+</div>\n                  <div className=\"text-sm text-gray-600\">Projects</div>\n                </div>\n                <div className=\"text-center p-6 bg-white rounded-lg shadow-sm\">\n                  <div className=\"text-3xl font-bold text-purple-600\">12+</div>\n                  <div className=\"text-sm text-gray-600\">Clients</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Technical Skills */}\n            <div className=\"space-y-8\">\n              <h3 className=\"text-3xl font-bold text-black\">Technical Skills</h3>\n              <div className=\"space-y-6\">\n                {[\n                  { name: 'React & Next.js', level: 95 },\n                  { name: 'Node.js & Express', level: 90 },\n                  { name: 'MongoDB & Firebase', level: 85 },\n                  { name: 'WordPress Development', level: 92 },\n                  { name: 'UI/UX Design', level: 88 },\n                  { name: 'SEO Optimization', level: 85 }\n                ].map((skill, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-700 font-medium\">{skill.name}</span>\n                      <span className=\"text-gray-500 text-sm\">{skill.level}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${skill.level}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* My Services Section */}\n      <section className=\"py-16 px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-5xl font-bold text-black mb-6\">My Services</h2>\n            <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n              I offer comprehensive web development and design services to help your business grow online\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.slice(0, 6).map((service, index) => {\n              const icons = {\n                Globe, Layout, Palette, Code, PenTool, TrendingUp\n              };\n              const IconComponent = icons[service.icon] || Globe;\n              \n              return (\n                <Card key={service.id} className=\"group hover:shadow-xl transition-all duration-300 border-0 shadow-lg\">\n                  <CardContent className=\"p-8 space-y-6\">\n                    <div className=\"w-16 h-16 bg-blue-50 rounded-xl flex items-center justify-center group-hover:bg-blue-600 transition-colors\">\n                      <IconComponent className=\"h-8 w-8 text-blue-600 group-hover:text-white transition-colors\" />\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <h3 className=\"text-xl font-semibold text-black\">{service.title}</h3>\n                      <p className=\"text-gray-600 leading-relaxed text-sm\">{service.description}</p>\n                    </div>\n\n                    <div className=\"pt-4 border-t border-gray-100\">\n                      <div className=\"text-lg font-bold text-blue-600 mb-4\">{service.price}</div>\n                      <Button \n                      className=\"w-full bg-black hover:bg-gray-800 text-sm\"\n                      onClick={() => navigate('/services')}\n                    >\n                        Learn More\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Ready to Start Your Project */}\n      <section className=\"py-12 px-6 lg:px-8 bg-black text-white\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Ready to Start Your Project?</h2>\n          <p className=\"text-gray-300 mb-6\">\n            Let's discuss how I can help bring your vision to life with modern web solutions\n          </p>\n          <Button \n            className=\"bg-white text-black hover:bg-gray-100 px-8\"\n            onClick={() => navigate('/contact')}\n          >\n            Let's Work Together\n          </Button>\n        </div>\n      </section>\n\n      {/* My Portfolio Section */}\n      <section className=\"py-16 px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-5xl font-bold text-black mb-6\">My Portfolio</h2>\n            <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n              Here are some of my recent work and successful projects in creating \n              digital solutions and web experiences\n            </p>\n          </div>\n\n          {/* Filter Buttons */}\n          <div className=\"flex justify-center mb-12\">\n            <div className=\"flex space-x-2 bg-white rounded-lg p-2 shadow-sm\">\n              {['All', 'E-commerce', 'Websites', 'Web Apps', 'UI Design'].map((filter) => (\n                <button\n                  key={filter}\n                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                    activeFilter === filter ? 'bg-black text-white' : 'text-gray-600 hover:bg-gray-100'\n                  }`}\n                  onClick={() => setActiveFilter(filter)}\n                >\n                  {filter}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {projects.slice(0, 6).map((project, index) => (\n              <Card key={project.id} className=\"group overflow-hidden hover:shadow-xl transition-all duration-300\">\n                <div className=\"aspect-video overflow-hidden\">\n                  <img \n                    src={project.image} \n                    alt={project.title}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                </div>\n                <CardContent className=\"p-6 space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant=\"outline\" className=\"text-xs\">{project.category}</Badge>\n                      <button \n                        onClick={() => window.open(project.live_url, '_blank')}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                      >\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-black\">{project.title}</h3>\n                    <p className=\"text-gray-600 text-sm\">{project.description}</p>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {project.technologies.slice(0, 3).map((tech, techIndex) => (\n                      <span key={techIndex} className=\"text-xs bg-gray-100 px-2 py-1 rounded\">\n                        {tech}\n                      </span>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button \n              variant=\"outline\" \n              className=\"border-black text-black hover:bg-black hover:text-white\"\n              onClick={() => navigate('/portfolio')}\n            >\n              View All Projects\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Client Testimonials */}\n      <section className=\"py-16 px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-5xl font-bold text-black mb-6\">Client Testimonials</h2>\n            <p className=\"text-gray-600 text-lg\">\n              Don't just take my word for it. Here's what my clients say about working with me.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {testimonials.slice(0, 3).map((testimonial) => (\n              <Card key={testimonial.id} className=\"p-6 shadow-lg border-0\">\n                <CardContent className=\"p-0 space-y-4\">\n                  <div className=\"flex items-center space-x-1\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                    ))}\n                  </div>\n                  <p className=\"text-gray-600 italic text-sm leading-relaxed\">\n                    \"{testimonial.text}\"\n                  </p>\n                  <div className=\"flex items-center space-x-3 pt-4 border-t border-gray-100\">\n                    <img \n                      src={testimonial.image} \n                      alt={testimonial.name}\n                      className=\"w-10 h-10 rounded-full object-cover\"\n                    />\n                    <div>\n                      <div className=\"font-semibold text-black text-sm\">{testimonial.name}</div>\n                      <div className=\"text-xs text-gray-500\">{testimonial.position}</div>\n                      <div className=\"text-xs text-blue-600\">{testimonial.company}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Let's Work Together */}\n      <section className=\"py-16 px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center space-y-8\">\n            <h2 className=\"text-5xl font-bold text-black\">Let's Work Together</h2>\n            <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n              Ready to bring your ideas to life? I'm here to help you create something amazing.\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mt-12\">\n              <div className=\"text-center space-y-4 p-8 bg-gray-50 rounded-lg\">\n                <h3 className=\"text-xl font-semibold text-black\">Get in Touch</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Ready to start a conversation? Let's discuss your project requirements.\n                </p>\n                <Button \n                  className=\"bg-green-600 hover:bg-green-700 text-white px-6\"\n                  onClick={() => navigate('/contact')}\n                >\n                  Get in Touch\n                </Button>\n              </div>\n              \n              <div className=\"text-center space-y-4 p-8 bg-gray-50 rounded-lg\">\n                <h3 className=\"text-xl font-semibold text-black\">Start Your Project</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Have a specific project in mind? Let's create something amazing together.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  className=\"border-black text-black hover:bg-black hover:text-white px-6\"\n                  onClick={() => window.location.href = 'mailto:contact@mmb.com'}\n                >\n                  Get Started Email\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Home;","size_bytes":19571},"frontend/src/pages/Portfolio.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Badge } from '../components/ui/badge';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { ExternalLink, Github, Filter } from 'lucide-react';\nimport axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst Portfolio = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState('All');\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const fetchProjects = async () => {\n    try {\n      const response = await axios.get(`${API}/projects`);\n      setProjects(response.data);\n    } catch (error) {\n      console.error('Failed to fetch projects:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const categories = ['All', ...new Set(projects.map(project => project.category))];\n  \n  const filteredProjects = selectedCategory === 'All' \n    ? projects \n    : projects.filter(project => project.category === selectedCategory);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-purple-50\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <Badge variant=\"outline\">My Portfolio</Badge>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900\">\n            Showcasing My Recent Work\n          </h1>\n          <p className=\"text-xl text-gray-600 leading-relaxed\">\n            A collection of successful projects that demonstrate my expertise in web development, \n            design, and digital solutions.\n          </p>\n        </div>\n      </section>\n\n      {/* Filter Section */}\n      <section className=\"py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"flex items-center space-x-2 bg-white rounded-lg p-2 shadow-md\">\n              <Filter className=\"h-4 w-4 text-gray-500\" />\n              <span className=\"text-sm text-gray-600\">Filter by:</span>\n              <div className=\"flex space-x-1\">\n                {categories.map((category) => (\n                  <button\n                    key={category}\n                    onClick={() => setSelectedCategory(category)}\n                    className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                      selectedCategory === category\n                        ? 'bg-blue-600 text-white'\n                        : 'text-gray-600 hover:bg-gray-100'\n                    }`}\n                  >\n                    {category}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center mb-8\">\n            <p className=\"text-gray-600\">\n              Showing {filteredProjects.length} project{filteredProjects.length !== 1 ? 's' : ''} \n              {selectedCategory !== 'All' && ` in ${selectedCategory}`}\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Projects Grid */}\n      <section className=\"py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {filteredProjects.map((project) => (\n              <Card key={project.id} className=\"group overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-2\">\n                <div className=\"aspect-video overflow-hidden\">\n                  <img \n                    src={project.image} \n                    alt={project.title}\n                    className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n                  />\n                </div>\n                <CardContent className=\"p-6 space-y-4\">\n                  <div className=\"flex justify-between items-start\">\n                    <Badge variant=\"outline\">{project.category}</Badge>\n                    <div className=\"flex space-x-2\">\n                      <a \n                        href={project.live_url} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"p-2 bg-gray-100 hover:bg-blue-100 rounded-full transition-colors\"\n                      >\n                        <ExternalLink className=\"h-4 w-4 text-gray-600 hover:text-blue-600\" />\n                      </a>\n                      <button \n                        onClick={() => window.open(project.github_url || '#', '_blank')}\n                        className=\"p-2 bg-gray-100 hover:bg-purple-100 rounded-full transition-colors\"\n                      >\n                        <Github className=\"h-4 w-4 text-gray-600 hover:text-purple-600\" />\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h3 className=\"text-xl font-semibold text-gray-900 group-hover:text-blue-600 transition-colors\">\n                      {project.title}\n                    </h3>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      {project.description}\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      {project.technologies.map((tech, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {tech}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-1\">\n                      {project.tags.map((tag, index) => (\n                        <span key={index} className=\"text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded\">\n                          #{tag}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button \n                    asChild \n                    className=\"w-full group-hover:bg-blue-700\"\n                  >\n                    <a href={project.live_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                      View Live Project\n                      <ExternalLink className=\"ml-2 h-4 w-4\" />\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Project Statistics\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-md\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">{projects.length}</div>\n              <div className=\"text-gray-600\">Total Projects</div>\n            </div>\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-md\">\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\">{categories.length - 1}</div>\n              <div className=\"text-gray-600\">Categories</div>\n            </div>\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-md\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">100%</div>\n              <div className=\"text-gray-600\">Success Rate</div>\n            </div>\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-md\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">12+</div>\n              <div className=\"text-gray-600\">Happy Clients</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Technologies Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Technologies I Work With\n            </h2>\n            <p className=\"text-gray-600 text-lg\">\n              Modern tools and frameworks for building exceptional web experiences\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n            {['React', 'Next.js', 'Node.js', 'MongoDB', 'WordPress', 'Tailwind CSS', 'JavaScript', 'TypeScript', 'PHP', 'MySQL', 'Firebase', 'Stripe'].map((tech, index) => (\n              <div key={index} className=\"text-center p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow\">\n                <div className=\"text-sm font-medium text-gray-900\">{tech}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold\">\n            Have a Project in Mind?\n          </h2>\n          <p className=\"text-xl text-blue-100\">\n            Let's create something amazing together. Get in touch to discuss your requirements.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild size=\"lg\" variant=\"secondary\">\n              <a href=\"/contact\">Start Your Project</a>\n            </Button>\n            <Button asChild size=\"lg\" variant=\"outline\">\n              <a href=\"/services\">View Services</a>\n            </Button>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Portfolio;","size_bytes":10315},"frontend/src/pages/PrivacyPolicy.jsx":{"content":"import React from 'react';\nimport { ArrowLeft } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '../components/ui/button';\nimport { useProfile } from '../context/ProfileContext';\n\nconst PrivacyPolicy = () => {\n  const navigate = useNavigate();\n  const { profile, loading } = useProfile();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <div className=\"bg-gray-50 border-b\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"py-6\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate('/')}\n              className=\"mb-4\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Privacy Policy</h1>\n            <p className=\"text-gray-600 mt-2\">Last updated: January 2024</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"prose prose-lg max-w-none\">\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Introduction</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              At MMB (Modern Web Solutions), we are committed to protecting your privacy and ensuring the security of your personal information. This Privacy Policy explains how we collect, use, and safeguard your information when you visit our website or use our services.\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Information We Collect</h2>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Personal Information</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We may collect personal information such as:\n                </p>\n                <ul className=\"list-disc pl-6 mt-2 text-gray-700\">\n                  <li>Name and contact information (email, phone number)</li>\n                  <li>Business information (company name, project requirements)</li>\n                  <li>Communication preferences</li>\n                  <li>Any other information you voluntarily provide</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Technical Information</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We automatically collect certain technical information including:\n                </p>\n                <ul className=\"list-disc pl-6 mt-2 text-gray-700\">\n                  <li>IP address and browser information</li>\n                  <li>Device type and operating system</li>\n                  <li>Website usage data and analytics</li>\n                  <li>Cookies and similar tracking technologies</li>\n                </ul>\n              </div>\n            </div>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">How We Use Your Information</h2>\n            <p className=\"text-gray-700 leading-relaxed mb-4\">\n              We use the collected information for the following purposes:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>Providing and improving our web development services</li>\n              <li>Communicating with you about projects and inquiries</li>\n              <li>Sending relevant updates and marketing communications (with consent)</li>\n              <li>Analyzing website usage to enhance user experience</li>\n              <li>Ensuring security and preventing fraud</li>\n              <li>Complying with legal obligations</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Information Sharing</h2>\n            <p className=\"text-gray-700 leading-relaxed mb-4\">\n              We do not sell, trade, or rent your personal information to third parties. We may share your information only in the following circumstances:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>With your explicit consent</li>\n              <li>To comply with legal requirements or court orders</li>\n              <li>To protect our rights, property, or safety</li>\n              <li>With trusted service providers who assist in our operations (under strict confidentiality agreements)</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Data Security</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              We implement appropriate technical and organizational measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction. However, no method of transmission over the internet is 100% secure, and we cannot guarantee absolute security.\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Your Rights</h2>\n            <p className=\"text-gray-700 leading-relaxed mb-4\">\n              You have the following rights regarding your personal information:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>Access to your personal data</li>\n              <li>Correction of inaccurate information</li>\n              <li>Deletion of your personal data</li>\n              <li>Restriction of processing</li>\n              <li>Data portability</li>\n              <li>Objection to processing</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Cookies</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              Our website uses cookies to enhance your browsing experience and analyze website traffic. You can control cookie settings through your browser preferences. Disabling cookies may affect some website functionality.\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Updates to This Policy</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the updated policy on our website with a new effective date.\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Contact Us</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              If you have any questions about this Privacy Policy or our data practices, please contact us at:\n            </p>\n            {loading ? (\n              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"animate-pulse space-y-2\">\n                  <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n                  <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n                <p className=\"text-gray-800 font-medium\">{profile?.name || 'MMB'} - Modern Web Solutions</p>\n                <p className=\"text-gray-700\">Email: {profile?.email || 'hello@mmb.dev'}</p>\n                <p className=\"text-gray-700\">Phone: {profile?.phone || '+91 98765 43210'}</p>\n                {profile?.address && (\n                  <p className=\"text-gray-700\">Address: {profile.address}</p>\n                )}\n              </div>\n            )}\n          </section>\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrivacyPolicy;","size_bytes":8247},"frontend/src/pages/Services.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Badge } from '../components/ui/badge';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Link } from 'react-router-dom';\nimport { CheckCircle, Globe, Layout, Palette, Code, PenTool, TrendingUp, ArrowRight } from 'lucide-react';\nimport axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst Services = () => {\n  const [services, setServices] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchServices();\n  }, []);\n\n  const fetchServices = async () => {\n    try {\n      const response = await axios.get(`${API}/services`);\n      setServices(response.data);\n    } catch (error) {\n      console.error('Failed to fetch services:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getIcon = (iconName) => {\n    const icons = {\n      Globe, Layout, Palette, Code, PenTool, TrendingUp\n    };\n    return icons[iconName] || Globe;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  const processSteps = [\n    {\n      step: \"01\",\n      title: \"Discovery & Planning\",\n      description: \"Understanding your requirements, goals, and target audience to create a comprehensive project plan.\"\n    },\n    {\n      step: \"02\", \n      title: \"Design & Wireframes\",\n      description: \"Creating wireframes and visual designs that align with your brand and user experience goals.\"\n    },\n    {\n      step: \"03\",\n      title: \"Development & Testing\",\n      description: \"Building your solution with clean, efficient code and thorough testing across devices and browsers.\"\n    },\n    {\n      step: \"04\",\n      title: \"Launch & Support\",\n      description: \"Deploying your project and providing ongoing support to ensure optimal performance.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-purple-50\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <Badge variant=\"outline\">My Services</Badge>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900\">\n            Professional Web Development & Design Services\n          </h1>\n          <p className=\"text-xl text-gray-600 leading-relaxed\">\n            Comprehensive digital solutions to help your business grow online with modern, \n            responsive websites and applications.\n          </p>\n        </div>\n      </section>\n\n      {/* Services Grid */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service) => {\n              const IconComponent = getIcon(service.icon);\n              return (\n                <Card key={service.id} className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-2\">\n                  <CardContent className=\"p-8 space-y-6\">\n                    <div className=\"w-16 h-16 bg-blue-100 rounded-lg flex items-center justify-center group-hover:bg-blue-600 transition-colors\">\n                      <IconComponent className=\"h-8 w-8 text-blue-600 group-hover:text-white transition-colors\" />\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <h3 className=\"text-2xl font-semibold text-gray-900\">{service.title}</h3>\n                      <p className=\"text-gray-600 leading-relaxed\">{service.description}</p>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-2xl font-bold text-blue-600\">{service.price}</span>\n                        <Badge variant=\"outline\">{service.duration}</Badge>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold text-gray-900\">What's Included:</h4>\n                        <ul className=\"space-y-1\">\n                          {service.features.map((feature, index) => (\n                            <li key={index} className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                              <span>{feature}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <Button asChild className=\"w-full group-hover:bg-blue-700\">\n                        <Link to=\"/contact\">\n                          Get Started\n                          <ArrowRight className=\"ml-2 h-4 w-4\" />\n                        </Link>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <Badge variant=\"outline\">My Process</Badge>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              How I Work\n            </h2>\n            <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n              A proven process that ensures quality results and client satisfaction from start to finish\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {processSteps.map((process, index) => (\n              <Card key={index} className=\"relative\">\n                <CardContent className=\"p-6 text-center space-y-4\">\n                  <div className=\"w-16 h-16 bg-blue-600 text-white rounded-full mx-auto flex items-center justify-center text-xl font-bold\">\n                    {process.step}\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">{process.title}</h3>\n                  <p className=\"text-gray-600\">{process.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Me Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <Badge variant=\"outline\">Why Choose MMB</Badge>\n                <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n                  Your Success Is My Priority\n                </h2>\n                <p className=\"text-gray-600 text-lg leading-relaxed\">\n                  With years of experience and a passion for creating exceptional digital experiences, \n                  I'm committed to delivering solutions that drive real results for your business.\n                </p>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <CheckCircle className=\"h-6 w-6 text-green-500 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Modern Technologies</h3>\n                    <p className=\"text-gray-600\">Using latest frameworks and tools for optimal performance</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\">\n                  <CheckCircle className=\"h-6 w-6 text-green-500 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Responsive Design</h3>\n                    <p className=\"text-gray-600\">Perfect experience across all devices and screen sizes</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\">\n                  <CheckCircle className=\"h-6 w-6 text-green-500 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">SEO Optimized</h3>\n                    <p className=\"text-gray-600\">Built-in SEO best practices for better search rankings</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\">\n                  <CheckCircle className=\"h-6 w-6 text-green-500 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Ongoing Support</h3>\n                    <p className=\"text-gray-600\">Continuous support and maintenance after project completion</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"aspect-square rounded-2xl bg-gradient-to-br from-blue-100 to-purple-100 p-8 flex items-center justify-center\">\n                <div className=\"text-center space-y-6\">\n                  <div className=\"w-32 h-32 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mx-auto flex items-center justify-center text-white text-4xl font-bold\">\n                    MMB\n                  </div>\n                  <div className=\"text-lg font-semibold text-gray-800\">\n                    Professional Web Development Services\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center p-3 bg-white rounded-lg shadow\">\n                      <div className=\"text-2xl font-bold text-blue-600\">15+</div>\n                      <div className=\"text-xs text-gray-600\">Projects</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-white rounded-lg shadow\">\n                      <div className=\"text-2xl font-bold text-purple-600\">12+</div>\n                      <div className=\"text-xs text-gray-600\">Clients</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-white rounded-lg shadow\">\n                      <div className=\"text-2xl font-bold text-green-600\">3+</div>\n                      <div className=\"text-xs text-gray-600\">Years</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold\">\n            Ready to Start Your Project?\n          </h2>\n          <p className=\"text-xl text-blue-100\">\n            Let's discuss your requirements and create something amazing together\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild size=\"lg\" variant=\"secondary\">\n              <Link to=\"/contact\">Get Free Quote</Link>\n            </Button>\n            <Button asChild size=\"lg\" variant=\"outline\">\n              <Link to=\"/portfolio\">View Portfolio</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Services;","size_bytes":11609},"frontend/src/pages/TermsOfService.jsx":{"content":"import React from 'react';\nimport { ArrowLeft } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '../components/ui/button';\nimport { useProfile } from '../context/ProfileContext';\n\nconst TermsOfService = () => {\n  const navigate = useNavigate();\n  const { profile, loading } = useProfile();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <div className=\"bg-gray-50 border-b\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"py-6\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate('/')}\n              className=\"mb-4\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Terms of Service</h1>\n            <p className=\"text-gray-600 mt-2\">Last updated: January 2024</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"prose prose-lg max-w-none\">\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Agreement to Terms</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              By accessing and using the services provided by MMB (Modern Web Solutions), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Services Provided</h2>\n            <p className=\"text-gray-700 leading-relaxed mb-4\">\n              MMB provides professional web development services including:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>Website Development and Design</li>\n              <li>Landing Page Creation</li>\n              <li>UX/UI Design Services</li>\n              <li>WordPress Development</li>\n              <li>Web Application Development</li>\n              <li>Maintenance and Support Services</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Project Terms</h2>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Project Scope</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  All projects will be clearly defined in a separate project agreement or proposal. The scope includes specific deliverables, timeline, and requirements as agreed upon by both parties.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Payment Terms</h3>\n                <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n                  <li>50% advance payment required to start the project</li>\n                  <li>Remaining 50% due upon project completion</li>\n                  <li>All payments are non-refundable once work has commenced</li>\n                  <li>Late payment may result in project delays or suspension</li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Timeline</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Project timelines are estimates and may vary based on project complexity, client feedback response time, and scope changes. We strive to meet all agreed deadlines but cannot guarantee delivery dates.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Client Responsibilities</h2>\n            <p className=\"text-gray-700 leading-relaxed mb-4\">\n              The client agrees to:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>Provide all necessary content, materials, and information in a timely manner</li>\n              <li>Respond to requests for feedback and approval within agreed timeframes</li>\n              <li>Make payments according to the agreed schedule</li>\n              <li>Provide accurate and complete project requirements</li>\n              <li>Test and approve all deliverables before final acceptance</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Intellectual Property</h2>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Client Content</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  All content, text, images, and materials provided by the client remain the property of the client. The client grants MMB a license to use these materials for the duration of the project.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Developed Work</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Upon full payment, the client will own the final delivered website/application. MMB retains the right to use the project for portfolio purposes and case studies.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Revisions and Changes</h2>\n            <p className=\"text-gray-700 leading-relaxed mb-4\">\n              Project packages include a specified number of revisions:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>Minor revisions: Text changes, color adjustments, small layout modifications</li>\n              <li>Major revisions: Significant design changes, additional features, scope expansion</li>\n              <li>Additional revisions beyond the agreed limit will incur extra charges</li>\n              <li>Scope changes may affect timeline and pricing</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Warranties and Disclaimers</h2>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Service Warranty</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We warrant that our services will be performed in a professional manner. We provide 30 days of free bug fixes after project completion for issues related to our development work.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-medium text-gray-800 mb-2\">Limitation of Liability</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  MMB's liability is limited to the amount paid for the specific service. We are not liable for any indirect, incidental, or consequential damages.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Cancellation and Refunds</h2>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>Client may cancel the project with 48 hours written notice</li>\n              <li>Cancellation fees may apply based on work completed</li>\n              <li>Advance payments are non-refundable once work has commenced</li>\n              <li>Completed work and files will be delivered upon cancellation payment settlement</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Maintenance and Support</h2>\n            <p className=\"text-gray-700 leading-relaxed mb-4\">\n              Post-launch support options include:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-2\">\n              <li>30 days free bug fixes and minor adjustments</li>\n              <li>Ongoing maintenance packages available separately</li>\n              <li>Content updates and feature additions quoted separately</li>\n              <li>Emergency support available with additional charges</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Termination</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              Either party may terminate this agreement with written notice. Upon termination, the client will pay for all work completed to date, and MMB will deliver all completed work files.\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Contact Information</h2>\n            <p className=\"text-gray-700 leading-relaxed\">\n              For any questions regarding these Terms of Service, please contact us at:\n            </p>\n            {loading ? (\n              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"animate-pulse space-y-2\">\n                  <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n                  <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n                <p className=\"text-gray-800 font-medium\">{profile?.name || 'MMB'} - Modern Web Solutions</p>\n                <p className=\"text-gray-700\">Email: {profile?.email || 'hello@mmb.dev'}</p>\n                <p className=\"text-gray-700\">Phone: {profile?.phone || '+91 98765 43210'}</p>\n                {profile?.address && (\n                  <p className=\"text-gray-700\">Address: {profile.address}</p>\n                )}\n              </div>\n            )}\n          </section>\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TermsOfService;","size_bytes":10562},"frontend/src/pages/Testimonials.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Badge } from '../components/ui/badge';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Star, Quote } from 'lucide-react';\nimport axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst Testimonials = () => {\n  const [testimonials, setTestimonials] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchTestimonials();\n  }, []);\n\n  const fetchTestimonials = async () => {\n    try {\n      const response = await axios.get(`${API}/testimonials`);\n      setTestimonials(response.data);\n    } catch (error) {\n      console.error('Failed to fetch testimonials:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  const additionalTestimonials = [\n    {\n      id: 4,\n      name: \"Kavita Patel\",\n      position: \"HR Manager\",\n      company: \"Hisar Job Place\",\n      rating: 5,\n      text: \"MMB created an excellent job portal for us. The platform is user-friendly and has helped connect many job seekers with employers. Great work!\",\n      image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face\"\n    },\n    {\n      id: 5,\n      name: \"Sanjay Verma\",\n      position: \"Business Owner\",\n      company: \"Local Business\",\n      rating: 5,\n      text: \"Professional service, excellent communication, and delivered exactly what we needed. MMB's expertise in web development is outstanding.\",\n      image: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face\"\n    },\n    {\n      id: 6,\n      name: \"Meera Singh\",\n      position: \"Marketing Director\",\n      company: \"Tech Startup\",\n      rating: 5,\n      text: \"The landing page MMB designed for our campaign increased our conversion rate significantly. Highly recommend for any web project!\",\n      image: \"https://images.unsplash.com/photo-1487412720507-e7ab37603c6f?w=150&h=150&fit=crop&crop=face\"\n    }\n  ];\n\n  const allTestimonials = [...testimonials, ...additionalTestimonials];\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-purple-50\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <Badge variant=\"outline\">Client Testimonials</Badge>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900\">\n            What My Clients Say\n          </h1>\n          <p className=\"text-xl text-gray-600 leading-relaxed\">\n            Real feedback from satisfied clients who trusted me with their web development projects.\n          </p>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">100%</div>\n              <div className=\"text-gray-600\">Client Satisfaction</div>\n            </div>\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg\">\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\">5.0</div>\n              <div className=\"text-gray-600 flex items-center justify-center\">\n                <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400 mr-1\" />\n                Average Rating\n              </div>\n            </div>\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">12+</div>\n              <div className=\"text-gray-600\">Happy Clients</div>\n            </div>\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">15+</div>\n              <div className=\"text-gray-600\">Projects Delivered</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Grid */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial) => (\n              <Card key={testimonial.id} className=\"relative hover:shadow-xl transition-all duration-300 hover:-translate-y-1\">\n                <CardContent className=\"p-6 space-y-4\">\n                  {/* Quote Icon */}\n                  <div className=\"absolute top-4 right-4 opacity-10\">\n                    <Quote className=\"h-12 w-12 text-blue-600\" />\n                  </div>\n                  \n                  {/* Rating */}\n                  <div className=\"flex items-center space-x-1\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                    ))}\n                  </div>\n\n                  {/* Testimonial Text */}\n                  <p className=\"text-gray-600 italic text-sm leading-relaxed\">\n                    \"{testimonial.text}\"\n                  </p>\n\n                  {/* Client Info */}\n                  <div className=\"flex items-center space-x-3 pt-4 border-t border-gray-100\">\n                    <img \n                      src={testimonial.image} \n                      alt={testimonial.name}\n                      className=\"w-12 h-12 rounded-full object-cover\"\n                    />\n                    <div>\n                      <div className=\"font-semibold text-gray-900\">{testimonial.name}</div>\n                      <div className=\"text-sm text-gray-600\">{testimonial.position}</div>\n                      <div className=\"text-xs text-blue-600\">{testimonial.company}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Testimonial */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n            <CardContent className=\"p-12 text-center space-y-6\">\n              <Quote className=\"h-16 w-16 mx-auto opacity-50\" />\n              <blockquote className=\"text-2xl md:text-3xl font-light leading-relaxed\">\n                \"{testimonials[0]?.text || 'MMB creates exceptional digital experiences that truly represent your brand and connect with your audience.'}\"\n              </blockquote>\n              <div className=\"space-y-2\">\n                <div className=\"font-semibold text-xl\">{testimonials[0]?.name || 'Client Name'}</div>\n                <div className=\"text-blue-100\">{testimonials[0]?.position || 'Position'}, {testimonials[0]?.company || 'Company'}</div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Client Logos Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Trusted by Amazing Clients\n            </h2>\n            <p className=\"text-gray-600 text-lg\">\n              Working with businesses across various industries\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-8\">\n            {['Skillpay', 'Durga Chemical', 'Hisar Jobs', 'NeoGenie', 'Pensiya Farm', 'Krishi Ledger'].map((client, index) => (\n              <div key={index} className=\"text-center p-6 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-blue-100 to-purple-100 rounded-full mx-auto flex items-center justify-center mb-3\">\n                  <span className=\"text-blue-600 font-bold text-sm\">\n                    {client.split(' ').map(word => word[0]).join('')}\n                  </span>\n                </div>\n                <div className=\"text-sm font-medium text-gray-900\">{client}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Recognition */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n              Why Clients Choose MMB\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full mx-auto flex items-center justify-center\">\n                <span className=\"text-2xl\">🎯</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Clear Communication</h3>\n              <p className=\"text-gray-600\">\n                Regular updates and transparent communication throughout the project lifecycle.\n              </p>\n            </div>\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full mx-auto flex items-center justify-center\">\n                <span className=\"text-2xl\">⚡</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Timely Delivery</h3>\n              <p className=\"text-gray-600\">\n                Committed to meeting deadlines without compromising on quality.\n              </p>\n            </div>\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full mx-auto flex items-center justify-center\">\n                <span className=\"text-2xl\">🏆</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Quality Results</h3>\n              <p className=\"text-gray-600\">\n                High-quality code, beautiful design, and exceptional user experience.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold\">\n            Ready to Join My Happy Clients?\n          </h2>\n          <p className=\"text-xl text-blue-100\">\n            Let's discuss your project and create something amazing together\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <a \n              href=\"/contact\"\n              className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors\"\n            >\n              Start Your Project\n            </a>\n            <a \n              href=\"/portfolio\"\n              className=\"border border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors\"\n            >\n              View My Work\n            </a>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Testimonials;","size_bytes":11668},"frontend/src/utils/errorHandler.js":{"content":"import { toast } from '../hooks/use-toast';\n\n// Error types\nexport const ERROR_TYPES = {\n  NETWORK: 'NETWORK_ERROR',\n  VALIDATION: 'VALIDATION_ERROR',\n  AUTHENTICATION: 'AUTH_ERROR',\n  AUTHORIZATION: 'AUTHORIZATION_ERROR',\n  SERVER: 'SERVER_ERROR',\n  NOT_FOUND: 'NOT_FOUND',\n  TIMEOUT: 'TIMEOUT_ERROR',\n  UNKNOWN: 'UNKNOWN_ERROR'\n};\n\n// Error messages\nconst ERROR_MESSAGES = {\n  [ERROR_TYPES.NETWORK]: 'Network connection failed. Please check your internet connection.',\n  [ERROR_TYPES.VALIDATION]: 'Please check your input and try again.',\n  [ERROR_TYPES.AUTHENTICATION]: 'Authentication failed. Please login again.',\n  [ERROR_TYPES.AUTHORIZATION]: 'You do not have permission to perform this action.',\n  [ERROR_TYPES.SERVER]: 'Server error occurred. Please try again later.',\n  [ERROR_TYPES.NOT_FOUND]: 'The requested resource was not found.',\n  [ERROR_TYPES.TIMEOUT]: 'Request timed out. Please try again.',\n  [ERROR_TYPES.UNKNOWN]: 'An unexpected error occurred. Please try again.'\n};\n\n// Determine error type from axios error\nexport const getErrorType = (error) => {\n  if (!error.response) {\n    // Network error or request timeout\n    if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n      return ERROR_TYPES.TIMEOUT;\n    }\n    return ERROR_TYPES.NETWORK;\n  }\n\n  const status = error.response.status;\n  \n  switch (status) {\n    case 400:\n      return ERROR_TYPES.VALIDATION;\n    case 401:\n      return ERROR_TYPES.AUTHENTICATION;\n    case 403:\n      return ERROR_TYPES.AUTHORIZATION;\n    case 404:\n      return ERROR_TYPES.NOT_FOUND;\n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return ERROR_TYPES.SERVER;\n    default:\n      return ERROR_TYPES.UNKNOWN;\n  }\n};\n\n// Get user-friendly error message\nexport const getErrorMessage = (error, customMessage = null) => {\n  if (customMessage) return customMessage;\n  \n  // Check if error has a custom message from backend\n  if (error.response?.data?.detail) {\n    return error.response.data.detail;\n  }\n  \n  if (error.response?.data?.message) {\n    return error.response.data.message;\n  }\n\n  const errorType = getErrorType(error);\n  return ERROR_MESSAGES[errorType];\n};\n\n// Main error handler function\nexport const handleError = (error, options = {}) => {\n  const {\n    title = 'Error',\n    customMessage = null,\n    showToast = true,\n    onRetry = null,\n    context = 'general'\n  } = options;\n\n  const errorType = getErrorType(error);\n  const message = getErrorMessage(error, customMessage);\n\n  // Log error for debugging\n  console.error(`[${context.toUpperCase()}] ${errorType}:`, {\n    message,\n    error: error.response?.data || error.message,\n    status: error.response?.status,\n    url: error.config?.url\n  });\n\n  // Show toast notification\n  if (showToast) {\n    const toastConfig = {\n      title,\n      description: message,\n      variant: 'destructive'\n    };\n\n    // Add retry action if provided\n    if (onRetry && (errorType === ERROR_TYPES.NETWORK || errorType === ERROR_TYPES.TIMEOUT)) {\n      toastConfig.action = {\n        altText: 'Retry',\n        onClick: onRetry\n      };\n    }\n\n    toast(toastConfig);\n  }\n\n  return {\n    type: errorType,\n    message,\n    status: error.response?.status,\n    shouldRetry: errorType === ERROR_TYPES.NETWORK || errorType === ERROR_TYPES.TIMEOUT\n  };\n};\n\n// Retry mechanism with exponential backoff\nexport const retryWithBackoff = async (fn, maxRetries = 3, baseDelay = 1000) => {\n  let lastError;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      \n      if (attempt === maxRetries) {\n        throw error;\n      }\n      \n      const errorType = getErrorType(error);\n      if (errorType !== ERROR_TYPES.NETWORK && errorType !== ERROR_TYPES.TIMEOUT) {\n        throw error; // Don't retry non-network errors\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, 8s...\n      const delay = baseDelay * Math.pow(2, attempt);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw lastError;\n};\n\n// Validation error handler\nexport const handleValidationErrors = (errors, setFieldErrors) => {\n  if (Array.isArray(errors)) {\n    const fieldErrors = {};\n    errors.forEach(error => {\n      if (error.field) {\n        fieldErrors[error.field] = error.message;\n      }\n    });\n    setFieldErrors(fieldErrors);\n  } else if (typeof errors === 'object') {\n    setFieldErrors(errors);\n  }\n};\n\n// Success handler\nexport const handleSuccess = (message, options = {}) => {\n  const {\n    title = 'Success',\n    showToast = true,\n    duration = 3000\n  } = options;\n\n  if (showToast) {\n    toast({\n      title,\n      description: message,\n      variant: 'default',\n      duration\n    });\n  }\n};\n\n// Loading state manager\nexport class LoadingManager {\n  constructor() {\n    this.loadingStates = new Map();\n    this.listeners = new Set();\n  }\n\n  setLoading(key, isLoading) {\n    this.loadingStates.set(key, isLoading);\n    this.notifyListeners();\n  }\n\n  isLoading(key) {\n    return this.loadingStates.get(key) || false;\n  }\n\n  isAnyLoading() {\n    return Array.from(this.loadingStates.values()).some(loading => loading);\n  }\n\n  subscribe(listener) {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.loadingStates));\n  }\n\n  clear() {\n    this.loadingStates.clear();\n    this.notifyListeners();\n  }\n}\n\n// Global loading manager instance\nexport const globalLoadingManager = new LoadingManager();\n\n// Hook for using loading manager\nexport const useLoadingManager = () => {\n  const [loadingStates, setLoadingStates] = React.useState(new Map());\n\n  React.useEffect(() => {\n    const unsubscribe = globalLoadingManager.subscribe(setLoadingStates);\n    return unsubscribe;\n  }, []);\n\n  return {\n    setLoading: globalLoadingManager.setLoading.bind(globalLoadingManager),\n    isLoading: globalLoadingManager.isLoading.bind(globalLoadingManager),\n    isAnyLoading: globalLoadingManager.isAnyLoading.bind(globalLoadingManager),\n    loadingStates\n  };\n};\n\n// API wrapper with error handling\nexport const apiCall = async (apiFunction, options = {}) => {\n  const {\n    loadingKey = null,\n    retries = 0,\n    onSuccess = null,\n    onError = null,\n    context = 'api'\n  } = options;\n\n  try {\n    if (loadingKey) {\n      globalLoadingManager.setLoading(loadingKey, true);\n    }\n\n    let result;\n    if (retries > 0) {\n      result = await retryWithBackoff(apiFunction, retries);\n    } else {\n      result = await apiFunction();\n    }\n\n    if (onSuccess) {\n      onSuccess(result);\n    }\n\n    return result;\n  } catch (error) {\n    const errorInfo = handleError(error, {\n      showToast: !onError, // Don't show toast if custom error handler provided\n      context\n    });\n\n    if (onError) {\n      onError(error, errorInfo);\n    }\n\n    throw error;\n  } finally {\n    if (loadingKey) {\n      globalLoadingManager.setLoading(loadingKey, false);\n    }\n  }\n};\n\nexport default {\n  handleError,\n  handleSuccess,\n  handleValidationErrors,\n  retryWithBackoff,\n  apiCall,\n  LoadingManager,\n  globalLoadingManager,\n  ERROR_TYPES,\n  getErrorType,\n  getErrorMessage\n};","size_bytes":7202},"frontend/src/components/Admin/AdminLayout.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport AdminSidebar from './AdminSidebar';\nimport { Button } from '../ui/button';\nimport { \n  LogOut, \n  User, \n  Bell, \n  Search,\n  Menu,\n  Sun,\n  Moon,\n  Settings\n} from 'lucide-react';\nimport { Badge } from '../ui/badge';\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '../ui/dropdown-menu';\nimport { Input } from '../ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\nimport { useToast } from '../../hooks/use-toast';\nimport axios from 'axios';\n\nconst AdminLayout = () => {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch real notifications from backend\n  const fetchNotifications = async () => {\n    try {\n      const token = localStorage.getItem('admin_token');\n      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000'}/api/admin/notifications`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setNotifications(response.data || []);\n    } catch (error) {\n      console.error('Failed to fetch notifications:', error);\n      // Fallback to mock data\n      setNotifications([\n        { id: 1, title: 'New contact inquiry', time: '2 min ago', unread: true, type: 'contact' },\n        { id: 2, title: 'Blog post published', time: '1 hour ago', unread: true, type: 'blog' },\n        { id: 3, title: 'System backup completed', time: '3 hours ago', unread: false, type: 'system' }\n      ]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchNotifications();\n    // Set up polling for real-time updates\n    const interval = setInterval(fetchNotifications, 30000); // Every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been logged out of the admin panel.\",\n      });\n      navigate('/admin/login');\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"There was an error logging you out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    toast({\n      title: `${isDarkMode ? 'Light' : 'Dark'} mode enabled`,\n      description: `Switched to ${isDarkMode ? 'light' : 'dark'} theme.`,\n    });\n  };\n\n  const unreadCount = notifications.filter(n => n.unread).length;\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark' : ''} bg-gray-50 dark:bg-gray-900`}>\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <AdminSidebar />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col min-h-screen\">\n          {/* Header */}\n          <header className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4 sticky top-0 z-40\">\n            <div className=\"flex items-center justify-between\">\n              {/* Search Bar */}\n              <div className=\"flex items-center space-x-4 flex-1 max-w-md\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search anything...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10 bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400\"\n                  />\n                </div>\n              </div>\n\n              {/* Right Side Actions */}\n              <div className=\"flex items-center space-x-4\">\n                {/* Theme Toggle */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={toggleTheme}\n                  className=\"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\"\n                >\n                  {isDarkMode ? (\n                    <Sun className=\"h-5 w-5\" />\n                  ) : (\n                    <Moon className=\"h-5 w-5\" />\n                  )}\n                </Button>\n\n                {/* Notifications */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"relative text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\">\n                      <Bell className=\"h-5 w-5\" />\n                      {unreadCount > 0 && (\n                        <Badge className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs bg-red-500 hover:bg-red-600\">\n                          {unreadCount}\n                        </Badge>\n                      )}\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-80\">\n                    <DropdownMenuLabel className=\"flex items-center justify-between\">\n                      <span>Notifications</span>\n                      {unreadCount > 0 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {unreadCount} new\n                        </Badge>\n                      )}\n                    </DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <div className=\"max-h-64 overflow-y-auto\">\n                      {notifications.map((notification) => (\n                        <DropdownMenuItem key={notification.id} className=\"flex flex-col items-start p-3 cursor-pointer\">\n                          <div className=\"flex items-center justify-between w-full\">\n                            <span className={`text-sm ${notification.unread ? 'font-semibold' : 'font-normal'}`}>\n                              {notification.title}\n                            </span>\n                            {notification.unread && (\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                            )}\n                          </div>\n                          <span className=\"text-xs text-gray-500 mt-1\">{notification.time}</span>\n                        </DropdownMenuItem>\n                      ))}\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem className=\"text-center text-blue-600 dark:text-blue-400 cursor-pointer\">\n                      View all notifications\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n\n                {/* User Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2 hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 rounded-lg\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={user?.avatar} alt={user?.name} />\n                        <AvatarFallback className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n                          {user?.name?.charAt(0) || 'A'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"hidden md:flex flex-col items-start\">\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {user?.name || 'Admin'}\n                        </span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {user?.role || 'Administrator'}\n                        </span>\n                      </div>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuLabel>\n                      <div className=\"flex flex-col space-y-1\">\n                        <p className=\"text-sm font-medium\">{user?.name || 'Admin User'}</p>\n                        <p className=\"text-xs text-gray-500\">{user?.email || 'admin@example.com'}</p>\n                      </div>\n                    </DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => navigate('/admin/profile')} className=\"cursor-pointer\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      <span>Profile Settings</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem className=\"cursor-pointer\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      <span>Preferences</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer text-red-600 dark:text-red-400\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Log out</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          </header>\n\n          {/* Main Content Area */}\n          <main className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n            <div className=\"max-w-7xl mx-auto\">\n              <Outlet />\n            </div>\n          </main>\n\n          {/* Footer */}\n          <footer className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 px-6 py-4\">\n            <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n              <div className=\"flex items-center space-x-4\">\n                <span>© 2024 MMB Admin Panel</span>\n                <span>•</span>\n                <span>Version 2.0.0</span>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <span>System Status: </span>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-green-600 dark:text-green-400\">Online</span>\n                </div>\n              </div>\n            </div>\n          </footer>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLayout;","size_bytes":10880},"frontend/src/components/Admin/AdminSidebar.jsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { \n  LayoutDashboard, \n  Briefcase, \n  FolderOpen, \n  MessageSquare, \n  FileText, \n  Mail,\n  User,\n  Image,\n  Settings,\n  ChevronLeft,\n  ChevronRight,\n  Home,\n  BarChart3,\n  Gift,\n  Palette,\n  Inbox\n} from 'lucide-react';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../ui/tooltip';\n\nconst AdminSidebar = () => {\n  const location = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const menuSections = [\n    {\n      title: 'Overview',\n      items: [\n        {\n          title: 'Dashboard',\n          path: '/admin/dashboard',\n          icon: LayoutDashboard,\n          badge: null\n        }\n      ]\n    },\n    {\n      title: 'Content Management',\n      items: [\n        {\n          title: 'Projects',\n          path: '/admin/projects',\n          icon: FolderOpen,\n          badge: null\n        },\n        {\n          title: 'Services',\n          path: '/admin/services',\n          icon: Briefcase,\n          badge: null\n        },\n        {\n          title: 'Blog Posts',\n          path: '/admin/blogs',\n          icon: FileText,\n          badge: 'Draft'\n        },\n        {\n          title: 'Testimonials',\n          path: '/admin/testimonials',\n          icon: MessageSquare,\n          badge: null\n        }\n      ]\n    },\n    {\n      title: 'Media & Branding',\n      items: [\n        {\n          title: 'Media Manager',\n          path: '/admin/media',\n          icon: Image,\n          badge: null\n        },\n        {\n          title: 'Appearance',\n          path: '/admin/appearance',\n          icon: Palette,\n          badge: null\n        }\n      ]\n    },\n    {\n      title: 'Marketing',\n      items: [\n        {\n          title: 'Offers & Promotions',\n          path: '/admin/offers',\n          icon: Gift,\n          badge: null\n        }\n      ]\n    },\n    {\n      title: 'Communications',\n      items: [\n        {\n          title: 'Contact Inquiries',\n          path: '/admin/contacts',\n          icon: Inbox,\n          badge: '3'\n        }\n      ]\n    },\n    {\n      title: 'Account',\n      items: [\n        {\n          title: 'Profile Settings',\n          path: '/admin/profile',\n          icon: User,\n          badge: null\n        }\n      ]\n    }\n  ];\n\n  const isActive = (path) => location.pathname === path;\n\n  const SidebarItem = ({ item }) => {\n    const IconComponent = item.icon;\n    const active = isActive(item.path);\n\n    const content = (\n      <Link\n        to={item.path}\n        className={`group flex items-center space-x-3 px-3 py-3 rounded-xl transition-all duration-200 relative ${\n          active\n            ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg'\n            : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n        }`}\n      >\n        {active && (\n          <div className=\"absolute left-0 top-0 bottom-0 w-1 bg-white rounded-r-full\"></div>\n        )}\n        <div className={`flex items-center justify-center w-6 h-6 ${\n          active ? 'text-white' : 'text-gray-400 group-hover:text-white'\n        }`}>\n          <IconComponent className=\"h-5 w-5\" />\n        </div>\n        {!isCollapsed && (\n          <>\n            <span className=\"font-medium truncate\">{item.title}</span>\n            {item.badge && (\n              <Badge \n                variant={active ? \"secondary\" : \"outline\"} \n                className={`ml-auto text-xs px-2 py-0 ${\n                  active ? 'bg-white/20 text-white border-white/30' : 'bg-gray-700 text-gray-300 border-gray-600'\n                }`}\n              >\n                {item.badge}\n              </Badge>\n            )}\n          </>\n        )}\n      </Link>\n    );\n\n    if (isCollapsed) {\n      return (\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              {content}\n            </TooltipTrigger>\n            <TooltipContent side=\"right\" className=\"ml-2\">\n              <p>{item.title}</p>\n              {item.badge && <Badge variant=\"outline\" className=\"ml-2\">{item.badge}</Badge>}\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      );\n    }\n\n    return content;\n  };\n\n  return (\n    <div className={`${isCollapsed ? 'w-20' : 'w-64'} bg-gray-900 text-white min-h-screen transition-all duration-300 flex flex-col relative`}>\n      {/* Toggle Button */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"absolute -right-3 top-8 z-10 w-6 h-6 rounded-full bg-gray-800 hover:bg-gray-700 border border-gray-600 p-0\"\n        onClick={() => setIsCollapsed(!isCollapsed)}\n      >\n        {isCollapsed ? (\n          <ChevronRight className=\"h-3 w-3 text-gray-300\" />\n        ) : (\n          <ChevronLeft className=\"h-3 w-3 text-gray-300\" />\n        )}\n      </Button>\n\n      {/* Logo */}\n      <div className={`${isCollapsed ? 'p-4' : 'p-6'} border-b border-gray-700 transition-all duration-300`}>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n            <span className=\"text-white font-bold text-lg\">M</span>\n          </div>\n          {!isCollapsed && (\n            <div className=\"flex flex-col\">\n              <span className=\"text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                MMB Admin\n              </span>\n              <span className=\"text-xs text-gray-400\">Management Panel</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className={`flex-1 ${isCollapsed ? 'py-4 px-2' : 'py-6 px-4'} transition-all duration-300 overflow-y-auto`}>\n        <div className=\"space-y-1\">\n          {menuSections.map((section, sectionIndex) => (\n            <div key={section.title}>\n              {!isCollapsed && (\n                <div className=\"px-3 mb-3 mt-6 first:mt-0\">\n                  <h3 className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider\">\n                    {section.title}\n                  </h3>\n                </div>\n              )}\n              \n              <div className=\"space-y-1\">\n                {section.items.map((item) => (\n                  <SidebarItem key={item.path} item={item} />\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </nav>\n\n      {/* Footer */}\n      <div className={`${isCollapsed ? 'p-2' : 'p-4'} border-t border-gray-700 transition-all duration-300`}>\n        {!isCollapsed ? (\n          <div className=\"bg-gradient-to-r from-blue-600/20 to-purple-600/20 rounded-lg p-4 border border-blue-500/20\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <BarChart3 className=\"h-5 w-5 text-blue-400\" />\n              <span className=\"text-sm font-medium text-white\">System Status</span>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-gray-300\">Performance</span>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-xs text-green-400\">Excellent</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-gray-300\">Storage</span>\n                <span className=\"text-xs text-blue-400\">68% used</span>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex justify-center\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600/20 to-purple-600/20 rounded-lg flex items-center justify-center border border-blue-500/20\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminSidebar;","size_bytes":8147},"frontend/src/components/Common/WhatsAppButton.jsx":{"content":"import React from 'react';\nimport { MessageCircle } from 'lucide-react';\nimport { useProfile } from '../../context/ProfileContext';\n\nconst WhatsAppButton = () => {\n  const { profile, loading } = useProfile();\n  \n  const handleWhatsAppClick = () => {\n    if (!profile?.whatsapp) return;\n    \n    const message = \"Hi! I'm interested in your web development services. Can we discuss my project?\";\n    const whatsappUrl = `https://wa.me/${profile.whatsapp.replace(/[^0-9]/g, '')}?text=${encodeURIComponent(message)}`;\n    window.open(whatsappUrl, '_blank');\n  };\n\n  // Don't render if profile is loading or whatsapp number is not available\n  if (loading || !profile?.whatsapp) {\n    return null;\n  }\n\n  return (\n    <button\n      onClick={handleWhatsAppClick}\n      className=\"fixed bottom-6 right-6 z-50 bg-green-500 hover:bg-green-600 text-white p-4 rounded-full shadow-lg transition-all duration-300 hover:scale-110 animate-pulse\"\n      aria-label=\"Contact on WhatsApp\"\n    >\n      <MessageCircle className=\"h-6 w-6\" />\n    </button>\n  );\n};\n\nexport default WhatsAppButton;","size_bytes":1072},"frontend/src/components/Layout/Footer.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Mail, Phone, MapPin, Linkedin, Github, Twitter, Instagram } from 'lucide-react';\nimport { useProfile } from '../../context/ProfileContext';\nimport { useSiteSettings } from '../../context/SiteSettingsContext';\n\nconst Footer = () => {\n  const { profile, loading } = useProfile();\n  const navigate = useNavigate();\n  const { siteSettings, getSocialLinkUrl, getLogoUrl, getThemeColors } = useSiteSettings();\n\n  const handleNavigation = (path) => {\n    navigate(path);\n    setTimeout(() => {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }, 100);\n  };\n\n  return (\n    <footer className=\"bg-gray-900 text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Dynamic Brand Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              {getLogoUrl() ? (\n                /* Custom Uploaded Logo */\n                <div className=\"relative\">\n                  <div className=\"w-10 h-10 relative\">\n                    <img \n                      src={getLogoUrl()} \n                      alt={siteSettings?.site_title || 'Logo'}\n                      className=\"w-10 h-10 object-contain rounded-lg\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                /* Default 3D Footer Logo with Dynamic Colors */\n                <div className=\"relative\">\n                  <div className=\"w-10 h-10 relative\">\n                    {/* Shadow */}\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-gray-600 to-gray-800 rounded-lg transform translate-x-0.5 translate-y-0.5 opacity-40\"></div>\n                    \n                    {/* Main Logo with Dynamic Colors */}\n                    <div \n                      className=\"relative w-10 h-10 rounded-lg flex items-center justify-center\"\n                      style={{ \n                        background: `linear-gradient(135deg, ${getThemeColors().primary}, ${getThemeColors().secondary})`\n                      }}\n                    >\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-lg\"></div>\n                      <span className=\"relative text-white font-bold text-sm drop-shadow-lg\">\n                        {siteSettings?.site_title?.substring(0, 3).toUpperCase() || 'MMB'}\n                      </span>\n                      <div className=\"absolute top-0.5 left-0.5 w-4 h-1.5 bg-white/30 rounded-full blur-sm\"></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex flex-col\">\n                <span className=\"text-xl font-bold text-white\">\n                  {siteSettings?.site_title || 'MMB'}\n                </span>\n                <span className=\"text-xs text-gray-400 -mt-1\">\n                  {siteSettings?.header_tagline || 'Web Solutions'}\n                </span>\n              </div>\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              {siteSettings?.site_description || 'Creating modern web solutions that convert visitors into customers. Professional website development and digital services.'}\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href={getSocialLinkUrl('linkedin')} \n                className=\"text-gray-400 hover:text-blue-400 transition-colors\"\n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </a>\n              <a \n                href={getSocialLinkUrl('github')} \n                className=\"text-gray-400 hover:text-blue-400 transition-colors\"\n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n              >\n                <Github className=\"h-5 w-5\" />\n              </a>\n              <a \n                href={getSocialLinkUrl('twitter')} \n                className=\"text-gray-400 hover:text-blue-400 transition-colors\"\n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a \n                href={getSocialLinkUrl('instagram')} \n                className=\"text-gray-400 hover:text-blue-400 transition-colors\"\n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n              >\n                <Instagram className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2\">\n              {['Home', 'About', 'Services', 'Portfolio'].map((item) => (\n                <li key={item}>\n                  <button \n                    onClick={() => handleNavigation(item === 'Home' ? '/' : `/${item.toLowerCase()}`)}\n                    className=\"text-gray-400 hover:text-white transition-colors text-sm text-left\"\n                  >\n                    {item}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Services */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Services</h3>\n            <ul className=\"space-y-2\">\n              {['Website Development', 'Landing Page Design', 'UX/UI Design', 'WordPress Development'].map((service) => (\n                <li key={service}>\n                  <button \n                    onClick={() => handleNavigation('/services')}\n                    className=\"text-gray-400 hover:text-white transition-colors text-sm text-left\"\n                  >\n                    {service}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Contact Info</h3>\n            {loading ? (\n              <div className=\"space-y-3\">\n                <div className=\"animate-pulse h-4 bg-gray-700 rounded w-3/4\"></div>\n                <div className=\"animate-pulse h-4 bg-gray-700 rounded w-2/3\"></div>\n                <div className=\"animate-pulse h-4 bg-gray-700 rounded w-1/2\"></div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <Mail className=\"h-4 w-4 text-blue-400\" />\n                  <a \n                    href={`mailto:${profile?.email}`}\n                    className=\"text-gray-400 hover:text-white transition-colors text-sm\"\n                  >\n                    {profile?.email}\n                  </a>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Phone className=\"h-4 w-4 text-blue-400\" />\n                  <a \n                    href={`tel:${profile?.phone}`}\n                    className=\"text-gray-400 hover:text-white transition-colors text-sm\"\n                  >\n                    {profile?.phone}\n                  </a>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <MapPin className=\"h-4 w-4 text-blue-400\" />\n                  <span className=\"text-gray-400 text-sm\">{profile?.address}</span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-gray-800 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"flex flex-col items-center md:items-start\">\n            <p className=\"text-gray-400 text-sm\">\n              {siteSettings?.footer_text || `© 2024 ${siteSettings?.site_title || 'MMB'}. All rights reserved.`}\n            </p>\n            <p className=\"text-gray-500 text-xs mt-1\">\n              Developed by <span className=\"text-blue-400 font-medium\">Kuldeep Parjapati</span>\n            </p>\n          </div>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <button onClick={() => handleNavigation('/privacy')} className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n              Privacy Policy\n            </button>\n            <button onClick={() => handleNavigation('/terms')} className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n              Terms of Service\n            </button>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":8704},"frontend/src/components/Layout/Header.jsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { Button } from '../ui/button';\nimport { Menu, X } from 'lucide-react';\nimport OfferBanner from '../Common/OfferBanner';\nimport { useSiteSettings } from '../../context/SiteSettingsContext';\n\nconst Header = () => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { siteSettings, getNavLinks, getLogoUrl, getThemeColors } = useSiteSettings();\n\n  const navItems = getNavLinks();\n\n  const isActive = (path) => location.pathname === path;\n\n  const handleNavigation = (path) => {\n    navigate(path);\n    // Scroll to top after navigation\n    setTimeout(() => {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }, 100);\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <>\n      {/* Offer Banner */}\n      <OfferBanner />\n      \n      <header className=\"sticky top-0 z-50 bg-white/95 backdrop-blur-sm border-b border-gray-100\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Dynamic Logo */}\n          <Link to=\"/\" className=\"flex items-center space-x-3\">\n            {getLogoUrl() ? (\n              /* Custom Uploaded Logo */\n              <div className=\"relative group\">\n                <div className=\"w-12 h-12 relative transform transition-all duration-300 hover:scale-110\">\n                  <img \n                    src={getLogoUrl()} \n                    alt={siteSettings?.site_title || 'Logo'}\n                    className=\"w-12 h-12 object-contain rounded-lg\"\n                  />\n                </div>\n              </div>\n            ) : (\n              /* Default 3D Logo */\n              <div className=\"relative group\">\n                <div className=\"w-12 h-12 relative transform transition-all duration-300 hover:scale-110 hover:rotate-3\">\n                  {/* Shadow Layer */}\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-gray-400 to-gray-600 rounded-xl transform translate-x-1 translate-y-1 opacity-30\"></div>\n                  \n                  {/* Main 3D Logo with Dynamic Colors */}\n                  <div \n                    className=\"relative w-12 h-12 rounded-xl flex items-center justify-center transform transition-all duration-300 hover:shadow-2xl\"\n                    style={{ \n                      background: `linear-gradient(135deg, ${getThemeColors().primary}, ${getThemeColors().secondary})`,\n                      boxShadow: `0 20px 25px -5px ${getThemeColors().primary}25`\n                    }}\n                  >\n                    {/* Inner glow effect */}\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-xl\"></div>\n                    \n                    {/* Dynamic Logo Text */}\n                    <span className=\"relative text-white font-bold text-lg tracking-tight drop-shadow-lg\">\n                      {siteSettings?.site_title?.substring(0, 3).toUpperCase() || 'MMB'}\n                    </span>\n                    \n                    {/* Top highlight */}\n                    <div className=\"absolute top-1 left-1 w-6 h-2 bg-white/30 rounded-full blur-sm\"></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {/* Dynamic Company Name */}\n            <div className=\"flex flex-col\">\n              <span \n                className=\"text-xl font-bold text-transparent bg-clip-text drop-shadow-sm\"\n                style={{ \n                  backgroundImage: `linear-gradient(to right, ${getThemeColors().primary}, ${getThemeColors().secondary})`\n                }}\n              >\n                {siteSettings?.site_title || 'MMB'}\n              </span>\n              <span className=\"text-xs text-gray-500 font-medium -mt-1\">\n                {siteSettings?.header_tagline || 'Web Solutions'}\n              </span>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <button\n                key={item.name}\n                onClick={() => handleNavigation(item.path)}\n                className={`text-sm font-medium transition-colors duration-200 hover:text-blue-600 ${\n                  isActive(item.path) \n                    ? 'text-blue-600 border-b-2 border-blue-600 pb-1' \n                    : 'text-gray-700'\n                }`}\n              >\n                {item.name}\n              </button>\n            ))}\n          </nav>\n\n          {/* CTA Button */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Button onClick={() => handleNavigation('/contact')}>Hire Me</Button>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            className=\"md:hidden p-2\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n          >\n            {isMenuOpen ? (\n              <X className=\"h-6 w-6 text-gray-700\" />\n            ) : (\n              <Menu className=\"h-6 w-6 text-gray-700\" />\n            )}\n          </button>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-gray-100\">\n            <nav className=\"flex flex-col space-y-4\">\n              {navItems.map((item) => (\n                <button\n                  key={item.name}\n                  onClick={() => handleNavigation(item.path)}\n                  className={`text-sm font-medium transition-colors duration-200 hover:text-blue-600 text-left ${\n                    isActive(item.path) ? 'text-blue-600' : 'text-gray-700'\n                  }`}\n                >\n                  {item.name}\n                </button>\n              ))}\n              <Button onClick={() => handleNavigation('/contact')} className=\"w-full mt-4\">\n                Hire Me\n              </Button>\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n    </>\n  );\n};\n\nexport default Header;","size_bytes":6150},"frontend/src/components/ui/accordion.jsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item ref={ref} className={cn(\"border-b\", className)} {...props} />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}>\n      {children}\n      <ChevronDown\n        className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}>\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1619},"frontend/src/components/ui/alert-dialog.jsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref} />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props} />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n    {...props} />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props} />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: \"outline\" }), \"mt-2 sm:mt-0\", className)}\n    {...props} />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3465},"frontend/src/components/ui/alert.jsx":{"content":"import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props} />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props} />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props} />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1339},"frontend/src/components/ui/aspect-ratio.jsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"frontend/src/components/ui/avatar.jsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Avatar = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\", className)}\n    {...props} />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props} />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props} />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1033},"frontend/src/components/ui/badge.jsx":{"content":"import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  ...props\n}) {\n  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":994},"frontend/src/components/ui/breadcrumb.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Breadcrumb = React.forwardRef(\n  ({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />\n)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props} />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props} />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props} />\n  );\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props} />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}>\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2273},"frontend/src/components/ui/button.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    <Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props} />\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1666},"frontend/src/components/ui/calendar.jsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props} />\n  );\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2853},"frontend/src/components/ui/card.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"rounded-xl border bg-card text-card-foreground shadow\", className)}\n    {...props} />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1444},"frontend/src/components/ui/carousel.jsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nconst CarouselContext = React.createContext(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef((\n  {\n    orientation = \"horizontal\",\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n  },\n  ref\n) => {\n  const [carouselRef, api] = useEmblaCarousel({\n    ...opts,\n    axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n  }, plugins)\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback((event) => {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault()\n      scrollPrev()\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault()\n      scrollNext()\n    }\n  }, [scrollPrev, scrollNext])\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return\n    }\n\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    };\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}>\n      <div\n        ref={ref}\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}>\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n})\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props} />\n    </div>\n  );\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props} />\n  );\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\"absolute  h-8 w-8 rounded-full\", orientation === \"horizontal\"\n        ? \"-left-12 top-1/2 -translate-y-1/2\"\n        : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\", className)}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}>\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  );\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\"absolute h-8 w-8 rounded-full\", orientation === \"horizontal\"\n        ? \"-right-12 top-1/2 -translate-y-1/2\"\n        : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\", className)}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}>\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  );\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };\n","size_bytes":4815},"frontend/src/components/ui/checkbox.jsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}>\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":884},"frontend/src/components/ui/collapsible.jsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"frontend/src/components/ui/command.jsx":{"content":"import * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props} />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({\n  children,\n  ...props\n}) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command\n          className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nconst CommandInput = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props} />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props} />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props} />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props} />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />\n  );\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":3897},"frontend/src/components/ui/context-menu.jsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props} />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />\n  );\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":6179},"frontend/src/components/ui/dialog.jsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props} />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}>\n      {children}\n      <DialogPrimitive.Close\n        className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)}\n    {...props} />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3218},"frontend/src/components/ui/drawer.jsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}) => (\n  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props} />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}>\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props} />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}) => (\n  <div className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)} {...props} />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":2349},"frontend/src/components/ui/dropdown-menu.jsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props} />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props} />\n  );\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":6349},"frontend/src/components/ui/form.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Controller, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"../../lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext({})\n\nconst FormField = (\n  {\n    ...props\n  }\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext({})\n\nconst FormItem = React.forwardRef(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props} />\n  );\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props} />\n  );\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props} />\n  );\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}>\n      {body}\n    </p>\n  );\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3125},"frontend/src/components/ui/hover-card.jsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1113},"frontend/src/components/ui/input-otp.jsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\"flex items-center gap-2 has-[:disabled]:opacity-50\", containerClassName)}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props} />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}>\n      {char}\n      {hasFakeCaret && (\n        <div\n          className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  );\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":1813},"frontend/src/components/ui/input.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      type={type}\n      className={cn(\n        \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  );\n})\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":692},"frontend/src/components/ui/label.jsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":529},"frontend/src/components/ui/loading.jsx":{"content":"import React from 'react';\nimport { Loader2, AlertCircle, RefreshCw } from 'lucide-react';\nimport { Button } from './button';\nimport { Card, CardContent } from './card';\n\n// Basic spinner component\nexport const Spinner = ({ size = 'md', className = '' }) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <Loader2 \n      className={`animate-spin ${sizeClasses[size]} ${className}`} \n    />\n  );\n};\n\n// Loading overlay for buttons\nexport const ButtonLoading = ({ children, loading = false, ...props }) => {\n  return (\n    <Button disabled={loading} {...props}>\n      {loading && <Spinner size=\"sm\" className=\"mr-2\" />}\n      {children}\n    </Button>\n  );\n};\n\n// Full page loading component\nexport const PageLoading = ({ \n  message = 'Loading...', \n  size = 'lg',\n  className = '' \n}) => {\n  return (\n    <div className={`flex items-center justify-center min-h-[400px] ${className}`}>\n      <div className=\"text-center\">\n        <Spinner size={size} className=\"mx-auto mb-4 text-blue-600\" />\n        <p className=\"text-gray-600 text-lg\">{message}</p>\n      </div>\n    </div>\n  );\n};\n\n// Card loading skeleton\nexport const CardLoading = ({ className = '' }) => {\n  return (\n    <Card className={className}>\n      <CardContent className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <div className=\"rounded-full bg-gray-200 h-12 w-12\"></div>\n            <div className=\"space-y-2 flex-1\">\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n              <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n            </div>\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"h-3 bg-gray-200 rounded\"></div>\n            <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n            <div className=\"h-3 bg-gray-200 rounded w-4/6\"></div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Table loading skeleton\nexport const TableLoading = ({ rows = 5, columns = 4 }) => {\n  return (\n    <div className=\"animate-pulse\">\n      {/* Header */}\n      <div className=\"flex space-x-4 mb-4 pb-2 border-b\">\n        {Array.from({ length: columns }).map((_, i) => (\n          <div key={i} className=\"h-4 bg-gray-200 rounded flex-1\"></div>\n        ))}\n      </div>\n      \n      {/* Rows */}\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"flex space-x-4 mb-3 py-2\">\n          {Array.from({ length: columns }).map((_, colIndex) => (\n            <div \n              key={colIndex} \n              className={`h-3 bg-gray-200 rounded flex-1 ${\n                colIndex === 0 ? 'w-1/4' : \n                colIndex === columns - 1 ? 'w-1/6' : 'w-1/3'\n              }`}\n            ></div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Stats card loading\nexport const StatsLoading = ({ count = 4 }) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {Array.from({ length: count }).map((_, index) => (\n        <Card key={index}>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"h-5 bg-gray-200 rounded w-1/2\"></div>\n                <div className=\"h-8 w-8 bg-gray-200 rounded\"></div>\n              </div>\n              <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\n// Error state component\nexport const ErrorState = ({ \n  title = 'Something went wrong',\n  message = 'An error occurred while loading the data.',\n  onRetry = null,\n  retryText = 'Try Again',\n  className = ''\n}) => {\n  return (\n    <div className={`flex items-center justify-center min-h-[300px] ${className}`}>\n      <div className=\"text-center max-w-md\">\n        <AlertCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{title}</h3>\n        <p className=\"text-gray-600 mb-6\">{message}</p>\n        {onRetry && (\n          <Button onClick={onRetry} variant=\"outline\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            {retryText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Empty state component\nexport const EmptyState = ({ \n  title = 'No data found',\n  message = 'There is no data to display at the moment.',\n  action = null,\n  icon: Icon = null,\n  className = ''\n}) => {\n  return (\n    <div className={`flex items-center justify-center min-h-[300px] ${className}`}>\n      <div className=\"text-center max-w-md\">\n        {Icon && <Icon className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />}\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{title}</h3>\n        <p className=\"text-gray-600 mb-6\">{message}</p>\n        {action}\n      </div>\n    </div>\n  );\n};\n\n// Loading wrapper component\nexport const LoadingWrapper = ({ \n  loading = false,\n  error = null,\n  empty = false,\n  onRetry = null,\n  loadingComponent = null,\n  errorComponent = null,\n  emptyComponent = null,\n  children\n}) => {\n  if (loading) {\n    return loadingComponent || <PageLoading />;\n  }\n\n  if (error) {\n    return errorComponent || (\n      <ErrorState \n        title=\"Failed to load data\"\n        message={error.message || 'An error occurred while loading the data.'}\n        onRetry={onRetry}\n      />\n    );\n  }\n\n  if (empty) {\n    return emptyComponent || (\n      <EmptyState \n        title=\"No data available\"\n        message=\"There is no data to display at the moment.\"\n      />\n    );\n  }\n\n  return children;\n};\n\n// Progress loading component\nexport const ProgressLoading = ({ \n  progress = 0, \n  message = 'Loading...', \n  className = '' \n}) => {\n  return (\n    <div className={`flex items-center justify-center min-h-[200px] ${className}`}>\n      <div className=\"text-center w-full max-w-md\">\n        <Spinner size=\"lg\" className=\"mx-auto mb-4 text-blue-600\" />\n        <p className=\"text-gray-600 text-lg mb-4\">{message}</p>\n        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n          <div \n            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n            style={{ width: `${Math.min(100, Math.max(0, progress))}%` }}\n          ></div>\n        </div>\n        <p className=\"text-sm text-gray-500 mt-2\">{Math.round(progress)}%</p>\n      </div>\n    </div>\n  );\n};\n\n// Inline loading component for small spaces\nexport const InlineLoading = ({ \n  message = 'Loading...', \n  size = 'sm',\n  className = '' \n}) => {\n  return (\n    <div className={`flex items-center space-x-2 ${className}`}>\n      <Spinner size={size} className=\"text-blue-600\" />\n      <span className=\"text-gray-600 text-sm\">{message}</span>\n    </div>\n  );\n};\n\nexport default {\n  Spinner,\n  ButtonLoading,\n  PageLoading,\n  CardLoading,\n  TableLoading,\n  StatsLoading,\n  ErrorState,\n  EmptyState,\n  LoadingWrapper,\n  ProgressLoading,\n  InlineLoading\n};","size_bytes":7148},"frontend/src/components/ui/menubar.jsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}) {\n  return <MenubarPrimitive.Menu {...props} />;\n}\n\nfunction MenubarGroup({\n  ...props\n}) {\n  return <MenubarPrimitive.Group {...props} />;\n}\n\nfunction MenubarPortal({\n  ...props\n}) {\n  return <MenubarPrimitive.Portal {...props} />;\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}) {\n  return <MenubarPrimitive.RadioGroup {...props} />;\n}\n\nfunction MenubarSub({\n  ...props\n}) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />;\n}\n\nconst Menubar = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props} />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props} />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef((\n  { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n  ref\n) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </MenubarPrimitive.Portal>\n))\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props} />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />\n  );\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":6878},"frontend/src/components/ui/navigation-menu.jsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}>\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}>\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\" />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}>\n    <div\n      className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":4303},"frontend/src/components/ui/pagination.jsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\";\n\nconst Pagination = ({\n  className,\n  ...props\n}) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props} />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props} />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(buttonVariants({\n      variant: isActive ? \"outline\" : \"ghost\",\n      size,\n    }), className)}\n    {...props} />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}>\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}>\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2326},"frontend/src/components/ui/popover.jsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1220},"frontend/src/components/ui/progress.jsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Progress = React.forwardRef(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}>\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":657},"frontend/src/components/ui/radio-group.jsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst RadioGroup = React.forwardRef(({ className, ...props }, ref) => {\n  return (<RadioGroupPrimitive.Root className={cn(\"grid gap-2\", className)} {...props} ref={ref} />);\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}>\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1137},"frontend/src/components/ui/resizable.jsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props} />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}>\n    {withHandle && (\n      <div\n        className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1560},"frontend/src/components/ui/scroll-area.jsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}>\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}>\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1366},"frontend/src/components/ui/select.jsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}>\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}>\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}>\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}>\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\"p-1\", position === \"popper\" &&\n          \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\")}>\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props} />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":4773},"frontend/src/components/ui/separator.jsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Separator = React.forwardRef((\n  { className, orientation = \"horizontal\", decorative = true, ...props },\n  ref\n) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\n      \"shrink-0 bg-border\",\n      orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n      className\n    )}\n    {...props} />\n))\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":604},"frontend/src/components/ui/sheet.jsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref} />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\nconst SheetContent = React.forwardRef(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>\n      <SheetPrimitive.Close\n        className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n    {...props} />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props} />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":3539},"frontend/src/components/ui/skeleton.jsx":{"content":"import { cn } from \"../../lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props} />\n  );\n}\n\nexport { Skeleton }\n","size_bytes":229},"frontend/src/components/ui/slider.jsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Slider = React.forwardRef(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex w-full touch-none select-none items-center\", className)}\n    {...props}>\n    <SliderPrimitive.Track\n      className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb\n      className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":918},"frontend/src/components/ui/sonner.jsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\nconst Toaster = ({\n  ...props\n}) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props} />\n  );\n}\n\nexport { Toaster }\n","size_bytes":783},"frontend/src/components/ui/switch.jsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Switch = React.forwardRef(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}>\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )} />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1029},"frontend/src/components/ui/table.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props} />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props} />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className)}\n    {...props} />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props} />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props} />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props} />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2235},"frontend/src/components/ui/tabs.jsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props} />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props} />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props} />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1533},"frontend/src/components/ui/textarea.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Textarea = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  );\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":589},"frontend/src/components/ui/toast.jsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props} />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props} />\n  );\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props} />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}>\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs\", className)}\n    {...props} />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props} />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\nexport { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };\n","size_bytes":3833},"frontend/src/components/ui/toaster.jsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n","size_bytes":774},"frontend/src/components/ui/toggle-group.jsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\n\nimport { cn } from \"../../lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}>\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(toggleVariants({\n        variant: context.variant || variant,\n        size: context.size || size,\n      }), className)}\n      {...props}>\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1272},"frontend/src/components/ui/toggle.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props} />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1328},"frontend/src/components/ui/tooltip.jsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1131},"frontend/src/pages/Admin/AdminBlogs.jsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Badge } from '../../components/ui/badge';\nimport { Progress } from '../../components/ui/progress';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { useToast } from '../../hooks/use-toast';\nimport { \n  Plus, Edit, Trash2, Eye, Calendar, Search, Filter, \n  BookOpen, FileText, Clock, User, Tag, Image as ImageIcon,\n  Save, X, Bold, Italic, Underline, List, Link2, Code\n} from 'lucide-react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminBlogs = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [filteredBlogs, setFilteredBlogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editBlog, setEditBlog] = useState(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [validationErrors, setValidationErrors] = useState({});\n  const [previewMode, setPreviewMode] = useState(false);\n  const contentRef = useRef(null);\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  const [formData, setFormData] = useState({\n    title: '',\n    excerpt: '',\n    content: '',\n    image: '',\n    category: '',\n    tags: '',\n    author: 'MMB',\n    read_time: '',\n    published: false\n  });\n\n  const [stats, setStats] = useState({\n    total: 0,\n    published: 0,\n    drafts: 0,\n    categories: []\n  });\n\n  useEffect(() => {\n    fetchBlogs();\n  }, []);\n\n  useEffect(() => {\n    filterBlogs();\n  }, [blogs, searchTerm, filterStatus, filterCategory]);\n\n  const fetchBlogs = async () => {\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n      \n      const response = await axios.get(`${API}/admin/blogs`, config);\n      setBlogs(response.data);\n      calculateStats(response.data);\n    } catch (error) {\n      console.error('Fetch blogs error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch blogs\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateStats = (blogsData) => {\n    const published = blogsData.filter(blog => blog.published).length;\n    const categories = [...new Set(blogsData.map(blog => blog.category))];\n    \n    setStats({\n      total: blogsData.length,\n      published,\n      drafts: blogsData.length - published,\n      categories\n    });\n  };\n\n  const filterBlogs = () => {\n    let filtered = blogs;\n\n    if (searchTerm) {\n      filtered = filtered.filter(blog => \n        blog.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        blog.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        blog.category.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        blog.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))\n      );\n    }\n\n    if (filterStatus !== 'all') {\n      filtered = filtered.filter(blog => \n        filterStatus === 'published' ? blog.published : !blog.published\n      );\n    }\n\n    if (filterCategory !== 'all') {\n      filtered = filtered.filter(blog => blog.category === filterCategory);\n    }\n\n    setFilteredBlogs(filtered);\n  };\n\n  const validateForm = () => {\n    const errors = {};\n    \n    if (!formData.title.trim()) {\n      errors.title = 'Title is required';\n    } else if (formData.title.length < 5) {\n      errors.title = 'Title must be at least 5 characters';\n    }\n    \n    if (!formData.excerpt.trim()) {\n      errors.excerpt = 'Excerpt is required';\n    } else if (formData.excerpt.length < 20) {\n      errors.excerpt = 'Excerpt must be at least 20 characters';\n    }\n    \n    if (!formData.content.trim()) {\n      errors.content = 'Content is required';\n    } else if (formData.content.length < 100) {\n      errors.content = 'Content must be at least 100 characters';\n    }\n    \n    if (!formData.image.trim()) {\n      errors.image = 'Featured image URL is required';\n    } else if (!isValidUrl(formData.image)) {\n      errors.image = 'Please enter a valid image URL';\n    }\n    \n    if (!formData.category.trim()) {\n      errors.category = 'Category is required';\n    }\n    \n    if (!formData.tags.trim()) {\n      errors.tags = 'At least one tag is required';\n    }\n    \n    if (!formData.read_time.trim()) {\n      errors.read_time = 'Read time is required';\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const isValidUrl = (string) => {\n    try {\n      new URL(string);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fix the errors in the form\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setSubmitLoading(true);\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n\n      const blogData = {\n        ...formData,\n        tags: formData.tags.split(',').map(t => t.trim()).filter(t => t)\n      };\n\n      if (editBlog) {\n        await axios.put(`${API}/admin/blogs/${editBlog.id}`, blogData, config);\n        toast({\n          title: \"Success\",\n          description: \"Blog post updated successfully\"\n        });\n      } else {\n        await axios.post(`${API}/admin/blogs`, blogData, config);\n        toast({\n          title: \"Success\",\n          description: \"Blog post created successfully\"\n        });\n      }\n\n      await fetchBlogs();\n      resetForm();\n      setIsDialogOpen(false);\n    } catch (error) {\n      console.error('Blog save error:', error);\n      toast({\n        title: \"Error\", \n        description: error.response?.data?.detail || \"Failed to save blog post\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSubmitLoading(false);\n    }\n  };\n\n  const handleEdit = (blog) => {\n    setEditBlog(blog);\n    setFormData({\n      title: blog.title,\n      excerpt: blog.excerpt,\n      content: blog.content,\n      image: blog.image,\n      category: blog.category,\n      tags: blog.tags.join(', '),\n      author: blog.author,\n      read_time: blog.read_time,\n      published: blog.published\n    });\n    setValidationErrors({});\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (blogId) => {\n    if (window.confirm('Are you sure you want to delete this blog post?')) {\n      setLoading(true);\n      try {\n        const config = token ? {\n          headers: { Authorization: `Bearer ${token}` }\n        } : {};\n        \n        await axios.delete(`${API}/admin/blogs/${blogId}`, config);\n        toast({\n          title: \"Success\",\n          description: \"Blog post deleted successfully\"\n        });\n        await fetchBlogs();\n      } catch (error) {\n        console.error('Delete error:', error);\n        toast({\n          title: \"Error\",\n          description: error.response?.data?.detail || \"Failed to delete blog post\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      excerpt: '',\n      content: '',\n      image: '',\n      category: '',\n      tags: '',\n      author: 'MMB',\n      read_time: '',\n      published: false\n    });\n    setEditBlog(null);\n    setValidationErrors({});\n    setPreviewMode(false);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n    \n    // Clear validation error when user starts typing\n    if (validationErrors[name]) {\n      setValidationErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const insertTextAtCursor = (text) => {\n    if (contentRef.current) {\n      const start = contentRef.current.selectionStart;\n      const end = contentRef.current.selectionEnd;\n      const currentContent = formData.content;\n      const newContent = currentContent.substring(0, start) + text + currentContent.substring(end);\n      \n      setFormData(prev => ({ ...prev, content: newContent }));\n      \n      // Set cursor position after inserted text\n      setTimeout(() => {\n        contentRef.current.selectionStart = start + text.length;\n        contentRef.current.selectionEnd = start + text.length;\n        contentRef.current.focus();\n      }, 0);\n    }\n  };\n\n  const formatText = (format) => {\n    const formatMap = {\n      bold: '**text**',\n      italic: '*text*',\n      underline: '<u>text</u>',\n      h2: '<h2>Heading</h2>',\n      h3: '<h3>Subheading</h3>',\n      list: '<ul><li>Item 1</li><li>Item 2</li></ul>',\n      link: '<a href=\"#\">Link Text</a>',\n      code: '<code>code</code>',\n      paragraph: '<p>Paragraph text</p>'\n    };\n    \n    insertTextAtCursor(formatMap[format] || format);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Stats */}\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Blog Posts Management</h1>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Blog Post\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-6xl max-h-[95vh] overflow-y-auto\">\n              <DialogHeader>\n                <div className=\"flex justify-between items-center\">\n                  <DialogTitle>\n                    {editBlog ? 'Edit Blog Post' : 'Add New Blog Post'}\n                  </DialogTitle>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant={previewMode ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setPreviewMode(!previewMode)}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      {previewMode ? 'Edit' : 'Preview'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogHeader>\n              \n              {!previewMode ? (\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"title\">Blog Title *</Label>\n                      <Input\n                        id=\"title\"\n                        name=\"title\"\n                        value={formData.title}\n                        onChange={handleInputChange}\n                        className={validationErrors.title ? 'border-red-500' : ''}\n                        placeholder=\"Enter blog title...\"\n                      />\n                      {validationErrors.title && (\n                        <p className=\"text-red-500 text-sm\">{validationErrors.title}</p>\n                      )}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"category\">Category *</Label>\n                      <Input\n                        id=\"category\"\n                        name=\"category\"\n                        value={formData.category}\n                        onChange={handleInputChange}\n                        className={validationErrors.category ? 'border-red-500' : ''}\n                        placeholder=\"Web Development, AI, etc.\"\n                      />\n                      {validationErrors.category && (\n                        <p className=\"text-red-500 text-sm\">{validationErrors.category}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"excerpt\">Excerpt *</Label>\n                    <Textarea\n                      id=\"excerpt\"\n                      name=\"excerpt\"\n                      value={formData.excerpt}\n                      onChange={handleInputChange}\n                      className={validationErrors.excerpt ? 'border-red-500' : ''}\n                      rows={3}\n                      placeholder=\"Brief description of the blog post (min 20 characters)...\"\n                    />\n                    <div className=\"flex justify-between text-sm text-gray-500\">\n                      <span>{formData.excerpt.length} characters</span>\n                      {validationErrors.excerpt && (\n                        <span className=\"text-red-500\">{validationErrors.excerpt}</span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"content\">Content * (Rich Text Editor)</Label>\n                    \n                    {/* Rich Text Editor Toolbar */}\n                    <div className=\"flex flex-wrap gap-2 p-2 border rounded-t-md bg-gray-50\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('bold')}\n                      >\n                        <Bold className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('italic')}\n                      >\n                        <Italic className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('underline')}\n                      >\n                        <Underline className=\"h-4 w-4\" />\n                      </Button>\n                      <div className=\"border-l mx-2\"></div>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('h2')}\n                      >\n                        H2\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('h3')}\n                      >\n                        H3\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('paragraph')}\n                      >\n                        P\n                      </Button>\n                      <div className=\"border-l mx-2\"></div>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('list')}\n                      >\n                        <List className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('link')}\n                      >\n                        <Link2 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => formatText('code')}\n                      >\n                        <Code className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <Textarea\n                      ref={contentRef}\n                      id=\"content\"\n                      name=\"content\"\n                      value={formData.content}\n                      onChange={handleInputChange}\n                      className={`rounded-t-none ${validationErrors.content ? 'border-red-500' : ''}`}\n                      rows={12}\n                      placeholder=\"Write your blog content here... You can use HTML tags for formatting.\"\n                    />\n                    <div className=\"flex justify-between text-sm text-gray-500\">\n                      <span>{formData.content.length} characters</span>\n                      {validationErrors.content && (\n                        <span className=\"text-red-500\">{validationErrors.content}</span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"image\">Featured Image URL *</Label>\n                    <Input\n                      id=\"image\"\n                      name=\"image\"\n                      value={formData.image}\n                      onChange={handleInputChange}\n                      className={validationErrors.image ? 'border-red-500' : ''}\n                      placeholder=\"https://example.com/image.jpg\"\n                    />\n                    {validationErrors.image && (\n                      <p className=\"text-red-500 text-sm\">{validationErrors.image}</p>\n                    )}\n                    {formData.image && isValidUrl(formData.image) && (\n                      <div className=\"mt-2\">\n                        <img \n                          src={formData.image} \n                          alt=\"Preview\" \n                          className=\"w-32 h-20 object-cover rounded border\"\n                          onError={(e) => {\n                            e.target.style.display = 'none';\n                          }}\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"author\">Author *</Label>\n                      <Input\n                        id=\"author\"\n                        name=\"author\"\n                        value={formData.author}\n                        onChange={handleInputChange}\n                        placeholder=\"Author name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"read_time\">Read Time *</Label>\n                      <Input\n                        id=\"read_time\"\n                        name=\"read_time\"\n                        value={formData.read_time}\n                        onChange={handleInputChange}\n                        className={validationErrors.read_time ? 'border-red-500' : ''}\n                        placeholder=\"5 min read\"\n                      />\n                      {validationErrors.read_time && (\n                        <p className=\"text-red-500 text-sm\">{validationErrors.read_time}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"tags\">Tags * (comma separated)</Label>\n                    <Textarea\n                      id=\"tags\"\n                      name=\"tags\"\n                      value={formData.tags}\n                      onChange={handleInputChange}\n                      className={validationErrors.tags ? 'border-red-500' : ''}\n                      placeholder=\"React, JavaScript, Web Development, Tutorial\"\n                      rows={2}\n                    />\n                    {validationErrors.tags && (\n                      <p className=\"text-red-500 text-sm\">{validationErrors.tags}</p>\n                    )}\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {formData.tags.split(',').map((tag, index) => {\n                        const trimmedTag = tag.trim();\n                        return trimmedTag ? (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {trimmedTag}\n                          </Badge>\n                        ) : null;\n                      })}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"published\"\n                      name=\"published\"\n                      checked={formData.published}\n                      onChange={handleInputChange}\n                      className=\"rounded\"\n                    />\n                    <Label htmlFor=\"published\">Publish Blog Post</Label>\n                  </div>\n\n                  <div className=\"flex space-x-4 pt-4 border-t\">\n                    <Button type=\"submit\" disabled={submitLoading}>\n                      {submitLoading ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          {editBlog ? 'Updating...' : 'Creating...'}\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          {editBlog ? 'Update Blog Post' : 'Create Blog Post'}\n                        </>\n                      )}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsDialogOpen(false)}\n                      disabled={submitLoading}\n                    >\n                      <X className=\"h-4 w-4 mr-2\" />\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              ) : (\n                /* Preview Mode */\n                <div className=\"space-y-6\">\n                  <div className=\"border rounded-lg p-6 bg-white\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Badge variant={formData.published ? \"default\" : \"secondary\"}>\n                          {formData.published ? \"Published\" : \"Draft\"}\n                        </Badge>\n                        <Badge variant=\"outline\">{formData.category}</Badge>\n                        <span className=\"text-sm text-gray-500\">{formData.read_time}</span>\n                      </div>\n                      \n                      <h1 className=\"text-3xl font-bold text-gray-900\">{formData.title || 'Blog Title'}</h1>\n                      \n                      <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                        <div className=\"flex items-center space-x-1\">\n                          <User className=\"h-4 w-4\" />\n                          <span>{formData.author}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          <span>{formData.read_time}</span>\n                        </div>\n                      </div>\n                      \n                      {formData.image && (\n                        <div className=\"aspect-video overflow-hidden rounded-lg\">\n                          <img \n                            src={formData.image} \n                            alt={formData.title}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                      )}\n                      \n                      <p className=\"text-lg text-gray-600 leading-relaxed\">{formData.excerpt}</p>\n                      \n                      <div className=\"prose max-w-none\" dangerouslySetInnerHTML={{ __html: formData.content }} />\n                      \n                      <div className=\"flex flex-wrap gap-2 pt-4 border-t\">\n                        {formData.tags.split(',').map((tag, index) => {\n                          const trimmedTag = tag.trim();\n                          return trimmedTag ? (\n                            <Badge key={index} variant=\"secondary\">\n                              <Tag className=\"h-3 w-3 mr-1\" />\n                              {trimmedTag}\n                            </Badge>\n                          ) : null;\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <BookOpen className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Blogs</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Published</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.published}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Edit className=\"h-5 w-5 text-orange-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Drafts</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.drafts}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Tag className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Categories</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.categories.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search blogs by title, excerpt, category, or tags...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"published\">Published</option>\n              <option value=\"draft\">Drafts</option>\n            </select>\n            \n            <select\n              value={filterCategory}\n              onChange={(e) => setFilterCategory(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"all\">All Categories</option>\n              {stats.categories.map((category, index) => (\n                <option key={index} value={category}>{category}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Blog Posts Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredBlogs.map((blog) => (\n          <Card key={blog.id} className=\"hover:shadow-lg transition-all duration-200 hover:-translate-y-1\">\n            <div className=\"aspect-video overflow-hidden rounded-t-lg\">\n              <img \n                src={blog.image} \n                alt={blog.title}\n                className=\"w-full h-full object-cover transition-transform duration-200 hover:scale-105\"\n              />\n            </div>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg line-clamp-2 hover:text-blue-600 transition-colors\">\n                  {blog.title}\n                </CardTitle>\n                <div className=\"flex space-x-1\">\n                  <Badge variant={blog.published ? \"default\" : \"secondary\"}>\n                    {blog.published ? \"Published\" : \"Draft\"}\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                <Badge variant=\"outline\">{blog.category}</Badge>\n                <div className=\"flex items-center space-x-1\">\n                  <Clock className=\"h-3 w-3\" />\n                  <span>{blog.read_time}</span>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-600 text-sm line-clamp-3\">{blog.excerpt}</p>\n              \n              <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{new Date(blog.publish_date).toLocaleDateString()}</span>\n                <div className=\"flex items-center space-x-1 ml-auto\">\n                  <User className=\"h-3 w-3\" />\n                  <span>{blog.author}</span>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-1\">\n                {blog.tags.slice(0, 3).map((tag, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n                {blog.tags.length > 3 && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    +{blog.tags.length - 3} more\n                  </Badge>\n                )}\n              </div>\n\n              <div className=\"flex space-x-2 pt-4 border-t\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleEdit(blog)}\n                  className=\"flex-1\"\n                >\n                  <Edit className=\"h-4 w-4 mr-1\" />\n                  Edit\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleDelete(blog.id)}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {filteredBlogs.length === 0 && !loading && (\n        <div className=\"text-center py-12\">\n          <BookOpen className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            {searchTerm || filterStatus !== 'all' || filterCategory !== 'all' \n              ? 'No blogs found' \n              : 'No blog posts yet'\n            }\n          </h3>\n          <p className=\"text-gray-500 mb-4\">\n            {searchTerm || filterStatus !== 'all' || filterCategory !== 'all'\n              ? 'Try adjusting your search or filters'\n              : 'Create your first blog post to get started!'\n            }\n          </p>\n          {(!searchTerm && filterStatus === 'all' && filterCategory === 'all') && (\n            <Button onClick={() => { resetForm(); setIsDialogOpen(true); }}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create First Blog Post\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminBlogs;","size_bytes":33511},"frontend/src/pages/Admin/AdminContacts.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Badge } from '../../components/ui/badge';\nimport { useToast } from '../../hooks/use-toast';\nimport { Mail, Phone, Clock, Eye, Trash2, MessageSquare } from 'lucide-react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminContacts = () => {\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  const fetchContacts = async () => {\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n      \n      const response = await axios.get(`${API}/admin/contacts`, config);\n      setContacts(response.data);\n    } catch (error) {\n      console.error('Fetch contacts error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch contacts\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (contactId) => {\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n      \n      await axios.put(`${API}/admin/contacts/${contactId}/read`, {}, config);\n      setContacts(contacts.map(contact => \n        contact.id === contactId ? { ...contact, read: true } : contact\n      ));\n      toast({\n        title: \"Success\",\n        description: \"Contact marked as read\"\n      });\n    } catch (error) {\n      console.error('Mark as read error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark contact as read\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const deleteContact = async (contactId) => {\n    if (window.confirm('Are you sure you want to delete this contact?')) {\n      try {\n        const config = token ? {\n          headers: { Authorization: `Bearer ${token}` }\n        } : {};\n        \n        await axios.delete(`${API}/admin/contacts/${contactId}`, config);\n        setContacts(contacts.filter(contact => contact.id !== contactId));\n        toast({\n          title: \"Success\",\n          description: \"Contact deleted successfully\"\n        });\n      } catch (error) {\n        console.error('Delete contact error:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete contact\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Contact Inquiries</h1>\n        <div className=\"flex space-x-4\">\n          <Badge variant=\"outline\">\n            Total: {contacts.length}\n          </Badge>\n          <Badge variant=\"destructive\">\n            Unread: {contacts.filter(c => !c.read).length}\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        {contacts.map((contact) => (\n          <Card key={contact.id} className={`hover:shadow-lg transition-shadow ${!contact.read ? 'border-l-4 border-l-blue-500 bg-blue-50' : ''}`}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex items-center space-x-3\">\n                  <CardTitle className=\"text-lg\">{contact.name}</CardTitle>\n                  {!contact.read && (\n                    <Badge variant=\"destructive\" className=\"text-xs\">New</Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                  <Clock className=\"h-4 w-4\" />\n                  <span>{new Date(contact.created_at).toLocaleDateString()}</span>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-4 w-4 text-blue-600\" />\n                    <span className=\"text-sm font-medium\">Email:</span>\n                    <a href={`mailto:${contact.email}`} className=\"text-blue-600 hover:underline\">\n                      {contact.email}\n                    </a>\n                  </div>\n                  {contact.phone && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Phone className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-sm font-medium\">Phone:</span>\n                      <a href={`tel:${contact.phone}`} className=\"text-green-600 hover:underline\">\n                        {contact.phone}\n                      </a>\n                    </div>\n                  )}\n                  <div className=\"flex items-center space-x-2\">\n                    <MessageSquare className=\"h-4 w-4 text-purple-600\" />\n                    <span className=\"text-sm font-medium\">Project:</span>\n                    <Badge variant=\"outline\">{contact.project_type}</Badge>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {contact.budget && (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium\">Budget:</span>\n                      <Badge variant=\"secondary\">{contact.budget}</Badge>\n                    </div>\n                  )}\n                  {contact.timeline && (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium\">Timeline:</span>\n                      <Badge variant=\"secondary\">{contact.timeline}</Badge>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <span className=\"text-sm font-medium\">Message:</span>\n                <div className=\"p-3 bg-gray-50 rounded-lg\">\n                  <p className=\"text-gray-700 text-sm\">{contact.message}</p>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2 pt-4 border-t border-gray-100\">\n                {!contact.read && (\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => markAsRead(contact.id)}\n                  >\n                    <Eye className=\"h-4 w-4 mr-1\" />\n                    Mark as Read\n                  </Button>\n                )}\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => window.open(`mailto:${contact.email}?subject=Re: ${contact.project_type} Inquiry&body=Hi ${contact.name},%0D%0A%0D%0AThank you for your inquiry about ${contact.project_type}.%0D%0A%0D%0ABest regards,%0D%0AMMB`, '_blank')}\n                >\n                  <Mail className=\"h-4 w-4 mr-1\" />\n                  Reply\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => deleteContact(contact.id)}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {contacts.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\">No contact inquiries found.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminContacts;","size_bytes":8124},"frontend/src/pages/Admin/AdminDashboard.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Button } from '../../components/ui/button';\nimport { Progress } from '../../components/ui/progress';\nimport { \n  BarChart3, \n  Users, \n  FolderOpen, \n  MessageSquare, \n  FileText, \n  Mail,\n  TrendingUp,\n  Eye,\n  Clock,\n  Plus,\n  Activity,\n  Calendar,\n  Star,\n  AlertCircle,\n  CheckCircle2\n} from 'lucide-react';\nimport axios from 'axios';\nimport { useToast } from '../../hooks/use-toast';\nimport { useAuth } from '../../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { handleError, handleSuccess, apiCall } from '../../utils/errorHandler';\nimport { LoadingWrapper, StatsLoading, PageLoading } from '../../components/ui/loading';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminDashboard = () => {\n  const [stats, setStats] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n  const { token, admin } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchDashboardStats();\n  }, []);\n\n  const fetchDashboardStats = async () => {\n    await apiCall(\n      async () => {\n        const config = token ? {\n          headers: { Authorization: `Bearer ${token}` }\n        } : {};\n        \n        const response = await axios.get(`${API}/admin/stats`, config);\n        return response.data;\n      },\n      {\n        onStart: () => setLoading(true),\n        onSuccess: (data) => {\n          setStats(data);\n          setLoading(false);\n        },\n        onError: (error) => {\n          handleError(error, 'Failed to load dashboard statistics');\n          setLoading(false);\n        },\n        showSuccessToast: false\n      }\n    );\n  };\n\n  const getCurrentTime = () => {\n    const now = new Date();\n    const hours = now.getHours();\n    if (hours < 12) return 'Good Morning';\n    if (hours < 17) return 'Good Afternoon';\n    return 'Good Evening';\n  };\n\n  const quickActions = [\n    {\n      title: 'Add New Project',\n      description: 'Create a new portfolio project',\n      icon: FolderOpen,\n      color: 'bg-blue-500 hover:bg-blue-600',\n      action: () => navigate('/admin/projects')\n    },\n    {\n      title: 'Write Blog Post',\n      description: 'Create a new blog article',\n      icon: FileText,\n      color: 'bg-green-500 hover:bg-green-600',\n      action: () => navigate('/admin/blogs')\n    },\n    {\n      title: 'Add Testimonial',\n      description: 'Add client testimonial',\n      icon: MessageSquare,\n      color: 'bg-purple-500 hover:bg-purple-600',\n      action: () => navigate('/admin/testimonials')\n    },\n    {\n      title: 'Manage Media',\n      description: 'Upload and organize files',\n      icon: Activity,\n      color: 'bg-orange-500 hover:bg-orange-600',\n      action: () => navigate('/admin/media')\n    }\n  ];\n\n\n\n  const statCards = [\n    {\n      title: 'Total Projects',\n      value: stats?.total_projects || 0,\n      icon: FolderOpen,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      change: '+12%',\n      changeType: 'positive'\n    },\n    {\n      title: 'Active Services',\n      value: stats?.total_services || 0,\n      icon: BarChart3,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      change: '+8%',\n      changeType: 'positive'\n    },\n    {\n      title: 'Testimonials',\n      value: stats?.total_testimonials || 0,\n      icon: MessageSquare,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      change: '+15%',\n      changeType: 'positive'\n    },\n    {\n      title: 'Blog Posts',\n      value: `${stats?.published_blogs || 0}/${stats?.total_blogs || 0}`,\n      icon: FileText,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      change: '+5%',\n      changeType: 'positive'\n    },\n    {\n      title: 'Contact Inquiries',\n      value: stats?.total_contacts || 0,\n      icon: Mail,\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      change: '+23%',\n      changeType: 'positive'\n    },\n    {\n      title: 'Unread Messages',\n      value: stats?.unread_contacts || 0,\n      icon: AlertCircle,\n      color: 'text-yellow-600',\n      bgColor: 'bg-yellow-50',\n      change: stats?.unread_contacts > 0 ? 'Action needed' : 'All clear',\n      changeType: stats?.unread_contacts > 0 ? 'warning' : 'positive'\n    }\n  ];\n\n  return (\n    <LoadingWrapper\n      loading={loading}\n      loadingComponent={<PageLoading message=\"Loading dashboard...\" />}\n      onRetry={fetchDashboardStats}\n    >\n      <div className=\"space-y-8 animate-fadeIn\">\n      {/* Welcome Section */}\n      <div className=\"bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 rounded-xl p-8 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">\n                {getCurrentTime()}, {admin?.name || 'Admin'}! 👋\n              </h1>\n              <p className=\"text-blue-100 text-lg\">\n                Welcome back to your MMB Admin Panel. Here's what's happening today.\n              </p>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-blue-100 text-sm\">Today's Date</p>\n                <p className=\"text-white font-semibold\">\n                  {new Date().toLocaleDateString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                  })}\n                </p>\n              </div>\n              <Calendar className=\"h-8 w-8 text-blue-200\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {statCards.map((stat, index) => {\n          const IconComponent = stat.icon;\n          return (\n            <Card key={index} className=\"hover:shadow-lg transition-all duration-300 hover:-translate-y-1 border-0 shadow-md\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-12 h-12 ${stat.bgColor} rounded-xl flex items-center justify-center`}>\n                    <IconComponent className={`h-6 w-6 ${stat.color}`} />\n                  </div>\n                  <Badge \n                    variant={stat.changeType === 'positive' ? 'default' : stat.changeType === 'warning' ? 'destructive' : 'secondary'}\n                    className=\"text-xs\"\n                  >\n                    {stat.change}\n                  </Badge>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 mb-1\">{stat.title}</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{stat.value}</p>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"border-0 shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Plus className=\"h-5 w-5\" />\n            <span>Quick Actions</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {quickActions.map((action, index) => {\n              const IconComponent = action.icon;\n              return (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className={`h-24 flex flex-col items-center justify-center space-y-2 hover:scale-105 transition-all duration-200 border-2 hover:border-transparent ${action.color} hover:text-white group`}\n                  onClick={action.action}\n                >\n                  <IconComponent className=\"h-6 w-6 group-hover:scale-110 transition-transform\" />\n                  <div className=\"text-center\">\n                    <p className=\"font-medium text-sm\">{action.title}</p>\n                    <p className=\"text-xs opacity-70\">{action.description}</p>\n                  </div>\n                </Button>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity & System Status */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Contacts */}\n        <Card className=\"border-0 shadow-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Mail className=\"h-5 w-5\" />\n                <span>Recent Contact Inquiries</span>\n              </div>\n              <Badge variant=\"outline\">{stats?.recent_contacts?.length || 0} new</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {stats?.recent_contacts && stats.recent_contacts.length > 0 ? (\n              <div className=\"space-y-4\">\n                {stats.recent_contacts.slice(0, 4).map((contact) => (\n                  <div key={contact.id} className=\"flex items-start space-x-4 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-sm\">\n                      {contact.name.charAt(0).toUpperCase()}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h4 className=\"font-medium text-gray-900 truncate\">{contact.name}</h4>\n                        {!contact.read && (\n                          <Badge variant=\"destructive\" className=\"text-xs px-2 py-0\">New</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-1\">{contact.email}</p>\n                      <p className=\"text-sm text-gray-500 truncate\">{contact.message}</p>\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Clock className=\"h-3 w-3 text-gray-400\" />\n                        <span className=\"text-xs text-gray-400\">\n                          {new Date(contact.created_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full mt-4\"\n                  onClick={() => navigate('/admin/contacts')}\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View All Contacts\n                </Button>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Mail className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No recent contacts</p>\n                <p className=\"text-sm text-gray-400\">New inquiries will appear here</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* System Status */}\n        <Card className=\"border-0 shadow-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Activity className=\"h-5 w-5\" />\n              <span>System Status</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-gray-700\">Website Performance</span>\n                  <span className=\"text-sm text-green-600 font-medium\">Excellent</span>\n                </div>\n                <Progress value={95} className=\"h-2\" />\n              </div>\n              \n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-gray-700\">Storage Usage</span>\n                  <span className=\"text-sm text-blue-600 font-medium\">68%</span>\n                </div>\n                <Progress value={68} className=\"h-2\" />\n              </div>\n              \n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-gray-700\">Security Score</span>\n                  <span className=\"text-sm text-green-600 font-medium\">High</span>\n                </div>\n                <Progress value={88} className=\"h-2\" />\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                    <span className=\"text-sm text-gray-700\">All systems operational</span>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                    Online\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n    </LoadingWrapper>\n  );\n};\n\nexport default AdminDashboard;","size_bytes":13769},"frontend/src/pages/Admin/AdminLogin.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { useToast } from '../../hooks/use-toast';\nimport { Eye, EyeOff, Lock, Mail } from 'lucide-react';\n\nconst AdminLogin = () => {\n  const [credentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  \n  const { login, isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/admin/dashboard');\n    }\n  }, [isAuthenticated, navigate]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const result = await login(credentials);\n    \n    if (result.success) {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to MMB Admin Panel\",\n      });\n      navigate('/admin/dashboard');\n    } else {\n      toast({\n        title: \"Login Failed\",\n        description: result.error,\n        variant: \"destructive\"\n      });\n    }\n    \n    setLoading(false);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setCredentials(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n            <span className=\"text-white font-bold text-2xl\">MMB</span>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Admin Login\n          </CardTitle>\n          <p className=\"text-gray-600\">\n            Enter your credentials to access the admin panel\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={credentials.email}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter your email\"\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={credentials.password}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter your password\"\n                  className=\"pl-10 pr-10\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={loading}\n            >\n              {loading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Logging in...\n                </>\n              ) : (\n                'Login'\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AdminLogin;","size_bytes":4591},"frontend/src/pages/Admin/AdminMedia.jsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { useToast } from '../../hooks/use-toast';\nimport { Upload, Image, Palette, Save, Trash2, Eye, FileImage, AlertCircle, CheckCircle, X } from 'lucide-react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\n\nconst API = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\n\nconst AdminMedia = () => {\n  const { toast } = useToast();\n  const { token } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [uploading, setUploading] = useState(false);\n  const [mediaData, setMediaData] = useState({\n    logo: '',\n    hero_image: '',\n    about_image: '',\n    favicon: ''\n  });\n\n  const [previewFiles, setPreviewFiles] = useState({});\n  const [dragActive, setDragActive] = useState({});\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [stats, setStats] = useState({\n    totalFiles: 0,\n    totalSize: 0,\n    lastUpdated: null\n  });\n\n  useEffect(() => {\n    fetchMediaData();\n  }, []);\n\n  const fetchMediaData = async () => {\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${token}` }\n      };\n      \n      const response = await axios.get(`${API}/api/admin/media-settings`, config);\n      if (response.data) {\n        setMediaData(response.data);\n        calculateStats(response.data);\n      }\n    } catch (error) {\n      console.error('Fetch error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch media data\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateStats = (data) => {\n    const files = Object.values(data).filter(url => url);\n    setStats({\n      totalFiles: files.length,\n      totalSize: files.length * 0.5, // Estimated size in MB\n      lastUpdated: new Date().toLocaleDateString()\n    });\n  };\n\n  const validateFile = (file, type) => {\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/svg+xml'];\n    \n    if (type === 'favicon') {\n      allowedTypes.push('image/x-icon', 'image/vnd.microsoft.icon');\n    }\n\n    if (file.size > maxSize) {\n      return { valid: false, error: 'File size must be less than 5MB' };\n    }\n\n    if (!allowedTypes.includes(file.type)) {\n      return { valid: false, error: 'Invalid file type. Please upload an image file.' };\n    }\n\n    return { valid: true };\n  };\n\n  const handleFileChange = (e, type) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const validation = validateFile(file, type);\n    if (!validation.valid) {\n      toast({\n        title: \"Error\",\n        description: validation.error,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      setPreviewFiles(prev => ({\n        ...prev,\n        [type]: {\n          file,\n          preview: event.target.result,\n          name: file.name,\n          size: file.size\n        }\n      }));\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleDrag = useCallback((e, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(prev => ({ ...prev, [type]: true }));\n    } else if (e.type === \"dragleave\") {\n      setDragActive(prev => ({ ...prev, [type]: false }));\n    }\n  }, []);\n\n  const handleDrop = useCallback((e, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(prev => ({ ...prev, [type]: false }));\n\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const file = e.dataTransfer.files[0];\n      \n      const validation = validateFile(file, type);\n      if (!validation.valid) {\n        toast({\n          title: \"Error\",\n          description: validation.error,\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setPreviewFiles(prev => ({\n          ...prev,\n          [type]: {\n            file,\n            preview: event.target.result,\n            name: file.name,\n            size: file.size\n          }\n        }));\n      };\n      reader.readAsDataURL(file);\n    }\n  }, [toast]);\n\n  const handleUpload = async (type) => {\n    const fileData = previewFiles[type];\n    if (!fileData) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a file first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setUploading(true);\n    setUploadProgress(prev => ({ ...prev, [type]: 0 }));\n    \n    try {\n      const formData = new FormData();\n      formData.append('file', fileData.file);\n      formData.append('type', type);\n\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${token}`\n        },\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          setUploadProgress(prev => ({ ...prev, [type]: percentCompleted }));\n        }\n      };\n\n      const response = await axios.post(`${API}/api/admin/upload-media`, formData, config);\n      \n      setMediaData(prev => ({\n        ...prev,\n        [type]: response.data.url\n      }));\n\n      setPreviewFiles(prev => ({\n        ...prev,\n        [type]: null\n      }));\n\n      setUploadProgress(prev => ({ ...prev, [type]: 0 }));\n      calculateStats({ ...mediaData, [type]: response.data.url });\n\n      toast({\n        title: \"Success\",\n        description: `${type.replace('_', ' ')} uploaded successfully`\n      });\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.detail || \"Upload failed\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploading(false);\n      setUploadProgress(prev => ({ ...prev, [type]: 0 }));\n    }\n  };\n\n  const handleRemove = async (type) => {\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${token}` }\n      };\n\n      await axios.delete(`${API}/api/admin/media/${type}`, config);\n      \n      setMediaData(prev => ({\n        ...prev,\n        [type]: ''\n      }));\n\n      calculateStats({ ...mediaData, [type]: '' });\n\n      toast({\n        title: \"Success\",\n        description: `${type.replace('_', ' ')} removed successfully`\n      });\n\n    } catch (error) {\n      console.error('Remove error:', error);\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.detail || \"Failed to remove media\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const MediaCard = ({ type, title, description, currentUrl, recommended }) => (\n    <Card className=\"h-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Image className=\"h-5 w-5 mr-2\" />\n            {title}\n          </div>\n          {currentUrl && (\n            <div className=\"flex items-center text-green-600\">\n              <CheckCircle className=\"h-4 w-4 mr-1\" />\n              <span className=\"text-xs\">Active</span>\n            </div>\n          )}\n        </CardTitle>\n        <p className=\"text-sm text-gray-600\">{description}</p>\n        <p className=\"text-xs text-blue-600\">{recommended}</p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Current Image */}\n        {currentUrl && (\n          <div>\n            <Label className=\"text-sm font-medium\">Current {title}</Label>\n            <div className=\"mt-2 p-4 border rounded-lg bg-gray-50\">\n              <img \n                src={currentUrl} \n                alt={title}\n                className=\"max-h-32 max-w-full object-contain mx-auto rounded\"\n              />\n              <div className=\"flex justify-between mt-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => window.open(currentUrl, '_blank')}\n                >\n                  <Eye className=\"h-4 w-4 mr-1\" />\n                  View Full\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => handleRemove(type)}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                  Remove\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Drag & Drop Upload Area */}\n        <div>\n          <Label className=\"text-sm font-medium\">Upload New {title}</Label>\n          <div\n            className={`mt-2 border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n              dragActive[type] \n                ? 'border-blue-500 bg-blue-50' \n                : 'border-gray-300 hover:border-gray-400'\n            }`}\n            onDragEnter={(e) => handleDrag(e, type)}\n            onDragLeave={(e) => handleDrag(e, type)}\n            onDragOver={(e) => handleDrag(e, type)}\n            onDrop={(e) => handleDrop(e, type)}\n          >\n            <FileImage className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <p className=\"text-sm text-gray-600 mb-2\">\n              Drag and drop your image here, or\n            </p>\n            <Input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={(e) => handleFileChange(e, type)}\n              className=\"hidden\"\n              id={`${type}-upload`}\n            />\n            <Label\n              htmlFor={`${type}-upload`}\n              className=\"cursor-pointer inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Choose File\n            </Label>\n            <p className=\"text-xs text-gray-500 mt-2\">\n              Max size: 5MB • Formats: JPG, PNG, WebP, SVG\n            </p>\n          </div>\n        </div>\n\n        {/* Preview & Upload */}\n        {previewFiles[type] && (\n          <div>\n            <Label className=\"text-sm font-medium\">Preview</Label>\n            <div className=\"mt-2 p-4 border rounded-lg bg-gray-50\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <FileImage className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm font-medium\">{previewFiles[type].name}</span>\n                  <span className=\"text-xs text-gray-500\">\n                    ({formatFileSize(previewFiles[type].size)})\n                  </span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setPreviewFiles(prev => ({ ...prev, [type]: null }))}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <img \n                src={previewFiles[type].preview} \n                alt=\"Preview\"\n                className=\"max-h-32 max-w-full object-contain mx-auto rounded mb-3\"\n              />\n              \n              {uploadProgress[type] > 0 && (\n                <div className=\"mb-3\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Uploading...</span>\n                    <span>{uploadProgress[type]}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${uploadProgress[type]}%` }}\n                    ></div>\n                  </div>\n                </div>\n              )}\n              \n              <Button\n                onClick={() => handleUpload(type)}\n                disabled={uploading}\n                className=\"w-full\"\n              >\n                {uploading && uploadProgress[type] > 0 ? (\n                  <>Uploading... {uploadProgress[type]}%</>\n                ) : uploading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Upload {title}\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Media Management</h1>\n          <p className=\"text-gray-600 mt-1\">Manage logos, images, and other media assets with drag & drop</p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <FileImage className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Files</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalFiles}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Upload className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Storage Used</p>\n                <p className=\"text-2xl font-bold text-gray-900\">~{stats.totalSize} MB</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <CheckCircle className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Last Updated</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.lastUpdated || 'Never'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <MediaCard\n          type=\"logo\"\n          title=\"Website Logo\"\n          description=\"Main logo displayed in header and footer\"\n          recommended=\"Recommended: PNG/SVG, 200x60px\"\n          currentUrl={mediaData.logo}\n        />\n\n        <MediaCard\n          type=\"favicon\"\n          title=\"Favicon\"\n          description=\"Small icon displayed in browser tab\"\n          recommended=\"Recommended: ICO/PNG, 32x32px\"\n          currentUrl={mediaData.favicon}\n        />\n\n        <MediaCard\n          type=\"hero_image\"\n          title=\"Hero Section Image\"\n          description=\"Main background image for homepage hero section\"\n          recommended=\"Recommended: JPG/PNG, 1920x1080px\"\n          currentUrl={mediaData.hero_image}\n        />\n\n        <MediaCard\n          type=\"about_image\"\n          title=\"About Section Image\"\n          description=\"Profile image for about section\"\n          recommended=\"Recommended: JPG/PNG, 400x400px\"\n          currentUrl={mediaData.about_image}\n        />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Palette className=\"h-5 w-5 mr-2\" />\n            Media Guidelines & Best Practices\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-sm\">\n            <div>\n              <h4 className=\"font-medium mb-3 flex items-center\">\n                <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\n                Supported Formats\n              </h4>\n              <ul className=\"space-y-2 text-gray-600\">\n                <li className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-2\"></div>\n                  JPEG/JPG - Best for photos\n                </li>\n                <li className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                  PNG - Best for logos with transparency\n                </li>\n                <li className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-purple-500 rounded-full mr-2\"></div>\n                  WebP - Modern format, smaller size\n                </li>\n                <li className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-2\"></div>\n                  SVG - Vector graphics, scalable\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-3 flex items-center\">\n                <AlertCircle className=\"h-4 w-4 mr-2 text-orange-600\" />\n                File Requirements\n              </h4>\n              <ul className=\"space-y-2 text-gray-600\">\n                <li>• Maximum file size: 5MB</li>\n                <li>• Minimum resolution: 100x100px</li>\n                <li>• Aspect ratio: Maintain original</li>\n                <li>• Color space: RGB recommended</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-3 flex items-center\">\n                <Upload className=\"h-4 w-4 mr-2 text-blue-600\" />\n                Upload Methods\n              </h4>\n              <ul className=\"space-y-2 text-gray-600\">\n                <li>• Drag & drop files directly</li>\n                <li>• Click to browse and select</li>\n                <li>• Real-time upload progress</li>\n                <li>• Instant preview before upload</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AdminMedia;","size_bytes":18933},"frontend/src/pages/Admin/AdminProfile.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Badge } from '../../components/ui/badge';\nimport { Separator } from '../../components/ui/separator';\nimport { Avatar, AvatarFallback, AvatarImage } from '../../components/ui/avatar';\nimport { useToast } from '../../hooks/use-toast';\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Calendar,\n  Shield,\n  Camera,\n  Save,\n  Eye,\n  EyeOff,\n  Key,\n  AlertCircle,\n  CheckCircle2,\n  Upload\n} from 'lucide-react';\nimport { useAuth } from '../../context/AuthContext';\nimport { useProfile } from '../../context/ProfileContext';\nimport { useSiteSettings } from '../../context/SiteSettingsContext';\nimport axios from 'axios';\n\nconst AdminProfile = () => {\n  const { user, updateUser } = useAuth();\n  const { refreshProfile } = useProfile();\n  \n  // Import useProfile and useSiteSettings for global updates\n  const { refreshSettings } = useSiteSettings();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [avatarPreview, setAvatarPreview] = useState(null);\n  \n  const [profileData, setProfileData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    address: '',\n    bio: '',\n    avatar: ''\n  });\n  \n  const [passwordData, setPasswordData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n  \n  const [passwordStrength, setPasswordStrength] = useState({\n    score: 0,\n    feedback: []\n  });\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  useEffect(() => {\n    if (passwordData.newPassword) {\n      checkPasswordStrength(passwordData.newPassword);\n    } else {\n      setPasswordStrength({ score: 0, feedback: [] });\n    }\n  }, [passwordData.newPassword]);\n\n  const fetchProfile = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('admin_token');\n      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000'}/api/admin/profile`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      const data = response.data.admin;\n      setProfileData({\n        name: data.name || '',\n        email: data.email || '',\n        phone: data.phone || '',\n        address: data.address || '',\n        bio: data.bio || '',\n        avatar: data.avatar || ''\n      });\n    } catch (error) {\n      toast({\n        title: \"Error loading profile\",\n        description: \"Failed to load profile data. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkPasswordStrength = (password) => {\n    let score = 0;\n    const feedback = [];\n    \n    if (password.length >= 8) score += 1;\n    else feedback.push('At least 8 characters');\n    \n    if (/[a-z]/.test(password)) score += 1;\n    else feedback.push('Include lowercase letters');\n    \n    if (/[A-Z]/.test(password)) score += 1;\n    else feedback.push('Include uppercase letters');\n    \n    if (/\\d/.test(password)) score += 1;\n    else feedback.push('Include numbers');\n    \n    if (/[^\\w\\s]/.test(password)) score += 1;\n    else feedback.push('Include special characters');\n    \n    setPasswordStrength({ score, feedback });\n  };\n\n  const handleProfileChange = (field, value) => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handlePasswordChange = (field, value) => {\n    setPasswordData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleAvatarChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select an image smaller than 5MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setAvatarPreview(reader.result);\n        setProfileData(prev => ({ ...prev, avatar: reader.result }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleProfileSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setSaving(true);\n      const token = localStorage.getItem('admin_token');\n      \n      const response = await axios.put(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000'}/api/admin/profile`, profileData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      if (updateUser) {\n        updateUser(response.data.admin);\n      }\n      \n      // Refresh profile context to update user panel\n      if (refreshProfile) {\n        await refreshProfile();\n      }\n      \n      // Also refresh site settings to ensure user panel gets updated\n      if (refreshSettings) {\n        await refreshSettings();\n      }\n      \n      toast({\n        title: \"Profile updated successfully\",\n        description: \"Your profile information has been saved.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Update failed\",\n        description: error.response?.data?.message || \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handlePasswordSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"New password and confirm password do not match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (passwordStrength.score < 3) {\n      toast({\n        title: \"Weak password\",\n        description: \"Please choose a stronger password.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      setSaving(true);\n      const token = localStorage.getItem('admin_token');\n      \n      await axios.put(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000'}/api/admin/change-password`, {\n        current_password: passwordData.currentPassword,\n        new_password: passwordData.newPassword\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      setPasswordData({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n      \n      toast({\n        title: \"Password changed successfully\",\n        description: \"Your password has been updated.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Password change failed\",\n        description: error.response?.data?.message || \"Failed to change password. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const getPasswordStrengthColor = () => {\n    if (passwordStrength.score <= 1) return 'bg-red-500';\n    if (passwordStrength.score <= 2) return 'bg-orange-500';\n    if (passwordStrength.score <= 3) return 'bg-yellow-500';\n    if (passwordStrength.score <= 4) return 'bg-blue-500';\n    return 'bg-green-500';\n  };\n\n  const getPasswordStrengthText = () => {\n    if (passwordStrength.score <= 1) return 'Very Weak';\n    if (passwordStrength.score <= 2) return 'Weak';\n    if (passwordStrength.score <= 3) return 'Fair';\n    if (passwordStrength.score <= 4) return 'Good';\n    return 'Strong';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Profile Settings</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Manage your account settings and preferences\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"flex items-center space-x-1\">\n          <Shield className=\"h-3 w-3\" />\n          <span>Administrator</span>\n        </Badge>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Profile Information */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <User className=\"h-5 w-5\" />\n                <span>Profile Information</span>\n              </CardTitle>\n              <CardDescription>\n                Update your personal information and profile details\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleProfileSubmit} className=\"space-y-4\">\n                {/* Avatar Upload */}\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"h-20 w-20\">\n                    <AvatarImage src={avatarPreview || profileData.avatar} alt=\"Profile\" />\n                    <AvatarFallback className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white text-xl\">\n                      {profileData.name?.charAt(0) || 'A'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <Label htmlFor=\"avatar\" className=\"cursor-pointer\">\n                      <div className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\">\n                        <Camera className=\"h-4 w-4\" />\n                        <span>Change Avatar</span>\n                      </div>\n                    </Label>\n                    <Input\n                      id=\"avatar\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleAvatarChange}\n                      className=\"hidden\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">Max size: 5MB</p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Form Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={profileData.name}\n                      onChange={(e) => handleProfileChange('name', e.target.value)}\n                      placeholder=\"Enter your full name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) => handleProfileChange('email', e.target.value)}\n                      placeholder=\"Enter your email\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      value={profileData.phone}\n                      onChange={(e) => handleProfileChange('phone', e.target.value)}\n                      placeholder=\"Enter your phone number\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"address\">Address</Label>\n                    <Input\n                      id=\"address\"\n                      value={profileData.address}\n                      onChange={(e) => handleProfileChange('address', e.target.value)}\n                      placeholder=\"Enter your address\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bio\">Bio</Label>\n                  <Textarea\n                    id=\"bio\"\n                    value={profileData.bio}\n                    onChange={(e) => handleProfileChange('bio', e.target.value)}\n                    placeholder=\"Tell us about yourself...\"\n                    rows={4}\n                  />\n                </div>\n\n                <Button type=\"submit\" disabled={saving} className=\"w-full md:w-auto\">\n                  {saving ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      <span>Saving...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Save className=\"h-4 w-4\" />\n                      <span>Save Changes</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Change Password */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Key className=\"h-5 w-5\" />\n                <span>Change Password</span>\n              </CardTitle>\n              <CardDescription>\n                Update your password to keep your account secure\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currentPassword\">Current Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"currentPassword\"\n                      type={showCurrentPassword ? \"text\" : \"password\"}\n                      value={passwordData.currentPassword}\n                      onChange={(e) => handlePasswordChange('currentPassword', e.target.value)}\n                      placeholder=\"Enter current password\"\n                      required\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-auto p-1\"\n                      onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                    >\n                      {showCurrentPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newPassword\">New Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"newPassword\"\n                      type={showNewPassword ? \"text\" : \"password\"}\n                      value={passwordData.newPassword}\n                      onChange={(e) => handlePasswordChange('newPassword', e.target.value)}\n                      placeholder=\"Enter new password\"\n                      required\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-auto p-1\"\n                      onClick={() => setShowNewPassword(!showNewPassword)}\n                    >\n                      {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                  \n                  {/* Password Strength Indicator */}\n                  {passwordData.newPassword && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Password Strength:</span>\n                        <span className={`font-medium ${\n                          passwordStrength.score <= 2 ? 'text-red-600' : \n                          passwordStrength.score <= 3 ? 'text-yellow-600' : 'text-green-600'\n                        }`}>\n                          {getPasswordStrengthText()}\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full transition-all duration-300 ${getPasswordStrengthColor()}`}\n                          style={{ width: `${(passwordStrength.score / 5) * 100}%` }}\n                        ></div>\n                      </div>\n                      {passwordStrength.feedback.length > 0 && (\n                        <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          <p>Suggestions:</p>\n                          <ul className=\"list-disc list-inside space-y-1\">\n                            {passwordStrength.feedback.map((item, index) => (\n                              <li key={index}>{item}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"confirmPassword\"\n                      type={showConfirmPassword ? \"text\" : \"password\"}\n                      value={passwordData.confirmPassword}\n                      onChange={(e) => handlePasswordChange('confirmPassword', e.target.value)}\n                      placeholder=\"Confirm new password\"\n                      required\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-auto p-1\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    >\n                      {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                  {passwordData.confirmPassword && passwordData.newPassword !== passwordData.confirmPassword && (\n                    <p className=\"text-sm text-red-600 flex items-center space-x-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      <span>Passwords do not match</span>\n                    </p>\n                  )}\n                  {passwordData.confirmPassword && passwordData.newPassword === passwordData.confirmPassword && (\n                    <p className=\"text-sm text-green-600 flex items-center space-x-1\">\n                      <CheckCircle2 className=\"h-3 w-3\" />\n                      <span>Passwords match</span>\n                    </p>\n                  )}\n                </div>\n\n                <Button type=\"submit\" disabled={saving} className=\"w-full md:w-auto\">\n                  {saving ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      <span>Changing...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Key className=\"h-4 w-4\" />\n                      <span>Change Password</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Account Summary */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Account Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                  <User className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">{profileData.name || 'Not set'}</p>\n                  <p className=\"text-sm text-gray-500\">Administrator</p>\n                </div>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <Mail className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-sm\">{profileData.email || 'Not set'}</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Phone className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-sm\">{profileData.phone || 'Not set'}</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <MapPin className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-sm\">{profileData.address || 'Not set'}</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-sm\">Joined {new Date().toLocaleDateString()}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Security Status</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Two-Factor Authentication</span>\n                <Badge variant=\"outline\" className=\"text-orange-600 border-orange-600\">\n                  Not Enabled\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Last Password Change</span>\n                <span className=\"text-sm text-gray-500\">30 days ago</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Account Status</span>\n                <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                  Active\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminProfile;","size_bytes":23312},"frontend/src/pages/Admin/AdminProjects.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Badge } from '../../components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { useToast } from '../../hooks/use-toast';\nimport { Plus, Edit, Trash2, ExternalLink, Github } from 'lucide-react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\nimport { handleError, handleSuccess, apiCall, handleValidationErrors } from '../../utils/errorHandler';\nimport { LoadingWrapper, CardLoading, ButtonLoading, EmptyState } from '../../components/ui/loading';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminProjects = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editProject, setEditProject] = useState(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    image: '',\n    category: '',\n    tags: '',\n    technologies: '',\n    live_url: '',\n    github_url: '',\n    featured: false\n  });\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const fetchProjects = async () => {\n    await apiCall(\n      async () => {\n        const config = token ? {\n          headers: { Authorization: `Bearer ${token}` }\n        } : {};\n        \n        const response = await axios.get(`${API}/admin/projects`, config);\n        return response.data;\n      },\n      {\n        onStart: () => setLoading(true),\n        onSuccess: (data) => {\n          setProjects(data);\n          setLoading(false);\n        },\n        onError: (error) => {\n          handleError(error, 'Failed to load projects');\n          setLoading(false);\n        },\n        showSuccessToast: false\n      }\n    );\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Validate form data\n    const errors = {};\n    if (!formData.title) errors.title = 'Title is required';\n    if (!formData.description) errors.description = 'Description is required';\n    if (!formData.category) errors.category = 'Category is required';\n    \n    if (Object.keys(errors).length > 0) {\n      handleError(new Error('Validation failed'), 'Please fill in all required fields');\n      return;\n    }\n\n    await apiCall(\n      async () => {\n        const config = token ? {\n          headers: { Authorization: `Bearer ${token}` }\n        } : {};\n        \n        const projectData = {\n          ...formData,\n          tags: formData.tags.split(',').map(t => t.trim()),\n          technologies: formData.technologies.split(',').map(t => t.trim())\n        };\n\n        if (editProject) {\n          await axios.put(`${API}/admin/projects/${editProject.id}`, projectData, config);\n          return 'updated';\n        } else {\n          await axios.post(`${API}/admin/projects`, projectData, config);\n          return 'created';\n        }\n      },\n      {\n        onStart: () => setLoading(true),\n        onSuccess: async (result) => {\n          handleSuccess(`Project ${result} successfully`);\n          await fetchProjects();\n          resetForm();\n          setIsDialogOpen(false);\n          setLoading(false);\n        },\n        onError: (error) => {\n          handleError(error, 'Failed to save project');\n          setLoading(false);\n        }\n      }\n    );\n  };\n\n  const handleEdit = (project) => {\n    setEditProject(project);\n    setFormData({\n      title: project.title,\n      description: project.description,\n      image: project.image,\n      category: project.category,\n      tags: project.tags.join(', '),\n      technologies: project.technologies.join(', '),\n      live_url: project.live_url,\n      github_url: project.github_url || '',\n      featured: project.featured\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (projectId) => {\n    if (window.confirm('Are you sure you want to delete this project?')) {\n      await apiCall(\n        async () => {\n          const config = token ? {\n            headers: { Authorization: `Bearer ${token}` }\n          } : {};\n          \n          await axios.delete(`${API}/admin/projects/${projectId}`, config);\n        },\n        {\n          onStart: () => setLoading(true),\n          onSuccess: async () => {\n            handleSuccess('Project deleted successfully');\n            await fetchProjects();\n            setLoading(false);\n          },\n          onError: (error) => {\n            handleError(error, 'Failed to delete project');\n            setLoading(false);\n          }\n        }\n      );\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      image: '',\n      category: '',\n      tags: '',\n      technologies: '',\n      live_url: '',\n      github_url: '',\n      featured: false\n    });\n    setEditProject(null);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  return (\n    <LoadingWrapper\n      loading={loading}\n      onRetry={fetchProjects}\n      empty={projects.length === 0}\n      emptyComponent={\n        <EmptyState\n          title=\"No projects found\"\n          message=\"Start by creating your first project to showcase your work.\"\n          action={\n            <Button onClick={() => setIsDialogOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add First Project\n            </Button>\n          }\n        />\n      }\n    >\n      <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Projects Management</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Project\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editProject ? 'Edit Project' : 'Add New Project'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Project Title</Label>\n                  <Input\n                    id=\"title\"\n                    name=\"title\"\n                    value={formData.title}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Input\n                    id=\"category\"\n                    name=\"category\"\n                    value={formData.category}\n                    onChange={handleInputChange}\n                    placeholder=\"Web Application\"\n                    required\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image\">Image URL</Label>\n                <Input\n                  id=\"image\"\n                  name=\"image\"\n                  value={formData.image}\n                  onChange={handleInputChange}\n                  placeholder=\"https://example.com/image.jpg\"\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"live_url\">Live URL</Label>\n                  <Input\n                    id=\"live_url\"\n                    name=\"live_url\"\n                    value={formData.live_url}\n                    onChange={handleInputChange}\n                    placeholder=\"https://example.com\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"github_url\">GitHub URL (Optional)</Label>\n                  <Input\n                    id=\"github_url\"\n                    name=\"github_url\"\n                    value={formData.github_url}\n                    onChange={handleInputChange}\n                    placeholder=\"https://github.com/username/repo\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"technologies\">Technologies (comma separated)</Label>\n                <Textarea\n                  id=\"technologies\"\n                  name=\"technologies\"\n                  value={formData.technologies}\n                  onChange={handleInputChange}\n                  placeholder=\"React, Node.js, MongoDB\"\n                  rows={2}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tags\">Tags (comma separated)</Label>\n                <Textarea\n                  id=\"tags\"\n                  name=\"tags\"\n                  value={formData.tags}\n                  onChange={handleInputChange}\n                  placeholder=\"Web App, Dashboard, Analytics\"\n                  rows={2}\n                  required\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"featured\"\n                  name=\"featured\"\n                  checked={formData.featured}\n                  onChange={handleInputChange}\n                />\n                <Label htmlFor=\"featured\">Featured Project</Label>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <ButtonLoading loading={loading} type=\"submit\">\n                  {editProject ? 'Update Project' : 'Create Project'}\n                </ButtonLoading>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {projects.map((project) => (\n          <Card key={project.id} className=\"hover:shadow-lg transition-shadow\">\n            <div className=\"aspect-video overflow-hidden rounded-t-lg\">\n              <img \n                src={project.image} \n                alt={project.title}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg\">{project.title}</CardTitle>\n                <div className=\"flex space-x-2\">\n                  {project.featured && (\n                    <Badge variant=\"default\">Featured</Badge>\n                  )}\n                  <Badge variant=\"outline\">{project.category}</Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-gray-600 text-sm\">{project.description}</p>\n              \n              <div className=\"space-y-2\">\n                <span className=\"font-medium text-sm\">Technologies:</span>\n                <div className=\"flex flex-wrap gap-1\">\n                  {project.technologies.slice(0, 3).map((tech, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                      {tech}\n                    </Badge>\n                  ))}\n                  {project.technologies.length > 3 && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      +{project.technologies.length - 3} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2 pt-4\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleEdit(project)}\n                >\n                  <Edit className=\"h-4 w-4 mr-1\" />\n                  Edit\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => window.open(project.live_url, '_blank')}\n                >\n                  <ExternalLink className=\"h-4 w-4 mr-1\" />\n                  View\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleDelete(project.id)}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      </div>\n    </LoadingWrapper>\n  );\n};\n\nexport default AdminProjects;","size_bytes":13838},"frontend/src/pages/Admin/AdminServices.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Badge } from '../../components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { useToast } from '../../hooks/use-toast';\nimport { Plus, Edit, Trash2, Eye } from 'lucide-react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminServices = () => {\n  const [services, setServices] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editService, setEditService] = useState(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    price: '',\n    duration: '',\n    features: '',\n    icon: 'Globe',\n    active: true\n  });\n\n  useEffect(() => {\n    fetchServices();\n  }, []);\n\n  const fetchServices = async () => {\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n      \n      const response = await axios.get(`${API}/admin/services`, config);\n      setServices(response.data);\n    } catch (error) {\n      console.error('Fetch services error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch services\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSubmitLoading(true);\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n      \n      const serviceData = {\n        ...formData,\n        features: formData.features.split(',').map(f => f.trim())\n      };\n\n      if (editService) {\n        await axios.put(`${API}/admin/services/${editService.id}`, serviceData, config);\n        toast({\n          title: \"Success\",\n          description: \"Service updated successfully\"\n        });\n      } else {\n        await axios.post(`${API}/admin/services`, serviceData, config);\n        toast({\n          title: \"Success\",\n          description: \"Service created successfully\"\n        });\n      }\n\n      // Refresh the services list immediately\n      await fetchServices();\n      resetForm();\n      setIsDialogOpen(false);\n    } catch (error) {\n      console.error('Service save error:', error);\n      toast({\n        title: \"Error\", \n        description: error.response?.data?.detail || \"Failed to save service\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSubmitLoading(false);\n    }\n  };\n\n  const handleEdit = (service) => {\n    setEditService(service);\n    setFormData({\n      title: service.title,\n      description: service.description,\n      price: service.price,\n      duration: service.duration,\n      features: service.features.join(', '),\n      icon: service.icon,\n      active: service.active\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (serviceId) => {\n    if (window.confirm('Are you sure you want to delete this service?')) {\n      setLoading(true);\n      try {\n        const config = token ? {\n          headers: { Authorization: `Bearer ${token}` }\n        } : {};\n        \n        await axios.delete(`${API}/admin/services/${serviceId}`, config);\n        toast({\n          title: \"Success\",\n          description: \"Service deleted successfully\"\n        });\n        // Refresh the services list immediately\n        await fetchServices();\n      } catch (error) {\n        console.error('Delete error:', error);\n        toast({\n          title: \"Error\",\n          description: error.response?.data?.detail || \"Failed to delete service\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      price: '',\n      duration: '',\n      features: '',\n      icon: 'Globe',\n      active: true\n    });\n    setEditService(null);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Services Management</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Service\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editService ? 'Edit Service' : 'Add New Service'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Service Title</Label>\n                  <Input\n                    id=\"title\"\n                    name=\"title\"\n                    value={formData.title}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"icon\">Icon</Label>\n                  <select\n                    id=\"icon\"\n                    name=\"icon\"\n                    value={formData.icon}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  >\n                    <option value=\"Globe\">Globe</option>\n                    <option value=\"Layout\">Layout</option>\n                    <option value=\"Palette\">Palette</option>\n                    <option value=\"Code\">Code</option>\n                    <option value=\"PenTool\">PenTool</option>\n                    <option value=\"TrendingUp\">TrendingUp</option>\n                  </select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"price\">Price</Label>\n                  <Input\n                    id=\"price\"\n                    name=\"price\"\n                    value={formData.price}\n                    onChange={handleInputChange}\n                    placeholder=\"Starting from ₹15,000\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"duration\">Duration</Label>\n                  <Input\n                    id=\"duration\"\n                    name=\"duration\"\n                    value={formData.duration}\n                    onChange={handleInputChange}\n                    placeholder=\"7-14 days\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"features\">Features (comma separated)</Label>\n                <Textarea\n                  id=\"features\"\n                  name=\"features\"\n                  value={formData.features}\n                  onChange={handleInputChange}\n                  placeholder=\"Responsive Design, Fast Loading, SEO Optimized\"\n                  rows={2}\n                  required\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"active\"\n                  name=\"active\"\n                  checked={formData.active}\n                  onChange={handleInputChange}\n                />\n                <Label htmlFor=\"active\">Active Service</Label>\n              </div>\n\n              <div className=\"flex space-x-4 pt-4\">\n                <Button type=\"submit\" disabled={submitLoading}>\n                  {submitLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      {editService ? 'Updating...' : 'Creating...'}\n                    </>\n                  ) : (\n                    editService ? 'Update Service' : 'Create Service'\n                  )}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                  disabled={submitLoading}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {services.map((service) => (\n          <Card key={service.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg\">{service.title}</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Badge variant={service.active ? \"default\" : \"secondary\"}>\n                    {service.active ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-gray-600 text-sm\">{service.description}</p>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"font-medium\">Price:</span>\n                  <span className=\"text-blue-600\">{service.price}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"font-medium\">Duration:</span>\n                  <span>{service.duration}</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <span className=\"font-medium text-sm\">Features:</span>\n                <div className=\"flex flex-wrap gap-1\">\n                  {service.features.slice(0, 3).map((feature, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {feature}\n                    </Badge>\n                  ))}\n                  {service.features.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{service.features.length - 3} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2 pt-4\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleEdit(service)}\n                >\n                  <Edit className=\"h-4 w-4 mr-1\" />\n                  Edit\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleDelete(service.id)}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {services.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\">No services found. Create your first service!</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminServices;","size_bytes":12776},"frontend/src/pages/Admin/AdminTestimonials.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Badge } from '../../components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\nimport { Switch } from '../../components/ui/switch';\nimport { useToast } from '../../hooks/use-toast';\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Star, \n  Search, \n  Filter, \n  Eye, \n  EyeOff, \n  User, \n  Building, \n  MessageSquare,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Upload,\n  Image as ImageIcon\n} from 'lucide-react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminTestimonials = () => {\n  const [testimonials, setTestimonials] = useState([]);\n  const [filteredTestimonials, setFilteredTestimonials] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editTestimonial, setEditTestimonial] = useState(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterRating, setFilterRating] = useState('all');\n  const [imagePreview, setImagePreview] = useState('');\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  const [formData, setFormData] = useState({\n    name: '',\n    position: '',\n    company: '',\n    text: '',\n    rating: 5,\n    image: '',\n    approved: true\n  });\n\n  const [formErrors, setFormErrors] = useState({});\n\n  useEffect(() => {\n    fetchTestimonials();\n  }, []);\n\n  useEffect(() => {\n    filterTestimonials();\n  }, [testimonials, searchTerm, filterStatus, filterRating]);\n\n  const fetchTestimonials = async () => {\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n      \n      const response = await axios.get(`${API}/admin/testimonials`, config);\n      setTestimonials(response.data);\n    } catch (error) {\n      console.error('Fetch testimonials error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch testimonials\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterTestimonials = () => {\n    let filtered = testimonials;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(testimonial => \n        testimonial.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        testimonial.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        testimonial.position.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        testimonial.text.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Status filter\n    if (filterStatus !== 'all') {\n      filtered = filtered.filter(testimonial => \n        filterStatus === 'approved' ? testimonial.approved : !testimonial.approved\n      );\n    }\n\n    // Rating filter\n    if (filterRating !== 'all') {\n      filtered = filtered.filter(testimonial => \n        testimonial.rating === parseInt(filterRating)\n      );\n    }\n\n    setFilteredTestimonials(filtered);\n  };\n\n  const validateForm = () => {\n    const errors = {};\n\n    if (!formData.name.trim()) {\n      errors.name = 'Client name is required';\n    } else if (formData.name.length < 2) {\n      errors.name = 'Name must be at least 2 characters';\n    }\n\n    if (!formData.position.trim()) {\n      errors.position = 'Position is required';\n    }\n\n    if (!formData.company.trim()) {\n      errors.company = 'Company is required';\n    }\n\n    if (!formData.text.trim()) {\n      errors.text = 'Testimonial text is required';\n    } else if (formData.text.length < 10) {\n      errors.text = 'Testimonial must be at least 10 characters';\n    } else if (formData.text.length > 500) {\n      errors.text = 'Testimonial must be less than 500 characters';\n    }\n\n    if (!formData.image.trim()) {\n      errors.image = 'Profile image URL is required';\n    } else if (!isValidUrl(formData.image)) {\n      errors.image = 'Please enter a valid image URL';\n    }\n\n    if (formData.rating < 1 || formData.rating > 5) {\n      errors.rating = 'Rating must be between 1 and 5';\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const isValidUrl = (string) => {\n    try {\n      new URL(string);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fix the errors in the form\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setSubmitLoading(true);\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n\n      if (editTestimonial) {\n        await axios.put(`${API}/admin/testimonials/${editTestimonial.id}`, formData, config);\n        toast({\n          title: \"Success\",\n          description: \"Testimonial updated successfully\"\n        });\n      } else {\n        await axios.post(`${API}/admin/testimonials`, formData, config);\n        toast({\n          title: \"Success\",\n          description: \"Testimonial created successfully\"\n        });\n      }\n\n      await fetchTestimonials();\n      resetForm();\n      setIsDialogOpen(false);\n    } catch (error) {\n      console.error('Testimonial save error:', error);\n      toast({\n        title: \"Error\", \n        description: error.response?.data?.detail || \"Failed to save testimonial\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSubmitLoading(false);\n    }\n  };\n\n  const handleEdit = (testimonial) => {\n    setEditTestimonial(testimonial);\n    setFormData({\n      name: testimonial.name,\n      position: testimonial.position,\n      company: testimonial.company,\n      text: testimonial.text,\n      rating: testimonial.rating,\n      image: testimonial.image,\n      approved: testimonial.approved\n    });\n    setImagePreview(testimonial.image);\n    setFormErrors({});\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (testimonialId) => {\n    if (window.confirm('Are you sure you want to delete this testimonial?')) {\n      setLoading(true);\n      try {\n        const config = token ? {\n          headers: { Authorization: `Bearer ${token}` }\n        } : {};\n        \n        await axios.delete(`${API}/admin/testimonials/${testimonialId}`, config);\n        toast({\n          title: \"Success\",\n          description: \"Testimonial deleted successfully\"\n        });\n        await fetchTestimonials();\n      } catch (error) {\n        console.error('Delete error:', error);\n        toast({\n          title: \"Error\",\n          description: error.response?.data?.detail || \"Failed to delete testimonial\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const toggleApproval = async (testimonial) => {\n    try {\n      const config = token ? {\n        headers: { Authorization: `Bearer ${token}` }\n      } : {};\n      \n      await axios.put(`${API}/admin/testimonials/${testimonial.id}`, {\n        ...testimonial,\n        approved: !testimonial.approved\n      }, config);\n      \n      toast({\n        title: \"Success\",\n        description: `Testimonial ${!testimonial.approved ? 'approved' : 'unapproved'} successfully`\n      });\n      \n      await fetchTestimonials();\n    } catch (error) {\n      console.error('Toggle approval error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update testimonial status\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      position: '',\n      company: '',\n      text: '',\n      rating: 5,\n      image: '',\n      approved: true\n    });\n    setEditTestimonial(null);\n    setFormErrors({});\n    setImagePreview('');\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const newValue = type === 'checkbox' ? checked : (type === 'number' ? parseInt(value) : value);\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: newValue\n    }));\n\n    // Clear error when user starts typing\n    if (formErrors[name]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n\n    // Update image preview\n    if (name === 'image' && isValidUrl(value)) {\n      setImagePreview(value);\n    }\n  };\n\n  const handleRatingChange = (rating) => {\n    setFormData(prev => ({ ...prev, rating: parseInt(rating) }));\n    if (formErrors.rating) {\n      setFormErrors(prev => ({ ...prev, rating: '' }));\n    }\n  };\n\n  const getStatusStats = () => {\n    const approved = testimonials.filter(t => t.approved).length;\n    const pending = testimonials.filter(t => !t.approved).length;\n    const avgRating = testimonials.length > 0 \n      ? (testimonials.reduce((sum, t) => sum + t.rating, 0) / testimonials.length).toFixed(1)\n      : 0;\n    \n    return { approved, pending, avgRating, total: testimonials.length };\n  };\n\n  const stats = getStatusStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Testimonials Management</h1>\n          <p className=\"text-gray-600 mt-1\">Manage client testimonials and reviews</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm} className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Testimonial\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                {editTestimonial ? 'Edit Testimonial' : 'Add New Testimonial'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Client Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n                  <User className=\"h-5 w-5\" />\n                  Client Information\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Client Name *</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      className={formErrors.name ? 'border-red-500' : ''}\n                      placeholder=\"Enter client name\"\n                    />\n                    {formErrors.name && (\n                      <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                        <AlertCircle className=\"h-3 w-3\" />\n                        {formErrors.name}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"position\">Position *</Label>\n                    <Input\n                      id=\"position\"\n                      name=\"position\"\n                      value={formData.position}\n                      onChange={handleInputChange}\n                      className={formErrors.position ? 'border-red-500' : ''}\n                      placeholder=\"e.g., CEO, Manager\"\n                    />\n                    {formErrors.position && (\n                      <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                        <AlertCircle className=\"h-3 w-3\" />\n                        {formErrors.position}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company\">Company *</Label>\n                    <Input\n                      id=\"company\"\n                      name=\"company\"\n                      value={formData.company}\n                      onChange={handleInputChange}\n                      className={formErrors.company ? 'border-red-500' : ''}\n                      placeholder=\"Enter company name\"\n                    />\n                    {formErrors.company && (\n                      <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                        <AlertCircle className=\"h-3 w-3\" />\n                        {formErrors.company}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"rating\">Rating *</Label>\n                    <Select value={formData.rating.toString()} onValueChange={handleRatingChange}>\n                      <SelectTrigger className={formErrors.rating ? 'border-red-500' : ''}>\n                        <SelectValue placeholder=\"Select rating\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {[1, 2, 3, 4, 5].map(rating => (\n                          <SelectItem key={rating} value={rating.toString()}>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"flex\">\n                                {[...Array(rating)].map((_, i) => (\n                                  <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                                ))}\n                              </div>\n                              <span>{rating} Star{rating !== 1 ? 's' : ''}</span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {formErrors.rating && (\n                      <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                        <AlertCircle className=\"h-3 w-3\" />\n                        {formErrors.rating}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Testimonial Content */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  Testimonial Content\n                </h3>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"text\">Testimonial Text *</Label>\n                  <Textarea\n                    id=\"text\"\n                    name=\"text\"\n                    value={formData.text}\n                    onChange={handleInputChange}\n                    rows={4}\n                    className={formErrors.text ? 'border-red-500' : ''}\n                    placeholder=\"Enter the testimonial text...\"\n                  />\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      {formErrors.text && (\n                        <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                          <AlertCircle className=\"h-3 w-3\" />\n                          {formErrors.text}\n                        </p>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-500\">\n                      {formData.text.length}/500 characters\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Profile Image */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n                  <ImageIcon className=\"h-5 w-5\" />\n                  Profile Image\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"image\">Profile Image URL *</Label>\n                    <Input\n                      id=\"image\"\n                      name=\"image\"\n                      value={formData.image}\n                      onChange={handleInputChange}\n                      className={formErrors.image ? 'border-red-500' : ''}\n                      placeholder=\"https://example.com/image.jpg\"\n                    />\n                    {formErrors.image && (\n                      <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                        <AlertCircle className=\"h-3 w-3\" />\n                        {formErrors.image}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Preview</Label>\n                    <div className=\"w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center\">\n                      {imagePreview ? (\n                        <img \n                          src={imagePreview} \n                          alt=\"Preview\"\n                          className=\"w-full h-full object-cover rounded-lg\"\n                          onError={() => setImagePreview('')}\n                        />\n                      ) : (\n                        <ImageIcon className=\"h-8 w-8 text-gray-400\" />\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Settings */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Settings</h3>\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"approved\">Approved for Display</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      When enabled, this testimonial will be visible on the website\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"approved\"\n                    checked={formData.approved}\n                    onCheckedChange={(checked) => \n                      setFormData(prev => ({ ...prev, approved: checked }))\n                    }\n                  />\n                </div>\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex flex-col sm:flex-row gap-3 pt-6 border-t\">\n                <Button type=\"submit\" disabled={submitLoading} className=\"flex-1\">\n                  {submitLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      {editTestimonial ? 'Updating...' : 'Creating...'}\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      {editTestimonial ? 'Update Testimonial' : 'Create Testimonial'}\n                    </>\n                  )}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                  disabled={submitLoading}\n                  className=\"flex-1\"\n                >\n                  <XCircle className=\"h-4 w-4 mr-2\" />\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Testimonials</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.total}</p>\n              </div>\n              <MessageSquare className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Approved</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.approved}</p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                <p className=\"text-2xl font-bold text-orange-600\">{stats.pending}</p>\n              </div>\n              <AlertCircle className=\"h-8 w-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Avg Rating</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{stats.avgRating}</p>\n              </div>\n              <Star className=\"h-8 w-8 text-yellow-600 fill-current\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search testimonials...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={filterRating} onValueChange={setFilterRating}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filter by rating\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Ratings</SelectItem>\n                {[5, 4, 3, 2, 1].map(rating => (\n                  <SelectItem key={rating} value={rating.toString()}>\n                    {rating} Star{rating !== 1 ? 's' : ''}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Testimonials Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredTestimonials.map((testimonial) => (\n          <Card key={testimonial.id} className=\"hover:shadow-lg transition-all duration-200 border-l-4 border-l-blue-500\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"relative\">\n                    <img \n                      src={testimonial.image} \n                      alt={testimonial.name}\n                      className=\"w-12 h-12 rounded-full object-cover border-2 border-gray-200\"\n                    />\n                    {testimonial.approved && (\n                      <div className=\"absolute -bottom-1 -right-1 bg-green-500 rounded-full p-1\">\n                        <CheckCircle className=\"h-3 w-3 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">{testimonial.name}</CardTitle>\n                    <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                      <User className=\"h-3 w-3\" />\n                      {testimonial.position}\n                    </p>\n                    <p className=\"text-xs text-blue-600 flex items-center gap-1\">\n                      <Building className=\"h-3 w-3\" />\n                      {testimonial.company}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex flex-col items-end gap-2\">\n                  <Badge \n                    variant={testimonial.approved ? \"default\" : \"secondary\"}\n                    className={testimonial.approved ? \"bg-green-100 text-green-800\" : \"bg-orange-100 text-orange-800\"}\n                  >\n                    {testimonial.approved ? \"Approved\" : \"Pending\"}\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-1\">\n                {[...Array(5)].map((_, i) => (\n                  <Star \n                    key={i} \n                    className={`h-4 w-4 ${\n                      i < testimonial.rating \n                        ? 'fill-yellow-400 text-yellow-400' \n                        : 'text-gray-300'\n                    }`} \n                  />\n                ))}\n                <span className=\"text-sm text-gray-600 ml-2\">({testimonial.rating}/5)</span>\n              </div>\n              \n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <p className=\"text-gray-700 text-sm italic line-clamp-3\">\n                  \"{testimonial.text}\"\n                </p>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2 pt-4\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleEdit(testimonial)}\n                  className=\"flex-1\"\n                >\n                  <Edit className=\"h-4 w-4 mr-1\" />\n                  Edit\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant={testimonial.approved ? \"secondary\" : \"default\"}\n                  onClick={() => toggleApproval(testimonial)}\n                  className=\"flex-1\"\n                >\n                  {testimonial.approved ? (\n                    <>\n                      <EyeOff className=\"h-4 w-4 mr-1\" />\n                      Hide\n                    </>\n                  ) : (\n                    <>\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Approve\n                    </>\n                  )}\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleDelete(testimonial.id)}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {filteredTestimonials.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <MessageSquare className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              {searchTerm || filterStatus !== 'all' || filterRating !== 'all' \n                ? 'No testimonials found' \n                : 'No testimonials yet'\n              }\n            </h3>\n            <p className=\"text-gray-500 mb-4\">\n              {searchTerm || filterStatus !== 'all' || filterRating !== 'all'\n                ? 'Try adjusting your search or filters'\n                : 'Create your first testimonial to get started'\n              }\n            </p>\n            {(!searchTerm && filterStatus === 'all' && filterRating === 'all') && (\n              <Button onClick={() => { resetForm(); setIsDialogOpen(true); }}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add First Testimonial\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default AdminTestimonials;","size_bytes":29635},"frontend/src/pages/Admin/AdminAppearance.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Switch } from '../../components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/tabs';\nimport { \n  Palette,\n  Monitor,\n  Navigation,\n  Type,\n  Eye,\n  Save,\n  RefreshCw,\n  Plus,\n  Trash2,\n  ExternalLink,\n  Facebook,\n  Twitter,\n  Instagram,\n  Linkedin,\n  Github\n} from 'lucide-react';\nimport axios from 'axios';\nimport { useToast } from '../../hooks/use-toast';\nimport { useAuth } from '../../context/AuthContext';\nimport { handleError, handleSuccess, apiCall } from '../../utils/errorHandler';\nimport { LoadingWrapper } from '../../components/ui/loading';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminAppearance = () => {\n  const [siteSettings, setSiteSettings] = useState(null);\n  const [mediaSettings, setMediaSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [previewMode, setPreviewMode] = useState(false);\n\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const fetchSettings = async () => {\n    setLoading(true);\n    try {\n      const [siteResponse, mediaResponse] = await Promise.all([\n        axios.get(`${API}/admin/site-settings`, {\n          headers: { Authorization: `Bearer ${token}` }\n        }),\n        axios.get(`${API}/admin/media-settings`, {\n          headers: { Authorization: `Bearer ${token}` }\n        })\n      ]);\n      \n      setSiteSettings(siteResponse.data);\n      setMediaSettings(mediaResponse.data);\n    } catch (error) {\n      handleError(error, 'Failed to load appearance settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveSiteSettings = async () => {\n    setSaving(true);\n    try {\n      await axios.put(`${API}/admin/site-settings`, siteSettings, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      handleSuccess('Site settings saved successfully');\n    } catch (error) {\n      handleError(error, 'Failed to save site settings');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const addNavLink = () => {\n    const newLink = {\n      label: 'New Link',\n      url: '/',\n      external: false,\n      order: (siteSettings.nav_links?.length || 0) + 1\n    };\n    setSiteSettings(prev => ({\n      ...prev,\n      nav_links: [...(prev.nav_links || []), newLink]\n    }));\n  };\n\n  const updateNavLink = (index, field, value) => {\n    const newNavLinks = [...(siteSettings.nav_links || [])];\n    newNavLinks[index] = { ...newNavLinks[index], [field]: value };\n    setSiteSettings(prev => ({ ...prev, nav_links: newNavLinks }));\n  };\n\n  const removeNavLink = (index) => {\n    const newNavLinks = [...(siteSettings.nav_links || [])];\n    newNavLinks.splice(index, 1);\n    setSiteSettings(prev => ({ ...prev, nav_links: newNavLinks }));\n  };\n\n  const addSocialLink = () => {\n    const newLink = {\n      platform: 'facebook',\n      url: '',\n      icon: 'facebook'\n    };\n    setSiteSettings(prev => ({\n      ...prev,\n      social_links: [...(prev.social_links || []), newLink]\n    }));\n  };\n\n  const updateSocialLink = (index, field, value) => {\n    const newSocialLinks = [...(siteSettings.social_links || [])];\n    newSocialLinks[index] = { ...newSocialLinks[index], [field]: value };\n    setSiteSettings(prev => ({ ...prev, social_links: newSocialLinks }));\n  };\n\n  const removeSocialLink = (index) => {\n    const newSocialLinks = [...(siteSettings.social_links || [])];\n    newSocialLinks.splice(index, 1);\n    setSiteSettings(prev => ({ ...prev, social_links: newSocialLinks }));\n  };\n\n  const getSocialIcon = (platform) => {\n    const icons = {\n      facebook: Facebook,\n      twitter: Twitter,\n      instagram: Instagram,\n      linkedin: Linkedin,\n      github: Github\n    };\n    return icons[platform] || ExternalLink;\n  };\n\n  if (loading) {\n    return <LoadingWrapper />;\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Appearance Settings</h1>\n          <p className=\"text-gray-600 mt-1\">Customize your site's look, colors, and branding</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setPreviewMode(!previewMode)}\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            {previewMode ? 'Edit Mode' : 'Preview Mode'}\n          </Button>\n          \n          <Button onClick={saveSiteSettings} disabled={saving}>\n            {saving ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Save className=\"h-4 w-4 mr-2\" />\n            )}\n            Save Changes\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"branding\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"branding\">Branding</TabsTrigger>\n          <TabsTrigger value=\"colors\">Colors & Theme</TabsTrigger>\n          <TabsTrigger value=\"navigation\">Navigation</TabsTrigger>\n          <TabsTrigger value=\"social\">Social Links</TabsTrigger>\n        </TabsList>\n\n        {/* Branding Tab */}\n        <TabsContent value=\"branding\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Type className=\"h-5 w-5 mr-2\" />\n                Site Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"site_title\">Site Title</Label>\n                  <Input\n                    id=\"site_title\"\n                    value={siteSettings?.site_title || ''}\n                    onChange={(e) => setSiteSettings(prev => ({ ...prev, site_title: e.target.value }))}\n                    placeholder=\"Your Site Title\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"header_tagline\">Header Tagline</Label>\n                  <Input\n                    id=\"header_tagline\"\n                    value={siteSettings?.header_tagline || ''}\n                    onChange={(e) => setSiteSettings(prev => ({ ...prev, header_tagline: e.target.value }))}\n                    placeholder=\"Optional tagline for header\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"site_description\">Site Description</Label>\n                <Textarea\n                  id=\"site_description\"\n                  value={siteSettings?.site_description || ''}\n                  onChange={(e) => setSiteSettings(prev => ({ ...prev, site_description: e.target.value }))}\n                  placeholder=\"Brief description of your site\"\n                  rows={3}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"footer_text\">Footer Text</Label>\n                <Input\n                  id=\"footer_text\"\n                  value={siteSettings?.footer_text || ''}\n                  onChange={(e) => setSiteSettings(prev => ({ ...prev, footer_text: e.target.value }))}\n                  placeholder=\"© 2024 Your Company. All rights reserved.\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"contact_email\">Contact Email</Label>\n                <Input\n                  id=\"contact_email\"\n                  type=\"email\"\n                  value={siteSettings?.contact_email || ''}\n                  onChange={(e) => setSiteSettings(prev => ({ ...prev, contact_email: e.target.value }))}\n                  placeholder=\"contact@example.com\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"contact_phone\">Contact Phone</Label>\n                <Input\n                  id=\"contact_phone\"\n                  value={siteSettings?.contact_phone || ''}\n                  onChange={(e) => setSiteSettings(prev => ({ ...prev, contact_phone: e.target.value }))}\n                  placeholder=\"+1 (555) 123-4567\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"whatsapp_number\">WhatsApp Number</Label>\n                <Input\n                  id=\"whatsapp_number\"\n                  value={siteSettings?.whatsapp_number || ''}\n                  onChange={(e) => setSiteSettings(prev => ({ ...prev, whatsapp_number: e.target.value }))}\n                  placeholder=\"+1 (555) 123-4567\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Colors & Theme Tab */}\n        <TabsContent value=\"colors\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Palette className=\"h-5 w-5 mr-2\" />\n                Color Scheme\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <Label htmlFor=\"primary_color\" className=\"block mb-2\">Primary Color</Label>\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Input\n                      id=\"primary_color\"\n                      type=\"color\"\n                      value={siteSettings?.primary_color || '#3b82f6'}\n                      onChange={(e) => setSiteSettings(prev => ({ ...prev, primary_color: e.target.value }))}\n                      className=\"w-20 h-20 rounded-lg border-2\"\n                    />\n                    <Input\n                      value={siteSettings?.primary_color || '#3b82f6'}\n                      onChange={(e) => setSiteSettings(prev => ({ ...prev, primary_color: e.target.value }))}\n                      placeholder=\"#3b82f6\"\n                      className=\"text-center\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <Label htmlFor=\"secondary_color\" className=\"block mb-2\">Secondary Color</Label>\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Input\n                      id=\"secondary_color\"\n                      type=\"color\"\n                      value={siteSettings?.secondary_color || '#1e40af'}\n                      onChange={(e) => setSiteSettings(prev => ({ ...prev, secondary_color: e.target.value }))}\n                      className=\"w-20 h-20 rounded-lg border-2\"\n                    />\n                    <Input\n                      value={siteSettings?.secondary_color || '#1e40af'}\n                      onChange={(e) => setSiteSettings(prev => ({ ...prev, secondary_color: e.target.value }))}\n                      placeholder=\"#1e40af\"\n                      className=\"text-center\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <Label htmlFor=\"accent_color\" className=\"block mb-2\">Accent Color</Label>\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Input\n                      id=\"accent_color\"\n                      type=\"color\"\n                      value={siteSettings?.accent_color || '#ef4444'}\n                      onChange={(e) => setSiteSettings(prev => ({ ...prev, accent_color: e.target.value }))}\n                      className=\"w-20 h-20 rounded-lg border-2\"\n                    />\n                    <Input\n                      value={siteSettings?.accent_color || '#ef4444'}\n                      onChange={(e) => setSiteSettings(prev => ({ ...prev, accent_color: e.target.value }))}\n                      placeholder=\"#ef4444\"\n                      className=\"text-center\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Color Preview */}\n              <div className=\"bg-gray-50 p-6 rounded-lg border\">\n                <h4 className=\"font-medium mb-4\">Color Preview</h4>\n                <div className=\"space-y-3\">\n                  <div \n                    className=\"p-4 rounded text-white font-medium\"\n                    style={{ backgroundColor: siteSettings?.primary_color || '#3b82f6' }}\n                  >\n                    Primary Color Sample\n                  </div>\n                  <div \n                    className=\"p-4 rounded text-white font-medium\"\n                    style={{ backgroundColor: siteSettings?.secondary_color || '#1e40af' }}\n                  >\n                    Secondary Color Sample\n                  </div>\n                  <div \n                    className=\"p-4 rounded text-white font-medium\"\n                    style={{ backgroundColor: siteSettings?.accent_color || '#ef4444' }}\n                  >\n                    Accent Color Sample\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Navigation Tab */}\n        <TabsContent value=\"navigation\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"flex items-center\">\n                  <Navigation className=\"h-5 w-5 mr-2\" />\n                  Navigation Links\n                </CardTitle>\n                <Button onClick={addNavLink} size=\"sm\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Link\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {siteSettings?.nav_links?.map((link, index) => (\n                <div key={index} className=\"flex items-center space-x-3 p-4 border rounded-lg\">\n                  <div className=\"flex-1 grid grid-cols-3 gap-3\">\n                    <Input\n                      value={link.label}\n                      onChange={(e) => updateNavLink(index, 'label', e.target.value)}\n                      placeholder=\"Link Label\"\n                    />\n                    <Input\n                      value={link.url}\n                      onChange={(e) => updateNavLink(index, 'url', e.target.value)}\n                      placeholder=\"/about\"\n                    />\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={link.external}\n                        onCheckedChange={(checked) => updateNavLink(index, 'external', checked)}\n                      />\n                      <Label className=\"text-sm\">External</Label>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeNavLink(index)}\n                    className=\"text-red-600 hover:text-red-700\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n              \n              {(!siteSettings?.nav_links || siteSettings.nav_links.length === 0) && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  No navigation links configured. Click \"Add Link\" to get started.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Social Links Tab */}\n        <TabsContent value=\"social\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Social Media Links</CardTitle>\n                <Button onClick={addSocialLink} size=\"sm\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Social Link\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {siteSettings?.social_links?.map((link, index) => {\n                const IconComponent = getSocialIcon(link.platform);\n                return (\n                  <div key={index} className=\"flex items-center space-x-3 p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-2\">\n                      <IconComponent className=\"h-5 w-5 text-gray-600\" />\n                    </div>\n                    <div className=\"flex-1 grid grid-cols-2 gap-3\">\n                      <select\n                        value={link.platform}\n                        onChange={(e) => updateSocialLink(index, 'platform', e.target.value)}\n                        className=\"px-3 py-2 border rounded-md\"\n                      >\n                        <option value=\"facebook\">Facebook</option>\n                        <option value=\"twitter\">Twitter</option>\n                        <option value=\"instagram\">Instagram</option>\n                        <option value=\"linkedin\">LinkedIn</option>\n                        <option value=\"github\">GitHub</option>\n                      </select>\n                      <Input\n                        value={link.url}\n                        onChange={(e) => updateSocialLink(index, 'url', e.target.value)}\n                        placeholder=\"https://facebook.com/yourpage\"\n                      />\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeSocialLink(index)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                );\n              })}\n              \n              {(!siteSettings?.social_links || siteSettings.social_links.length === 0) && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  No social links configured. Click \"Add Social Link\" to get started.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default AdminAppearance;","size_bytes":19074},"frontend/src/pages/Admin/AdminOffers.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Switch } from '../../components/ui/switch';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { \n  Plus,\n  Edit,\n  Trash2,\n  Gift,\n  Calendar,\n  Clock,\n  Eye,\n  EyeOff,\n  DollarSign,\n  Percent,\n  Save,\n  X\n} from 'lucide-react';\nimport axios from 'axios';\nimport { useToast } from '../../hooks/use-toast';\nimport { useAuth } from '../../context/AuthContext';\nimport { handleError, handleSuccess, apiCall } from '../../utils/errorHandler';\nimport { LoadingWrapper } from '../../components/ui/loading';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst AdminOffers = () => {\n  const [offers, setOffers] = useState([]);\n  const [siteSettings, setSiteSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedOffer, setSelectedOffer] = useState(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [formData, setFormData] = useState({\n    title: '',\n    subtitle: '',\n    description: '',\n    cta_text: 'Get Offer',\n    cta_url: '',\n    discount_percentage: '',\n    discount_amount: '',\n    active: true,\n    starts_at: '',\n    ends_at: '',\n    priority: 1,\n    background_color: '#ff6b6b',\n    text_color: '#ffffff'\n  });\n\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const [offersResponse, settingsResponse] = await Promise.all([\n        axios.get(`${API}/admin/offers`, {\n          headers: { Authorization: `Bearer ${token}` }\n        }),\n        axios.get(`${API}/admin/site-settings`, {\n          headers: { Authorization: `Bearer ${token}` }\n        })\n      ]);\n      \n      setOffers(offersResponse.data);\n      setSiteSettings(settingsResponse.data);\n    } catch (error) {\n      handleError(error, 'Failed to load offers data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleGlobalOffers = async () => {\n    try {\n      const newStatus = !siteSettings.offers_enabled;\n      await axios.put(`${API}/admin/site-settings`, {\n        ...siteSettings,\n        offers_enabled: newStatus\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      setSiteSettings(prev => ({ ...prev, offers_enabled: newStatus }));\n      handleSuccess(`Offers ${newStatus ? 'enabled' : 'disabled'} globally`);\n    } catch (error) {\n      handleError(error, 'Failed to update global offer settings');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      if (selectedOffer) {\n        // Update existing offer\n        await axios.put(`${API}/admin/offers/${selectedOffer.id}`, formData, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        handleSuccess('Offer updated successfully');\n      } else {\n        // Create new offer\n        await axios.post(`${API}/admin/offers`, formData, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        handleSuccess('Offer created successfully');\n      }\n      \n      resetForm();\n      fetchData();\n    } catch (error) {\n      handleError(error, `Failed to ${selectedOffer ? 'update' : 'create'} offer`);\n    }\n  };\n\n  const deleteOffer = async (offerId) => {\n    if (!window.confirm('Are you sure you want to delete this offer?')) return;\n    \n    try {\n      await axios.delete(`${API}/admin/offers/${offerId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      handleSuccess('Offer deleted successfully');\n      fetchData();\n    } catch (error) {\n      handleError(error, 'Failed to delete offer');\n    }\n  };\n\n  const toggleOffer = async (offerId) => {\n    try {\n      await axios.patch(`${API}/admin/offers/${offerId}/toggle`, {}, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      handleSuccess('Offer status updated');\n      fetchData();\n    } catch (error) {\n      handleError(error, 'Failed to toggle offer');\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      subtitle: '',\n      description: '',\n      cta_text: 'Get Offer',\n      cta_url: '',\n      discount_percentage: '',\n      discount_amount: '',\n      active: true,\n      starts_at: '',\n      ends_at: '',\n      priority: 1,\n      background_color: '#ff6b6b',\n      text_color: '#ffffff'\n    });\n    setSelectedOffer(null);\n    setShowCreateDialog(false);\n  };\n\n  const editOffer = (offer) => {\n    setSelectedOffer(offer);\n    setFormData({\n      title: offer.title || '',\n      subtitle: offer.subtitle || '',\n      description: offer.description || '',\n      cta_text: offer.cta_text || 'Get Offer',\n      cta_url: offer.cta_url || '',\n      discount_percentage: offer.discount_percentage || '',\n      discount_amount: offer.discount_amount || '',\n      active: offer.active !== undefined ? offer.active : true,\n      starts_at: offer.starts_at ? offer.starts_at.split('T')[0] : '',\n      ends_at: offer.ends_at ? offer.ends_at.split('T')[0] : '',\n      priority: offer.priority || 1,\n      background_color: offer.background_color || '#ff6b6b',\n      text_color: offer.text_color || '#ffffff'\n    });\n    setShowCreateDialog(true);\n  };\n\n  if (loading) {\n    return <LoadingWrapper />;\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Offers & Promotions</h1>\n          <p className=\"text-gray-600 mt-1\">Manage promotional offers and campaign banners</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Global Toggle */}\n          <div className=\"flex items-center space-x-2 bg-white p-3 rounded-lg border\">\n            <span className=\"text-sm font-medium\">Global Offers</span>\n            <Switch\n              checked={siteSettings?.offers_enabled || false}\n              onCheckedChange={toggleGlobalOffers}\n            />\n          </div>\n\n          <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n            <DialogTrigger asChild>\n              <Button onClick={() => resetForm()}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Offer\n              </Button>\n            </DialogTrigger>\n            \n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {selectedOffer ? 'Edit Offer' : 'Create New Offer'}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Title *</Label>\n                    <Input\n                      id=\"title\"\n                      value={formData.title}\n                      onChange={(e) => setFormData({...formData, title: e.target.value})}\n                      placeholder=\"e.g., Diwali Special Offer\"\n                      required\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"subtitle\">Subtitle</Label>\n                    <Input\n                      id=\"subtitle\"\n                      value={formData.subtitle}\n                      onChange={(e) => setFormData({...formData, subtitle: e.target.value})}\n                      placeholder=\"e.g., Get 50% OFF\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({...formData, description: e.target.value})}\n                    placeholder=\"Detailed description of the offer...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"cta_text\">Button Text</Label>\n                    <Input\n                      id=\"cta_text\"\n                      value={formData.cta_text}\n                      onChange={(e) => setFormData({...formData, cta_text: e.target.value})}\n                      placeholder=\"Get Offer\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"cta_url\">Button URL</Label>\n                    <Input\n                      id=\"cta_url\"\n                      value={formData.cta_url}\n                      onChange={(e) => setFormData({...formData, cta_url: e.target.value})}\n                      placeholder=\"https://...\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"discount_percentage\">Discount %</Label>\n                    <Input\n                      id=\"discount_percentage\"\n                      type=\"number\"\n                      value={formData.discount_percentage}\n                      onChange={(e) => setFormData({...formData, discount_percentage: e.target.value})}\n                      placeholder=\"50\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"discount_amount\">Discount Amount</Label>\n                    <Input\n                      id=\"discount_amount\"\n                      value={formData.discount_amount}\n                      onChange={(e) => setFormData({...formData, discount_amount: e.target.value})}\n                      placeholder=\"₹5000\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"priority\">Priority</Label>\n                    <Input\n                      id=\"priority\"\n                      type=\"number\"\n                      value={formData.priority}\n                      onChange={(e) => setFormData({...formData, priority: parseInt(e.target.value)})}\n                      placeholder=\"1\"\n                      min=\"1\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"starts_at\">Start Date</Label>\n                    <Input\n                      id=\"starts_at\"\n                      type=\"date\"\n                      value={formData.starts_at}\n                      onChange={(e) => setFormData({...formData, starts_at: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"ends_at\">End Date</Label>\n                    <Input\n                      id=\"ends_at\"\n                      type=\"date\"\n                      value={formData.ends_at}\n                      onChange={(e) => setFormData({...formData, ends_at: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"background_color\">Background Color</Label>\n                    <Input\n                      id=\"background_color\"\n                      type=\"color\"\n                      value={formData.background_color}\n                      onChange={(e) => setFormData({...formData, background_color: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"text_color\">Text Color</Label>\n                    <Input\n                      id=\"text_color\"\n                      type=\"color\"\n                      value={formData.text_color}\n                      onChange={(e) => setFormData({...formData, text_color: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={formData.active}\n                    onCheckedChange={(checked) => setFormData({...formData, active: checked})}\n                  />\n                  <Label>Active</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {selectedOffer ? 'Update' : 'Create'} Offer\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Offers List */}\n      <div className=\"grid gap-4\">\n        {offers.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <Gift className=\"h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No offers created yet</h3>\n              <p className=\"text-gray-600 text-center mb-4\">\n                Create your first promotional offer to start engaging customers\n              </p>\n              <Button onClick={() => setShowCreateDialog(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Your First Offer\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          offers.map((offer) => (\n            <Card key={offer.id} className=\"overflow-hidden\">\n              <div \n                className=\"h-2\"\n                style={{ backgroundColor: offer.background_color }}\n              ></div>\n              \n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-xl font-semibold\">{offer.title}</h3>\n                      <Badge variant={offer.active ? \"default\" : \"secondary\"}>\n                        {offer.active ? 'Active' : 'Inactive'}\n                      </Badge>\n                      {offer.priority > 1 && (\n                        <Badge variant=\"outline\">Priority {offer.priority}</Badge>\n                      )}\n                    </div>\n                    \n                    {offer.subtitle && (\n                      <p className=\"text-lg text-gray-600 mb-2\">{offer.subtitle}</p>\n                    )}\n                    \n                    {offer.description && (\n                      <p className=\"text-gray-700 mb-3\">{offer.description}</p>\n                    )}\n                    \n                    <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                      {offer.discount_percentage && (\n                        <div className=\"flex items-center\">\n                          <Percent className=\"h-4 w-4 mr-1\" />\n                          {offer.discount_percentage}% OFF\n                        </div>\n                      )}\n                      \n                      {offer.discount_amount && (\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          {offer.discount_amount}\n                        </div>\n                      )}\n                      \n                      {offer.starts_at && (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          {new Date(offer.starts_at).toLocaleDateString()}\n                        </div>\n                      )}\n                      \n                      {offer.ends_at && (\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          Ends {new Date(offer.ends_at).toLocaleDateString()}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => toggleOffer(offer.id)}\n                    >\n                      {offer.active ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => editOffer(offer)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteOffer(offer.id)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminOffers;","size_bytes":17987},"frontend/src/components/Common/OfferBanner.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '../ui/button';\nimport { X, Gift, Clock, Percent, ExternalLink } from 'lucide-react';\nimport axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst OfferBanner = () => {\n  const [offer, setOffer] = useState(null);\n  const [siteSettings, setSiteSettings] = useState(null);\n  const [isDismissed, setIsDismissed] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchOfferData();\n  }, []);\n\n  useEffect(() => {\n    // Check if banner was dismissed in localStorage\n    const dismissed = localStorage.getItem('offer-banner-dismissed');\n    if (dismissed) {\n      const dismissedData = JSON.parse(dismissed);\n      // Check if it's the same offer\n      if (offer && dismissedData.offerId === offer.id) {\n        setIsDismissed(true);\n      }\n    }\n  }, [offer]);\n\n  const fetchOfferData = async () => {\n    try {\n      console.log('🔄 Fetching offer data...');\n      const [offersResponse, settingsResponse] = await Promise.all([\n        axios.get(`${API}/offers/active`),\n        axios.get(`${API}/site-settings`)\n      ]);\n      \n      console.log('📝 Site Settings:', settingsResponse.data);\n      console.log('🎁 Active Offers:', offersResponse.data);\n      \n      setSiteSettings(settingsResponse.data);\n      \n      // Get the highest priority active offer\n      const activeOffers = offersResponse.data;\n      if (activeOffers && activeOffers.length > 0) {\n        console.log('✅ Setting offer:', activeOffers[0]);\n        setOffer(activeOffers[0]); // Already sorted by priority\n      } else {\n        console.log('❌ No active offers found');\n      }\n    } catch (error) {\n      console.error('❌ Failed to fetch offer data:', error);\n    } finally {\n      setLoading(false);\n      console.log('✅ Loading completed');\n    }\n  };\n\n  const dismissBanner = () => {\n    setIsDismissed(true);\n    // Store dismissal in localStorage\n    if (offer) {\n      localStorage.setItem('offer-banner-dismissed', JSON.stringify({\n        offerId: offer.id,\n        dismissedAt: new Date().toISOString()\n      }));\n    }\n  };\n\n  const handleOfferClick = () => {\n    if (offer && offer.cta_url) {\n      if (offer.cta_url.startsWith('http')) {\n        window.open(offer.cta_url, '_blank', 'noopener,noreferrer');\n      } else {\n        window.location.href = offer.cta_url;\n      }\n    }\n  };\n\n  const formatTimeRemaining = (endDate) => {\n    if (!endDate) return null;\n    \n    const now = new Date();\n    const end = new Date(endDate);\n    const diff = end - now;\n    \n    if (diff <= 0) return 'Expired';\n    \n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    \n    if (days > 0) {\n      return `${days} day${days > 1 ? 's' : ''} left`;\n    } else if (hours > 0) {\n      return `${hours} hour${hours > 1 ? 's' : ''} left`;\n    } else {\n      return 'Ending soon';\n    }\n  };\n\n  // Show banner if all conditions are met\n  if (loading || !offer || !siteSettings?.offers_enabled || isDismissed) {\n    return null;\n  }\n\n\n  const timeRemaining = formatTimeRemaining(offer.ends_at);\n\n  return (\n    <div \n      className=\"relative overflow-hidden animate-in slide-in-from-top duration-500\"\n      style={{ \n        backgroundColor: offer.background_color || '#ff6b6b',\n        color: offer.text_color || '#ffffff'\n      }}\n    >\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `radial-gradient(circle at 25% 25%, currentColor 0%, transparent 50%), \n                           radial-gradient(circle at 75% 75%, currentColor 0%, transparent 50%)`\n        }}></div>\n      </div>\n      \n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between py-3\">\n          {/* Offer Content */}\n          <div className=\"flex items-center space-x-4 flex-1\">\n            {/* Icon */}\n            <div className=\"flex-shrink-0\">\n              <Gift className=\"h-6 w-6\" />\n            </div>\n            \n            {/* Offer Text */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-3 flex-wrap\">\n                <span className=\"font-bold text-lg\">\n                  {offer.title}\n                </span>\n                \n                {offer.subtitle && (\n                  <span className=\"font-medium opacity-90\">\n                    {offer.subtitle}\n                  </span>\n                )}\n                \n                {offer.discount_percentage && (\n                  <div className=\"flex items-center space-x-1 bg-white/20 px-2 py-1 rounded-full\">\n                    <Percent className=\"h-4 w-4\" />\n                    <span className=\"font-bold text-sm\">\n                      {offer.discount_percentage}% OFF\n                    </span>\n                  </div>\n                )}\n                \n                {offer.discount_amount && (\n                  <div className=\"bg-white/20 px-2 py-1 rounded-full\">\n                    <span className=\"font-bold text-sm\">\n                      Save {offer.discount_amount}\n                    </span>\n                  </div>\n                )}\n                \n                {timeRemaining && (\n                  <div className=\"flex items-center space-x-1 text-sm opacity-90\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{timeRemaining}</span>\n                  </div>\n                )}\n              </div>\n              \n              {offer.description && (\n                <p className=\"text-sm opacity-90 mt-1 hidden sm:block\">\n                  {offer.description}\n                </p>\n              )}\n            </div>\n          </div>\n          \n          {/* Actions */}\n          <div className=\"flex items-center space-x-3\">\n            {/* CTA Button */}\n            {offer.cta_url && (\n              <Button\n                onClick={handleOfferClick}\n                size=\"sm\"\n                className=\"bg-white/20 hover:bg-white/30 border border-white/30 backdrop-blur-sm transition-all duration-200 font-medium\"\n                style={{ \n                  color: offer.text_color || '#ffffff'\n                }}\n              >\n                {offer.cta_text || 'Get Offer'}\n                <ExternalLink className=\"h-4 w-4 ml-2\" />\n              </Button>\n            )}\n            \n            {/* Dismiss Button */}\n            <Button\n              onClick={dismissBanner}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-1 hover:bg-white/10 rounded-full\"\n              style={{ color: offer.text_color || '#ffffff' }}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OfferBanner;","size_bytes":7038},"frontend/src/context/SiteSettingsContext.jsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst SiteSettingsContext = createContext({});\n\nexport const SiteSettingsProvider = ({ children }) => {\n  const [siteSettings, setSiteSettings] = useState(null);\n  const [mediaSettings, setMediaSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const fetchSettings = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [siteResponse, mediaResponse] = await Promise.all([\n        axios.get(`${API}/site-settings`),\n        axios.get(`${API}/media-settings`)\n      ]);\n      \n      setSiteSettings(siteResponse.data);\n      setMediaSettings(mediaResponse.data);\n    } catch (err) {\n      console.error('Failed to fetch site settings:', err);\n      setError(err);\n      // Set default fallback values\n      setSiteSettings({\n        site_title: 'MMB',\n        header_tagline: 'Web Solutions',\n        site_description: 'Creating modern web solutions that convert visitors into customers.',\n        footer_text: '© 2024 MMB. All rights reserved.',\n        primary_color: '#3b82f6',\n        secondary_color: '#8b5cf6',\n        accent_color: '#ef4444',\n        nav_links: [],\n        social_links: [],\n        contact_email: '',\n        contact_phone: '',\n        contact_address: ''\n      });\n      setMediaSettings({\n        logo: null,\n        favicon: null,\n        hero_image: null,\n        about_image: null\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refreshSettings = () => {\n    fetchSettings();\n  };\n\n  const updateSettings = (newSiteSettings, newMediaSettings) => {\n    if (newSiteSettings) setSiteSettings(newSiteSettings);\n    if (newMediaSettings) setMediaSettings(newMediaSettings);\n  };\n\n  const getSocialLinkUrl = (platform) => {\n    if (!siteSettings?.social_links) return '#';\n    const link = siteSettings.social_links.find(l => l.platform === platform);\n    return link?.url || '#';\n  };\n\n  const getNavLinks = () => {\n    const defaultNavLinks = [\n      { name: 'Home', path: '/' },\n      { name: 'About', path: '/about' },\n      { name: 'Services', path: '/services' },\n      { name: 'Portfolio', path: '/portfolio' },\n      { name: 'Testimonials', path: '/testimonials' },\n      { name: 'Blog', path: '/blog' },\n      { name: 'Contact', path: '/contact' }\n    ];\n\n    if (!siteSettings?.nav_links || siteSettings.nav_links.length === 0) {\n      return defaultNavLinks;\n    }\n\n    return siteSettings.nav_links.map(link => ({\n      name: link.name,\n      path: link.url\n    }));\n  };\n\n  const getLogoUrl = () => {\n    return mediaSettings?.logo || null;\n  };\n\n  const getFaviconUrl = () => {\n    return mediaSettings?.favicon || null;\n  };\n\n  const getHeroImageUrl = () => {\n    return mediaSettings?.hero_image || null;\n  };\n\n  const getAboutImageUrl = () => {\n    return mediaSettings?.about_image || null;\n  };\n\n  const getThemeColors = () => {\n    return {\n      primary: siteSettings?.primary_color || '#3b82f6',\n      secondary: siteSettings?.secondary_color || '#8b5cf6',\n      accent: siteSettings?.accent_color || '#ef4444'\n    };\n  };\n\n  const contextValue = {\n    siteSettings,\n    mediaSettings,\n    loading,\n    error,\n    refreshSettings,\n    updateSettings,\n    getSocialLinkUrl,\n    getNavLinks,\n    getLogoUrl,\n    getFaviconUrl,\n    getHeroImageUrl,\n    getAboutImageUrl,\n    getThemeColors\n  };\n\n  return (\n    <SiteSettingsContext.Provider value={contextValue}>\n      {children}\n    </SiteSettingsContext.Provider>\n  );\n};\n\nexport const useSiteSettings = () => {\n  const context = useContext(SiteSettingsContext);\n  if (!context) {\n    throw new Error('useSiteSettings must be used within a SiteSettingsProvider');\n  }\n  return context;\n};\n\nexport default SiteSettingsContext;","size_bytes":3999}},"version":1}